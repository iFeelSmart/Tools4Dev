#### MODULE HEADER BLOC
#
#   - Name:
#       <The name of the command or function, followed by a one-line description of what it does.>
###
#   - Synopsis:
#       <In the case of a command, you get a formal description of how to run it and what command line options it takes.>
###
#   - Description:
#       <A textual description of the functioning of the command or function.>
###
#   - Examples:
#       <Some examples of common usage.>    
###
#   - Prefix:
#       _t4dModBb8
###
#   - Error Code:
#       320
###
#  -  See Also:
#       <[BitBucket] [Git] [Others Modules] etc.>
###
#  -  Supported Platform:
#       * OSX ( 10.12.6 or higher )
#       * Fedora ( 25 or higher )
###
#  -  Author(s):
#       Quentin NIO
#
###
#### HEADER BLOC ####

source $T4D_SOURCE_PATH/Git/_main_.env
source $T4D_SOURCE_PATH/BitBucket/_main_.env
source $T4D_MODULES_PATH/bb8/bb8-utils.env
source $T4D_MODULES_PATH/bb8/bb8-completions.env
source $T4D_MODULES_PATH/bb8/bb8-edit.env

bb8(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "bb8" "$#" "$@"
cat &>/dev/null << EOF
###### bb8
#   - Name:
#       bb8
###
#   - Synopsis:
#       BitBucket API Command Line Tools
###
#   - Definition:
#           BitBucket API Command Line Tools
#
#       * Create a global PullRequest 
#
#           Return green URL if PR was creating, Yellow if already exists
#
#       * Finish
#
#           Create Global PullRequest,
#           It will list all PR linked to your workspace then add their URL links to the description. 
#           DON'T USE THIS COMMAND unless you really want QA to review your work. 
#           %That means your work on any tickets is DONE% .
#
#       * OSX
#
#           You can use your Keychain in order to store your password.
#           %vi $Tools4Dev_PATH/.${USER}.env% add line %BITBUCKET_USERNAME={BitBucketUser}% .
#           Go to your keychain then add a password with account named %BitBucketPassword% .
#           Take care of removing all old BITBUCKET_USER_AND_PASSWORD reference in $WS_ROOT/.${USER}.env
#           Bb8 will now ask for your keychain password any time he wants to access your password. 
#
###
#   - Usage:
#       * bb8 <option>  [arguments]
#           Will execute bb8 command with all arguments
#       * bb8 help [option]
#           Show Option documentation 
#
###
#   - Options:
#
###
#   - Example:
#
#       * %bb8 start here -b master -done%          = Create PullRequest in a single repository targeting master
#       * %bb8 finish%                              = Create All SubPullRequest and Global PulLlRequest including all subPR link in description
#       * %bb8 list -s OPEN -r REVIEWER%            = List Opened PullRequest where user are already reviewer
#       * %bb8 propagate  -f%  <{URL}>              = Propagate Description in all SubPR without asking (To be used carefully)
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
#       PR              = Pull Request
#       SubPR           = Pull Request concerning SubRepositories, not global Project.
#
###
#   - Keyword:
#       BitBucket ; BB8 ; PullRequest ; PR
#       
###
###### DOCUMENTATION BLOC #####
EOF
########## CODE BLOC ##########


    local _OLDPWD=$PWD
    local CHPWD=1
    local _t4dBb8Error=320
    
    if [[ "$1" == '-debug' ]]; then
        shift
        local _debug='true'
        set -x
    fi
    
    cd $WS_ROOT
    mkdir -p $T4D_PROJECT_LOG_PATH/bitbucket

    if [[ $1 != "help" ]]; then 
        _t4dModBb8Logo
        
        local _JsonDescriptionFile="$T4D_PROJECT_LOG_PATH/bitbucket/bb8StartURL.json"
        local _outputURL="$T4D_PROJECT_LOG_PATH/bitbucket/bb8StartURL2.json"
        _t4dBitBucketSafetyCheck || return 320
        local GIK_PROJECTS="$(_t4dFindTypeInXML "project")"
    fi
    
    (set -e
        case $1 in
            list)           _t4dModBb8UtilsList ${@:2}                      ;;
            repo)           _t4dModBb8UtilsRepoList ${@:2}                  ;;
            get)            _t4dModBb8UtilsGet ${@:2}                       ;;
            branch)         _t4dModBb8UtilsListRemoteBranches ${@:2}        ;;
            merge)          _t4dModBb8UtilsMerge ${@:2}                     ;;
            global-merge)   _t4dModBb8UtilsGlobalMerge ${@:2}               ;;
            edit)           _t4dModBb8UtilsEditPullRequestInfo ${@:2}       ;;
            decline)        _t4dModBb8UtilsDecline ${@:2}                   ;;
            find)           _t4dModBb8UtilsFind ${@:2}                      ;;
            propagate)      _t4dModBb8UtilsPropagatePullRequestInfo ${@:2}  ;;
            start)          _t4dModBb8UtilsStart ${@:2}                     ;;
            finish)         _t4dModBb8UtilsFinish ${@:2}                    ;;
            help)           _bb8Doc ${@:2}                                  ;;
            *)
                _t4dDebugLog $perror "Empty or Unknown argument < $1 >"
                _t4dDebugLog $pinfo "bb8 help for more info"
                return 320
            ;;
        esac

    )
    #ALL COMMAND ARE LAUNCHED IN A SUBSHELL
    #This is here to stop command at the first untracked error
    #We Also need to check the subshell output in order to identified which kind of error is sent
    if [[ "$?" == "0" ]]; then 
        _t4dBb8Error="0"
    else
       _t4dBb8Error="320" 
    fi

    cd $_OLDPWD

    return $_t4dBb8Error


###############################
_t4dDebugInfoEnd "b88" "$@"
}

_bb8(){
    local cur prev opts 
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    if [[ ${prev} == "bb8" ]] || [[ ${prev} == "help" ]] ; then
        opts="$(_t4dDocGetOptionsListV4 "$(_t4dDocGetFunctionContent "bb8")" )"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ "$(echo ${prev} | grep '^-' )" != "" ]]; then
        opts="$(_t4dModBb8Completions ${prev})"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    else
        opts="$(_t4dDocGetSectionContent "$(_t4dDocGetFunctionContent "$(_t4dDocGetOptionsHiddenCall "$(_t4dDocGetFunctionContent "bb8")" ${COMP_WORDS[1]})" )" "Available Options" | sed 's| ||g' | cut -d '=' -f1 | cut -d '|' -f1)"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
   fi
}

_bb8Doc(){
###### _bb8Doc
#   - Name:
#       _bb8Doc
###
#   - Synopsis:
#       Show Project Documentation
###
#   - Definition:
#       Parse project Header to show user a ready to read shell documentation
###
###### DOCUMENTATION BLOC ##### 
    local _Internal="${2:-shell}"
    local _MainContent="$(_t4dDocGetFunctionContent bb8)"
    if [[ "$_Internal" == "-no-shell" ]]; then
        echo $_MainContent
    elif [[ $# -eq 1 ]] && [[ "$(_t4dDocGetOptionsList "$_MainContent" | grep "^$1")" != "" ]]; then
        local _OptionHiddenCallName="$(_t4dDocGetOptionsHiddenCall "$_MainContent" $1)"
        t4dHelp $_OptionHiddenCallName | sed "s|$_OptionHiddenCallName|bb8 $1|g"
    elif [[ "$1" == "" ]] || [[ "$1" == "bb8" ]]; then
        _t4dModBb8Logo doc
        t4dHelp -no-logo bb8
    else
        t4dHelp $@
    fi
    echo ""
    echo ""
    echo ""
}

_bb8Tips(){
    _t4dPromptSquare "TIPS : Bb8 Commands" $plblue
        for _Item in $(echo $1); do
            local _FunctionDoc="$(_bb8Doc $_Item -no-shell)"
            if [[ "$_FunctionDoc" != "" ]]; then
                local _Synopsis="$(_t4dDocGetSectionContent "$_FunctionDoc" "Synopsis" 2> /dev/null | sed 's|^       ||g' | sed 's| `|%%1|g' | sed 's|` |%%2|g' | sed "s|%%1| \\${plblue}|g" | sed "s|%%2|\\${pstd} |g")"
            else
                local _Synopsis=""
            fi
            _t4dPromptInfo "        ${plpurple}bb8 ${_Item}${pstd}" "${_Synopsis} " 40 "->"
        done
}

_t4dModBb8Logo(){
#   Show Great Ascii IFS logo art :p
#   Usage : _wksLogo

    local _color=${1:-$plcyan}
    l1="    #######    #######    ###### "
    l2="   ##    ##   ##    ##  ##    ## "
    l3="  #######    #######    ######   "
    l4=" ##    ##   ##    ##  ##    ##   "
    l5="#######    #######    ######     "
    if [[ "$_T4D_QUIET_MODE" == "true" ]]; then
        #DoNothing
    elif [[ "$1" == "doc" ]]; then
        local _Content="${l1}%${l2}%${l3}%${l4}%${l5}"
        _t4dDocWks ${_Content} ${plcyan}
    elif [[ "$1" == "main" ]]; then
        echo "${plcyan}"
        echo "      ,____________,"
        echo "      .'${pstd}${plpurple}  BB8 CLI  ${pstd}${plcyan}'."
        echo "     /~~~~^~~~^~^~~~\\"
        echo "    /      _    /||  \\"
        echo "   ;      ( }   \||D  ;"
        echo "   |    | /\__,=[_]   |"
        echo "   ;  ( |_\_  |---|   ;"
        echo "    \  )|  |/ |   |  /"
        echo "     '. |  /_ |   |.'"
        echo "      '------------'"
        echo "${pstd}"
    else
        local center="$(_t4dPromptCenterSpace "${#l5}" | sed 's|-||g')"
        echo "${center}${_color} $l1 ${pstd}"
        echo "${center}${_color} $l2 ${pstd}"
        echo "${center}${_color} $l3 ${pstd}"
        echo "${center}${_color} $l4 ${pstd}"    
        echo "${center}${_color} $l5 ${pstd}" 
        echo ""
    fi
}

#CODE ERROR : 321

_t4dModBb8UtilsStart(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dModBb8UtilsStart" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModBb8UtilsStart
#   - Name:
#       _t4dModBb8UtilsStart
###
#   - Synopsis:
#       Create Single Pull Request or Related PullRequest in a gik project
###
#   - Definition:
#       Explore All Repositories from a project and create a pull Request as 
#       WIP if current Manifest branch is different from origin
#
#       You can also send argument to GitLab MRStart function, this function may have lot's of
#       Additionnal options that will be available.
#
###
#   - Usage:
#       _t4dModBb8UtilsStart [here]
#
###
#   - Available Options:
#       here        = Disable Multi Pull Request Creation and Create a pull request in current repository
#
###
#   - Additionnal Options :
#       _t4dGitLabMRStart
###
#   - Example:
#       _t4dModBb8UtilsStart here -b master -done
#       _t4dModBb8UtilsStart here -b master -t '[DO NOT MERGE]'
#
###
#   - See Also :
#       _t4dGitLabMRStart
#       
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

local _JsonDescriptionFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/bb8StartURL.json"
if [[ "$1" == "here" ]]; then
    shift
    cd $_OLDPWD
    _t4dGitLabMRStart $@
else
    echo "__Related Pull Requests__" > "$_JsonDescriptionFile"
    for _folder in $(echo $WS_MANIFEST_PROJECTS); do
        local _ManifestBranch="$(_t4dFindDataInXML "project" "${_folder}" "revision")"
        local _ManifestOriginBranch="$(_t4dFindDataInXML "default" "$(_t4dFindDataInXML project $_folder default "$WS_ROOT/manifest")" "revision" "$WS_ROOT/manifest")"
        #Skipping if branch are identical
        if [[ "${_ManifestBranch}" != "${_ManifestOriginBranch}" ]]; then
            _t4dGitLabMRStart -r "${_folder}" -f -s $_ManifestBranch -b ${_ManifestOriginBranch} -u "$_JsonDescriptionFile" ${@}
        fi
        cd $WS_ROOT
    done
fi 

###############################
_t4dDebugInfoEnd "_t4dModBb8UtilsStart" "$@"
}

_t4dModBb8UtilsFinish(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dModBb8UtilsFinish" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModBb8UtilsFinish
#   - Name:
#       _t4dModBb8UtilsFinish
###
#   - Synopsis:
#       Create Global Pull Request AND Related pull request
###
#   - Definition:
#       Create a Global PullRequest in manager repository. It Follow a specific template for description
#       By Default it will take manifest origin branch to know target branch of the pull request. 
#       But you can force it's value by using -branch argument
#
###
#   - Available Options:
#       -b | -branch <BranchName>        = force PullRequest target branches,  
#
###
#   - Usage:
#       _t4dModBb8UtilsFinish 
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
    local _JsonDescriptionFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/bb8StartURL.json"
    # local _LocalCustomDescriptionFile=""
    local _OutPutURL="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/bb8StartURL2.json"
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/bb8StartURL3.json"
    local _ForceManifest=""
    local _ExtraArgs=""
    while [[ "$@" != "" ]]; do
        case "$1" in
            -branch|-b)
                _ForceManifest=${2}
                shift
                shift
            ;;
            -f)
                _ExtraArgs="$_ExtraArgs -f"
            ;;
            *)
                echo "Unknown option $1"
                return 1
            ;;
        esac
    done

    # if [[ "$_ForceDescription" == "true" ]] && [[ -e "$_LocalCustomDescriptionFile" ]]; then
    #     cat $_LocalCustomDescriptionFile > $_JsonDescriptionFile
    # else
        _t4dModBb8UtilsGenerateDefaultDescriptionFile > "$_JsonDescriptionFile"
    # fi

    for _folder in $(echo $WS_MANIFEST_PROJECTS); do
        local _ManifestOriginBranch="$(_t4dFindDataInXML "default" "$(_t4dFindDataInXML project $_folder default "$WS_ROOT/manifest")" "revision" "$WS_ROOT/manifest")"
        local _ManifestBranch="$(_t4dFindDataInXML "project" "${_folder}" "revision")"
        #Skipping if branch are identical
        [[ "${_ManifestBranch}" != "${_ForceManifest:-$_ManifestOriginBranch}" ]] && _t4dGitLabMRStart -r "${_folder}" -f -s $_ManifestBranch -b ${_ForceManifest:-$_ManifestOriginBranch} -u "$_JsonDescriptionFile"
        cd $WS_ROOT
    done
    _ManifestOriginBranch="$(_t4dFindDataInXML "default" "default" "revision" "$WS_ROOT/manifest")"
        
    echo "" > $_OutPutURL
    _t4dGitLabMRStart -d "$_JsonDescriptionFile" -b ${_ForceManifest:-$_ManifestOriginBranch} -done -u "$_OutPutURL"

    #Safeguard (check if something is trying to use bb8 finish several times for one branch adding new repository in the loop)
    local _PRUuid="$(_t4dGitLabUtilsGetPullRequestUuid $(cat $_OutPutURL) | sed 's%|% %g')"
    local __ID=$(echo $_PRUuid | cut -d ' ' -f3)
    local __KEY=$(echo $_PRUuid | cut -d ' ' -f1)
    local __REPO=$(echo $_PRUuid | cut -d ' ' -f2)
    _t4dGitLabMergeRequestAPIGet $(echo $_PRUuid) "${_OuputjsonFile}"

    local _SubPRs="$(_t4dGitLabGetRelatedPullRequests $_OuputjsonFile | sort )"
    local _LocalPRs="$(cat $_JsonDescriptionFile | grep -A100 'Related Pull Requests' | grep '^http' | sort)"

    if [[ "$_SubPRs" != "${_LocalPRs}" ]]; then
        local _ExtraPullRequests="$(diff  <(echo "${_SubPRs}" ) <(echo "${_LocalPRs}") | grep -Eo '^>.*' | sed 's|> ||g')"
        _t4dDebugLog $plog "Adding Related PullRequest :\n $_ExtraPullRequests"
        _t4dModBb8UtilsPropagatePullRequestInfo -f $__ID $__KEY $__REPO -keep-branch -add "$_ExtraPullRequests" 
    else
        _t4dSystemSilentCommand "_t4dModBb8UtilsPropagatePullRequestInfo -f $__ID $__KEY $__REPO -keep-branch" "Propagate PullRequest info in another process [ $__ID $__KEY $__REPO ]"
    fi

###############################
_t4dDebugInfoEnd "_t4dModBb8UtilsFinish" "$@"
}



_t4dModBb8UtilsRepoList(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dModBb8UtilsRepoList" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModBb8UtilsRepoList
#   - Name:
#       _t4dModBb8UtilsRepoList
###
#   - Synopsis:
#       List all pull request from a specific repository
###
#   - Usage:
#       _t4dModBb8UtilsRepoList <options> [argument]
#
###
#   - Available Options:
#       -branch | -b    = Set "At" argument to list only pull Requests from a specific branch
#       -repo           = Set Repository
#       -key            = Set Project Key
#       -order          = Override Order       NEWEST   ||   OLDEST
#       -limit          = Override Limit       Default 25    min-max 1-200
#       -state          = Override State       OPEN     ||   DECLINED     || MERGED
#       -tag <arg>      = Add Filter in Name, skipped all that is not containing Filter
#
###
#   - Verbosity :
#                    = Default is >ID  KEY REPOSITORY TITLE<
#       -v           = Default + Show URL
#       -vv          = Get All PullRequests Infos
#
###
#   - Note:
#       <  >    = Required
#       [  ]    = Optionnal
#       
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local _force=""
    local _quiet=""
    local _verbosityLevel="0"

    
    
    local _STATE="opened"
    local _ORDER="&sort=desc"
    local _TARGET_BRANCH=""
    local _STATUS=""
    local _LIMIT="25"
    local _TITLE=""
    local _PROJECT="$(_t4dSrcGitInfoProjectKEY)/$(_t4dSrcGitInfoRepoName)"
    local _TAG="None"
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsRepoList.json"

    while [[ "$@" != "" ]]; do
        case $1 in
            -state|-s)
                if [[ "$2" == "opened" ]] || [[ "$2" == "closed" ]] || [[ "$2" == "merged" ]]; then
                    _STATE="$2"
                    shift
                    shift
                else
                    _t4dModBb8UtilsError 321 "_t4dModBb8UtilsRepoList" "STATE $2" && return 321
                fi
            ;;
            -project|-p)
                _PROJECT="$2"
                shift
                shift
            ;;
            -branch|-b)
                _TARGET_BRANCH="&target_branch=$2"
                shift
                shift
            ;;
            -tag|-t)
                _TAG="$2"
                shift
                shift
            ;;
            -order|-o)
                if [[ "$2" == "asc" ]] || [[ "$2" == "desc" ]]; then
                    _ORDER="&sort=$2"
                    shift
                    shift
                else
                    _t4dModBb8UtilsError 321 "_t4dModBb8UtilsRepoList" "ORDER $2" && return 321
                fi
            ;;
            -limit)
                if [[ "$(expr $(echo $2) + 0)" == "$2" ]]; then
                    _LIMIT="$2"
                    shift
                    shift
                else
                    _t4dModBb8UtilsError 321 "_t4dModBb8UtilsRepoList" "int for LIMIT $2" && return 321
                fi
            ;;
            -vvv)
                shift
                _verbosityLevel="3"
            ;;
            -vv)
                shift
                _verbosityLevel="2"
            ;;
            -v)
                shift
                _verbosityLevel="1"
            ;;
            -ready-to-merge)
                shift
                _verbosityLevel="4"
            ;;
            *)
                _t4dModBb8UtilsError 321 "_t4dModBb8UtilsRepoList" "Unknown Argument $1"
                return 321
            ;;
         esac
    done

    _t4dPromptSquare "Calling GitLab API ..."

    _t4dDebugLog $pinfo "${_PROJECT}" "all" "${_STATE}" "${_LIMIT}" "${_OuputjsonFile}" "${_TARGET_BRANCH}${_ORDER}"
    _t4dGitLabProjectMergeRequestAPIList "${_PROJECT}" "all" "${_STATE}" "${_LIMIT}" "${_OuputjsonFile}" "${_TARGET_BRANCH}${_ORDER}"

    _t4dModBb8ListParse $_OuputjsonFile $_verbosityLevel false None $_TAG

###############################
_t4dDebugInfoEnd "_t4dModBb8UtilsRepoList" "$@"
}

_t4dModBb8UtilsList(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dModBb8UtilsList" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModBb8UtilsList
#   - Name:
#       _t4dModBb8UtilsList
###
#   - Synopsis:
#       List Pull Request from current logged user
###
#   - Definition:
#       It will call Git management tool API then parse json output to show a list
#           Of pull Requests linked to current logged user
#       Default behavior :
#           If no additionnal argument was sent, it will only search for
#           Open PullRequest created by current user with a maximum of 25
#           PullRequests orderer by the newest
#
#           STATE   : OPEN
#           ROLE    : AUTHOR
#           LIMIT   : 25
#
#       Available information by default :
#       <ID>    <PROJECT KEY>   <Repository Name>    <Title>  < PR STATUS >
#
###
#   - Usage:
#       _t4dModBb8UtilsList <option> [argument]
#
###
#   - Available Options:
#       -s <arg>     = Override State       OPEN     || DECLINED     || MERGED
#       -r <arg>     = Override Role        AUTHOR   || PARTICIPANT  || REVIEWER
#       -p <arg>     = Override Status      APPROVED || UNAPPROVED   || NEEDS_WORK
#       -o <arg>     = Override Order       NEWEST   || OLDEST
#       -l <arg>     = Override Limit       Default 25    min-max 1-200
#
#       -f <arg>     = Filtre list output 
#       -offline     = offline mode
#       -json        = use a specific jsonFile instead of default (used by bb8 find)
#
###
#   - Example:
#       _t4dModBb8UtilsList -s MERGED 
#       _t4dModBb8UtilsList -s OPEN -r REVIEWER 
#       _t4dModBb8UtilsList -s OPEN -r AUTHOR 
#
###
#   - Verbosity :
#                    = Default is >ID  KEY REPOSITORY TITLE<
#       -v           = Default + Show URL
#       -vv          = Get All PullRequests Infos
#
###
#   - Note:
#       <  >    = Required
#       [  ]    = Optionnal
#       🔹      = PR STATUS CLEAN - Ready To Be Merge
#       🔥      = PR STATUS CONFLICTED - This PR has conflict
#       
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local _force=""
    local _quiet=""
    local _verbosityLevel="0"
    local _offline=""
    
    local _filtre=""
    
    
    local _STATE="opened"
    local _SCOPE="assigned_to_me"
    local _STATUS=""
    local _ORDER="&sort=desc"
    local _LIMIT="25"
    local _FOLDER=""
    local _KEY=""
    local _TITLE=""
    local _TAG="None"
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dGitLabPRUtilsList.json"
    
    while [[ "$@" != "" ]]; do
        case $1 in
            -state|-s)
                if [[ "$2" == "opened" ]] || [[ "$2" == "closed" ]] || [[ "$2" == "merged" ]]; then
                    _STATE="$2"
                    shift
                    shift
                else
                    _t4dModBb8UtilsError 321 "_t4dModBb8UtilsList" "STATE $2" && return 321
                fi
            ;;
            -scope|-sc)
                if [[ "$2" == "created_by_me" ]] || [[ "$2" == "assigned_to_me" ]] || [[ "$2" == "all" ]]; then
                    _SCOPE="$2"
                    shift
                    shift
                else
                    _t4dModBb8UtilsError 321 "_t4dModBb8UtilsList" "ROLE $2" && return 321
                fi
            ;;
            -p)
                if [[ "$2" == "APPROVED" ]] || [[ "$2" == "UNAPPROVED" ]] || [[ "$2" == "NEEDS_WORK" ]]; then
                    _STATUS="$2"
                    shift
                    shift
                else
                    _t4dModBb8UtilsError 321 "_t4dModBb8UtilsList" "STATUS $2" && return 321
                fi
            ;;
            -order|-o)
                if [[ "$2" == "asc" ]] || [[ "$2" == "desc" ]]; then
                    _ORDER="&sort=$2"
                    shift
                    shift
                else
                    _t4dModBb8UtilsError 321 "_t4dModBb8UtilsList" "ORDER $2" && return 321
                fi
            ;;
            -l)
                if [[ "$(expr $(echo $2) + 0)" == "$2" ]]; then
                    _LIMIT="$2"
                    shift
                    shift
                else
                    _t4dModBb8UtilsError 321 "_t4dModBb8UtilsList" "int for LIMIT $2" && return 321
                fi
            ;;
            -t)
                _TAG="$2"
                shift
                shift
            ;;
            -f)
                    _filtre="$2"
                    shift
                    shift
            ;;
            -vv)
                shift
                _verbosityLevel="2"
            ;;
            -v)
                shift
                _verbosityLevel="1"
            ;;
            -offline)
                shift
                _offline="true"
            ;;
            -json)
                _offline="external"
                _OuputjsonFile=$2
                shift
                shift
            ;;
            *)
                _t4dModBb8UtilsError 321 "_t4dModBb8UtilsList" "Unknown Argument $1"
                return 321
            ;;
         esac
    done
    
    if [[ "${_offline}" == "" ]]; then
        _t4dPromptSquare "Calling GitLab API ..."
        for _var in _STATE _SCOPE _STATUS _ORDER _LIMIT _FOLDER _KEY _TITLE; do
            local __var="$(echo $(eval "echo \$$_var"))"
            [[ "${__var}" != "" ]] && _t4dPromptInfo "$(echo ${_var} | sed 's|^_||g')" "${__var}" 8
        done
        
        _t4dGitLabMergeRequestAPIList ${_SCOPE} ${_STATE} ${_LIMIT} "${_OuputjsonFile}" "${_ORDER}"
        
    elif [[ "${_offline}" == "external" ]]; then
        echo ""
    else
        _t4dPromptSquare "Offline mode"
        echo ""
    fi

    _t4dModBb8ListParse $_OuputjsonFile
###############################
_t4dDebugInfoEnd "_t4dModBb8UtilsList" "$@"
}

_t4dModBb8ListParse(){
###### _t4dModBb8ListParse
#   Parse And Show GitLab List Result
#   Usage : _t4dModBb8ListParse <OutputJsonFile> [verbosityLvl] [internal]
##### DOCUMENTATION BLOC #####
    local _size=$(expr $(_t4dGetJsonData ${1} 'length') - 1) 2> /dev/null
    local _message="$(_t4dGetJsonData ${1} ".message")" 2> /dev/null
    local _verbosityLevel="${2:-$_verbosityLevel}"
    local _internal="${3:-false}"
    local _FiltreById="${4:-None}"
    local _Tag="$(echo ${5:-None} | sed 's/[][]//g')"
    local _LogAtEnd=""
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8ListParse.json"
    # local _Tag="WIP"
    
    [[ "$_message" != "" ]] && _t4dPromptSquare "$_message"
    [[ "$_internal" == "false" ]] && [[ "$_message" == "" ]] && _t4dPromptSquare "Result ($(expr ${_size} + 1))"
    
    if [[ "$(echo $_size | grep '^-')" == "" ]] && [[ "$_message" == "" ]]; then
        for i in $(seq 0 $_size); do
            local __URL="$(_t4dGetJsonData ${1} ".[$i].web_url")"

            local __UUID="$(_t4dGitLabUtilsGetPullRequestUuid ${__URL})"
            local __KEY="$(echo $__UUID | cut -d '|' -f1)"
            local __REPOSITORY="$(echo $__UUID | cut -d '|' -f2)"
            local __ID="$(echo $__UUID | cut -d '|' -f3)"

            local __STATUS="$(_t4dGetJsonData ${1} ".[$i].merge_status")"
            local __AUTHOR="$(_t4dGetJsonData ${1} ".[$i].author.name")"
            [[ "${__STATUS}" == "can_be_merged" ]] && _STATUS=" 🔹 "
            [[ "${__STATUS}" == "cannot_be_merged" ]] && _STATUS=" 🔥 "

            local __TITLE="$(_t4dGetJsonData ${1} ".[$i].title")"
            local __TITLE_PREFIX="$(echo $__TITLE | grep -Eo ".*:" | sed 's/://g')"
            local __SOURCE_BRANCH="$(_t4dGetJsonData ${1} ".[$i].source_branch")"
            local _OUTPUT_LINE="${plcyan}$(_t4dPromptVarWithSpace 6 ${__ID})${pstd} ${plpurple}$(_t4dPromptVarWithSpace "$(expr ${#__REPOSITORY} + 4 )" ${__KEY}/${__REPOSITORY})${pstd} ${plyellow}${__TITLE}${pstd} ${_STATUS}"
            local _COMPRESS_LINE="${plcyan}$(_t4dPromptVarWithSpace 6 ${__ID})${pstd} ${plpurple}$(_t4dPromptVarWithSpace "$(expr ${#__REPOSITORY} + 2 )" ${__REPOSITORY})${pstd} ${puyellow} $__SOURCE_BRANCH ${pstd}"
            
            if [[ "$_FiltreById" != "None" ]]; then
                if [[ "$__ID" == "$_FiltreById" ]]; then
                    echo ${_OUTPUT_LINE} | sed 's|%||g'
                    _t4dGitLabMergeRequestAPIListApprovals "$(_t4dGetJsonData ${1} ".[$i].project_id" )" ${__ID} $_OuputjsonFile
                    local __APPROVERS="$(_t4dGetJsonData ${_OuputjsonFile} ".approvers | length" )"
                    for _Approver in $(seq 0 $(expr $__APPROVERS - 1)); do
                        local __NAME="$(_t4dGetJsonData ${_OuputjsonFile} ".approvers[$_Approver].user.name")"
                        local __REVIEW="$(_t4dGetJsonData ${_OuputjsonFile} ".approved_by" | grep "$__NAME" )"
                        [[ "$__REVIEW" != "" ]] && echo "    - ${plgreen}APPROVED${pstd} $__NAME"
                        [[ "$__REVIEW" == "" ]] && echo "    - ${plyellow}WAITING${pstd} $__NAME"
                    done
                fi
            elif [[ "$(echo "${__KEY}${__ID}${__REPOSITORY}${__STATUS}${__TITLE}" | grep "${_filtre}")" != "" ]] ; then 
                if [[ "$_Tag" != "None" ]] && [[ "$(echo $__TITLE | sed 's/[][]//g' | grep "$_Tag")" == "" ]]; then
                echo "paint hasn't dried yet"; return
                    case $_verbosityLevel in
                        1|2|3|4)
                            _t4dPromptLine
                            _t4dDebugLog $pskip "$(echo ${_COMPRESS_LINE} | sed 's|%||g')"
                        ;;
                    esac
                else
                    case $_verbosityLevel in
                        0)
                            echo ${_OUTPUT_LINE} | sed 's|%||g'
                        ;;
                        1)
                            _t4dPromptLine
                            echo ${_OUTPUT_LINE} | sed 's|%||g'
                            echo "${plwhite}      ${__URL}${pstd}"
                            echo ""
                            
                        ;;
                        2)
                            _t4dPromptLine

                            _t4dGitLabMergeRequestAPIListApprovals "$(_t4dGetJsonData ${1} ".[$i].project_id" )" ${__ID} $_OuputjsonFile
                            local __APPROVERS="$(_t4dGetJsonData ${_OuputjsonFile} ".approvers | length" )"
                            local _RelatedPRs="$(_t4dGetJsonData ${1} ".[$i].description" | grep -A100 '__Related Pull Requests__'| grep '^http')"
                            echo "${plcyan}${__TITLE_PREFIX} ${pstd}"
                            echo $_COMPRESS_LINE | sed 's|%||g'
                            echo "${plblue}      ${__URL}${pstd}"
                            for _Approver in $(seq 0 $(expr $__APPROVERS - 1)); do
                                local __NAME="$(_t4dGetJsonData ${_OuputjsonFile} ".approvers[$_Approver].user.name")"
                                local __REVIEW="$(_t4dGetJsonData ${_OuputjsonFile} ".approved_by" | grep "$__NAME" )"
                                [[ "$__REVIEW" != "" ]] && echo "    - ${plgreen}APPROVED${pstd} $__NAME"
                                [[ "$__REVIEW" == "" ]] && echo "    - ${plyellow}WAITING${pstd} $__NAME"
                            done
                            echo "${plwhite}$_RelatedPRs$pstd"
                            _t4dPromptEndOfLine "$__AUTHOR" $plblue
                            
                        ;;
                        3)
                            _t4dPromptLine
                            _t4dModBb8UtilsGet ${__ID} ${__KEY} ${__REPOSITORY}
                            echo ""
                            
                        ;;
                        4)
                            
                            _t4dGitLabProjectAPIApprovalRules "$(_t4dGetJsonData ${1} ".[$i].project_id" )" $_OuputjsonFile
                            local _RequiredApproval="$(_t4dGetJsonData ${_OuputjsonFile} ".[0].approvals_required" )"

                            _t4dGitLabMergeRequestAPIListApprovals "$(_t4dGetJsonData ${1} ".[$i].project_id" )" ${__ID} $_OuputjsonFile
                            local __APPROVERS="$(_t4dGetJsonData ${_OuputjsonFile} ".approvers | length" )"
                            local _Approval="0"
                            local _Waiting="0"
                            for _Approver in $(seq 0 $(expr $__APPROVERS - 1)); do
                                local __NAME="$(_t4dGetJsonData ${_OuputjsonFile} ".approvers[$_Approver].user.name")"
                                local __REVIEW="$(_t4dGetJsonData ${_OuputjsonFile} ".approved_by" | grep "$__NAME" )"
                                [[ "$__REVIEW" != "" ]] && _Approval="$(expr $_Approval + 1 )"
                                [[ "$__REVIEW" == "" ]] && _Waiting="$(expr $_Waiting + 1 )"
                            done

                            _t4dGitLabMergeRequestAPIListPipelines "$(_t4dGetJsonData ${1} ".[$i].project_id" )" ${__ID} $_OuputjsonFile
                            local _TotalBuild="$(_t4dGetJsonData $_OuputjsonFile "length")"
                            local _LastBuild="$(_t4dGetJsonData $_OuputjsonFile ".[0].status")"
                            local _SuccessBuild="$(cat $_OuputjsonFile | grep '"status": "success"' | wc -l | tr -d ' ')"
                            local _CanceledBuild="$(cat $_OuputjsonFile | grep '"status": "canceled"' | wc -l | tr -d ' ')"
                            local _FailedBuild="$(cat $_OuputjsonFile | grep '"status": "failed"' | wc -l | tr -d ' ')"
                            local _PrStatus="$pemwarning"

                            local _Author="$plblue$(_t4dPromptVarWithSpace 20 "$__AUTHOR")$pstd"

                            if [[ "${_LastBuild}" == "success" ]]; then
                                local _BuildStatus="$plgreen$(_t4dPromptVarWithSpace 25 "[Build Passing ($_SuccessBuild/$_CanceledBuild/$_FailedBuild)]")$pstd"
                                _PrStateBuild="0"
                            elif [[ "$_TotalBuild" == "0" ]] || [[ "${_LastBuild}" == "failed" ]]; then
                                local _BuildStatus="$plred$(_t4dPromptVarWithSpace 25 "[Build Failed ($_SuccessBuild/$_CanceledBuild/$_FailedBuild)]")$pstd"
                                _PrStateBuild="1"
                            else
                                local _BuildStatus="$plyellow$(_t4dPromptVarWithSpace 25 "[Build ${_LastBuild} ($_SuccessBuild/$_CanceledBuild/$_FailedBuild)]")$pstd"
                                _PrStateBuild="2"
                            fi

                            if [[ $_STATUS == " 🔹 " ]]; then
                                _PrStateNeedWork="0"
                            else
                                _PrStateNeedWork="1"
                            fi

                            if [[ $_Approval -ge $_RequiredApproval ]]; then
                                local _ApprovalStatus="${plgreen}$(_t4dPromptVarWithSpace 20 "[${_Approval}(${_Waiting})/$_RequiredApproval Approval]")$pstd"
                                _PrStateApproval="0"
                            elif [[ "$_Approval" == "0" ]]; then
                                local _ApprovalStatus="${plred}$(_t4dPromptVarWithSpace 20 "[${_Approval}(${_Waiting})/$_RequiredApproval Approval]")$pstd"
                                _PrStateApproval="1"
                            else
                                local _ApprovalStatus="${plyellow}$(_t4dPromptVarWithSpace 20 "[${_Approval}(${_Waiting})/$_RequiredApproval Approval]")$pstd"
                                _PrStateApproval="2"
                            fi

                            case "${_PrStateNeedWork}${_PrStateApproval}${_PrStateBuild}" in
                                000)
                                    _PrStatus="$pemvalid"
                                ;;
                                001)
                                    _PrStatus="$pemwarning"
                                ;;
                                002)
                                    _PrStatus="${plpurple}✔${pstd} "
                                ;;
                                010)
                                    _PrStatus="$pemwarning"
                                ;;
                                1*)
                                    _PrStatus="$pemfailed"
                                ;;
                                01*)
                                    _PrStatus="$pemfailed"
                                ;;
                            esac

                            if [[ "$_T4D_HYPER_LINK_COMPATIBLE" == "false" ]]; then
                                local _Title="${__TITLE}"
                            else
                                local _Title="${plwhite}$(_t4dPromptHyperLink "${__URL}" "Link")${pstd}"
                            fi

                            if [[ $(_t4dPromptSize) -lt 150 ]]; then
                                echo $_COMPRESS_LINE | sed 's|%||g'
                                if [[ $_PrStateBuild != 0 ]] && [[ $_PrStateApproval == 0 ]]; then
                                    _LogAtEnd="${_LogAtEnd}\n$(echo "jks start $__SOURCE_BRANCH")"
                                fi
                                echo   "$plred $_PrStatus   $_BuildStatus $_ApprovalStatus ${pstd}" | sed 's|%||g'
                            else
                                if [[ $_PrStateBuild != 0 ]] && [[ $_PrStateApproval == 0 ]]; then
                                    _LogAtEnd="${_LogAtEnd}\n$(echo "jks start $__SOURCE_BRANCH")"
                                fi
                                echo   "$plred $_PrStatus   $_BuildStatus $_ApprovalStatus${pstd}$_Author $_Title  ${_COMPRESS_LINE} " | sed 's|%||g'
                            fi

                            
                        ;;
                        *)
                            _t4dModBb8UtilsError 321 "_t4dModBb8UtilsList" "Unknown Verbosity Lvl $_verbosityLevel"
                        ;;
                    esac
                fi
            fi
        done
        echo $_LogAtEnd
    fi
}

_t4dModBb8UtilsGet(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dModBb8UtilsGet" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModBb8UtilsGet
#   - Name:
#       _t4dModBb8UtilsGet
###
#   - Synopsis:
#       Will Call Git management tool API in order to get many information about any PullRequest
###
#   - Definition:
#       _t4dModBb8UtilsGet will be usefull in order to get many information about any PullRequest
#       By simply sending https link, or a part of it, il will parse the address to determine
#       his KEY, REPOSITORY, ID 3 Important value to get pull request info on bitbucket.
#
#       It will show you :
#           ID, Title, Pipeline state, State, List of Reviewers, Branches, 
#           Description content, URL
#
###
#   - Usage:
#       _t4dModBb8UtilsGet <ID> [PROJECT] [REPO]
#       _t4dModBb8UtilsGet <URL>
#
###
#   - Example:
#       _t4dModBb8UtilsGet https://<server>/<key>/<project>/-/merge_requests/<id>
#       _t4dModBb8UtilsGet <id>   <key>     <project>
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local _PullRequestUuid="$(_t4dGitLabUtilsGetPullRequestUuid $@)"
    local _KEY="$(echo $_PullRequestUuid | cut -d "|" -f1)"
    local _REPO="$(echo $_PullRequestUuid | cut -d "|" -f2)"
    local _ID="$(echo $_PullRequestUuid | cut -d "|" -f3)"

    local GITLAB_PREFERENCE_GET_DESCRIPTION="${GITLAB_PREFERENCE_GET_DESCRIPTION:-true}"
    
    #BEWARE : This default path can be used in other functions
    #Search for _GetJsonDefaultPath if you need to edit this var
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsGet.json"
    local _OuputjsonFileApprovals="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsGetApprovals.json"
    
    if [[ "${_KEY}" == "" ]] || [[ "${_REPO}" == "" ]]; then
        cd $_OLDPWD
        _KEY="$(_t4dSrcGitInfoProjectKEY)"
        _REPO="$(_t4dSrcGitInfoRepoName)"
        cd $WS_ROOT
    fi

    if [[ "${_ID}" == "" ]]; then
        _t4dDebugLog $perror "No merge request to get details from. Aborting ..."
        return 321
    fi
    
    _t4dPromptSquare "${_KEY}/${_REPO}  -> ${_ID}"
    _t4dGitLabMergeRequestAPIGet ${_KEY} ${_REPO} ${_ID} "${_OuputjsonFile}"
    _t4dGitLabMergeRequestAPIListApprovals "${_KEY}/${_REPO}" ${_ID} "${_OuputjsonFileApprovals}"
    local _error="$(_t4dGetJsonData ${_OuputjsonFile} ".error")"
    if [[ "${_error}" != "null" ]]; then
        _t4dDebugLog $perror $_error
        return 321
    fi

    #GET
    local __PIPELINE="$(_t4dGetJsonData ${_OuputjsonFile} ".head_pipeline.status")"
    local __STATE="$(_t4dGetJsonData ${_OuputjsonFile} ".state")"
    local __TITLE="${plyellow}$(_t4dGetJsonData ${_OuputjsonFile} ".title")${pstd}"
    local __REF_BRANCH="${plred}$(_t4dGetJsonData ${_OuputjsonFile} ".source_branch")${pstd}"
    local __DESC="${plblue}$(_t4dGitLabMRInfoGetDescription ${_OuputjsonFile} ".description")"
    local __TARGET_BRANCH="${plwhite}$(_t4dGetJsonData ${_OuputjsonFile} ".target_branch")${pstd}"
    local _link="${plwhite}URL : $(_t4dGetJsonData ${_OuputjsonFile} ".web_url")${pstd}"

    case "${__PIPELINE}" in
        success)
            __PIPELINE="${plgreen}${__PIPELINE}$pstd"
        ;;
        failed)
            __PIPELINE="${plred}${__PIPELINE}$pstd"
        ;;
        *)
            __PIPELINE="${plyellow}${__PIPELINE}$pstd"
        ;;
    esac
    
    #SHOW
    _t4dPromptInfo "ID" "${_ID}" 7
    _t4dPromptInfo "Title" "${__TITLE}" 7
    _t4dPromptInfo "Pipeline" "${__PIPELINE}" 11
    _t4dPromptInfo "State" "${__STATE}" 11
    _t4dPromptInfo "Approvers" " " 11
    _t4dGitLabMRInfoGetAllApprovers "${_OuputjsonFileApprovals}"
    _t4dPromptInfo "Branches" " " 11
    echo "      From   ${__REF_BRANCH}  to  ${__TARGET_BRANCH}"
    echo ""
    if [[ "$GITLAB_PREFERENCE_GET_DESCRIPTION" != 'false' ]] && [[ "${__DESC}" != "${plblue}" ]]; then
        _t4dPromptInfo "Description" " " 11
        echo "${__DESC}" | sed 's|%34|"|g'
    fi
    echo "${pstd}"
    echo "${_link}"

###############################
_t4dDebugInfoEnd "_t4dModBb8UtilsGet" "$@"
}

_t4dModBb8UtilsListRemoteBranches(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dModBb8UtilsListRemoteBranches" "$#" "$@"
###### _t4dModBb8UtilsListRemoteBranches
#   - Name:
#       _t4dModBb8UtilsListRemoteBranches
###
#   - Synopsis:
#       Get branches available from Gitlab repo
###
#   - Example:
#       _t4dModBb8UtilsListRemoteBranches
#       _t4dModBb8UtilsListRemoteBranches <FILTER>
#       _t4dModBb8UtilsListRemoteBranches <KEY> <REPO> <FILTER>
###
###### DOCUMENTATION BLOC #####
    case $# in
        0)
            local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsListRemoteBranches.json"
            _t4dGitLabProjectAPIListBranches "$(_t4dSrcGitInfoProjectKEY)" "$(_t4dSrcGitInfoRepoName)" $_OuputjsonFile
            local _Branches="$(_t4dGetJsonData ${_OuputjsonFile} "length")"
            for _Branch in $(seq 0 $(expr $_Branches - 1)); do
                echo "$(_t4dGetJsonData ${_OuputjsonFile} ".[$_Branch].name")"
            done
        ;;
        1)
            _t4dSrcGitLabUtilsListRemoteBranches "$(_t4dSrcGitInfoProjectKEY)" "$(_t4dSrcGitInfoRepoName)" "${1}"
        ;;
        *)
            _t4dSrcGitLabUtilsListRemoteBranches $@
        ;;
    esac

###############################
_t4dDebugInfoEnd "_t4dModBb8UtilsListRemoteBranches" "$@"
}

_t4dModBb8UtilsMerge(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dModBb8UtilsMerge" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModBb8UtilsMerge
#   - Name:
#       _t4dModBb8UtilsMerge
###
#   - Synopsis:
#       Merge a pull request to its destination
###
#   - Definition:
#
###
#   - Usage:
#       _t4dModBb8UtilsMerge <URL>
#       _t4dModBb8UtilsMerge -f <URL>
#       _t4dModBb8UtilsMerge <ID> <PROJECT> <REPO>
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local _Force="false"
    local _Squash="false"
    local _Delete="${BB8_PREFERENCE_BRANCH_DELETION:-false}"

    while [[ "$@" != "" ]]; do
        case "$1" in
            -force|-f)
                _Force="true"
                shift
            ;;
            -squash|-s)
                _Squash="true"
                shift
            ;;
            -delete|-d)
                _Delete="true"
                shift
            ;;
            *)
                break
            ;;
        esac
        shift
    done

    local _PullRequestUuid="$(_t4dGitLabUtilsGetPullRequestUuid $@)"
    local _KEY="$(echo $_PullRequestUuid | cut -d "|" -f1)"
    local _REPO="$(echo $_PullRequestUuid | cut -d "|" -f2)"
    local _ID="$(echo $_PullRequestUuid | cut -d "|" -f3)"

    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsMerge.json"
    local _GetJsonDefaultPath="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsGet.json"
    local _InputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsMergeInput.json"
    echo "" > $_OuputjsonFile
    _t4dModBb8UtilsGet $@ | tee -a $_OuputjsonFile

cat > $_InputjsonFile << EOF
{
    "squash": "${_Squash}",
    "should_remove_source_branch": "${_Delete}"
}
EOF

    if [[ "$_Force" == 'false' ]]; then
        echo "Press enter to merge Pull Request, Ctrl+C to abort"
        read -n
    fi
    _t4dGitLabMergeRequestAPIMerge "${_KEY}/${_REPO}" "${_ID}" "${_InputjsonFile}" "${_OuputjsonFile}"
    local _MESSAGE="$(_t4dGetJsonData ${_OuputjsonFile} ".message")"
    if [[ "$_MESSAGE" != "null" ]]; then
        _t4dPromptSquare "$_MESSAGE" "$plred"
        return 320
    else
        _t4dPromptSquare "Pull Request Merged" "$plgreen"
    fi
    cd $_OLDPWD

###############################
_t4dDebugInfoEnd "_t4dModBb8UtilsMerge" "$@"
}


_t4dModBb8UtilsGlobalMerge(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dModBb8UtilsGlobalMerge" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModBb8UtilsGlobalMerge
#   - Name:
#       _t4dModBb8UtilsGlobalMerge
###
#   - Synopsis:
#       Show you a global MultiPR Status then ask you to allow global merge or not. 
###
#   - Definition:
#       Multi PR Merger Assistant
#       Show a global status of all Related PullRequest then ask user his decision
#       Press Enter :
#           Will Try to merge all Related PullRequest
#           Align Manifest.xml and .diff file then push modification to be aligned with branch origin
#           User will simply has to go on bitbucket and click on merge after a small verification
#       Press Any Other Key :
#           Will Skip Merge Part and only try to realign manifest + .diff
#       Press Ctrl+C :
#           Abort All
#
###
#   - Usage:
#       _t4dModBb8UtilsGlobalMerge <ID> [PROJECT] [REPO]
#       _t4dModBb8UtilsGlobalMerge <URL>
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
    local _Force="false"
    local _ForceGlobalPRMerge=""
    if [[ "$1" == "-f" ]]; then
        _Force="true"
        _ForceGlobalPRMerge="-f"
        shift
    fi

    local _Delete="${BB8_PREFERENCE_BRANCH_DELETION:-true}"
    local _Squash="${BB8_PREFERENCE_SQUASH:-false}"
    local WS_MANIFEST_PROJECTS="$(_t4dFindTypeInXML "project" "$WS_ROOT/manifest" )"
    local _Answer="0"
    local _PullRequestUuid="$(_t4dGitLabUtilsGetPullRequestUuid $@)"
    local _KEY="$(echo $_PullRequestUuid | cut -d "|" -f1)"
    local _REPO="$(echo $_PullRequestUuid | cut -d "|" -f2)"
    local _ID="$(echo $_PullRequestUuid | cut -d "|" -f3)"

    if [[ "$(_t4dModBb8UtilsWksProjectManager $_KEY $_REPO)"  == "false" ]]; then
        _t4dDebugLog $perror  "Do not use bb8 global-merge on other repositories than WKS Manager project"
        false
    fi

    local _GlobalPrURL="https://$_t4dGitLabURL/${_KEY}/${_REPO}/-/merge_requests/${_ID}"
    [[ "$_ID" == "$_REPO" ]] && _t4dPromptError "321" "Can't determine PullRequest ID, please use URL by default" && return 321

    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsMerge.json"
    local _OuputjsonFile2="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsMerge2.json"
    local _GetJsonDefaultPath="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsGet.json"
    local _RelatedPRJsonRootPath="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsGlobalMerge"
    local _GetJsonDefaultPath="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsGet.json"
    local _LogFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsGlobalMerge.log"
    echo "" > $_OuputjsonFile
    _t4dModBb8UtilsGet $_GlobalPrURL | tee -a $_OuputjsonFile
    local GITLAB_PREFERENCE_GET_DESCRIPTION='false'
    local _RelatedPRs="$(tail -n+1 $_OuputjsonFile | grep -A100 '__Related Pull Requests__'| grep '^http')"
    local __REF_BRANCH="$(_t4dGetJsonData ${_GetJsonDefaultPath} ".source_branch")"
    local __TARGET_BRANCH="$(_t4dGetJsonData ${_GetJsonDefaultPath} ".target_branch")"

    if [[ "$_Force" != "true" ]]; then
        _t4dPromptSquare "Your are going to Merge Multiple pull Request and realign manifest + .diff file"
        echo "Take a breath et please verify at least :"
        echo "    * Each origin and target branch of each PullRequests"
        echo "    * Repositories concerned by the merge."
        echo "    * You are allowed to "
        echo "Merging ${plred}${__REF_BRANCH}${pstd} => ${plwhite}${__TARGET_BRANCH}${pstd}"
        _t4dPromptAskForChar "Press Enter to Proceed, any key to skip merge and align your manifest & .diff, Ctrl + C to abort" || _Answer="$?"
    else
        _Answer="0"
    fi

    if [[ "$_Answer" == "0" ]]; then
        if [[ "$(_t4dSrcGitIsMyBranchProtected $__TARGET_BRANCH)" == "" ]] && [[ "${BB8_PREFERENCE_BRANCH_DELETION:-true}" == "true" ]]; then
            _t4dPromptAskForChar "Target Branch is not protected ${plyellow} $__TARGET_BRANCH ${pstd} Press enter to delete ${plwhite}$__REF_BRANCH${pstd} Branch from repositories, any key to skip deletion" || local BB8_PREFERENCE_BRANCH_DELETION='false'
        fi
        _t4dDebugLog $plog "$_RelatedPRs"
        _t4dPromptLine
        for _RelatedPR in $(echo $_RelatedPRs); do
            _t4dModBb8UtilsGetPRSummary $_RelatedPR ${__TARGET_BRANCH}
        done
        _t4dPromptSquare "Press enter to merge all Pull Requests, Ctrl+C to abort" "$plyellow"
        read -n
        _t4dSrcGitLabUtilsMultiMerge "$_RelatedPRs" "true" "$_Delete" "$_Squash"
    else
        echo "Skipping Merge"
    fi
    git fetch &> $_LogFile
    _t4dDebugLog $plog "git checkout $__TARGET_BRANCH"
    git checkout $__TARGET_BRANCH &> $_LogFile
    _t4dDebugLog $plog "git pull"
    git pull &> $_LogFile
    _t4dDebugLog $plog "gik checkout $__TARGET_BRANCH"
    gik checkout $__TARGET_BRANCH &> $_LogFile
    if [[ "$(_t4dModGikDirtyWorkspace)" != "Working tree clean" ]]; then
        _t4dDebugLog "$pwarning" "Pull Request has been merge BUT can't update .diff and manifest file"
        _t4dPromptSquare "At Least one repository is dirty and need to be cleaned before entering in merge mode" "$plred"
        _t4dDebugLog "$pwarning" "Do You Want to continue ? Enter to proceed, Ctrl+C To Abort"
        read -n
    fi
    _t4dDebugLog $plog "gik all git pull"
    gik all git pull
    _t4dDebugLog $plog "git checkout $__REF_BRANCH"
    git checkout $__REF_BRANCH
    _t4dDebugLog $plog "git pull"
    git pull &> $_LogFile || _t4dDebugLog $plog "Pull Error"
    _t4dDebugLog $plog "git merge origin/$__TARGET_BRANCH --no-edit"
    git merge origin/$__TARGET_BRANCH --no-edit || _t4dDebugLog $plog "Merge Error"
    _t4dDebugLog $plog "git checkout --theirs .diff"
    git checkout --theirs .diff || true
    _t4dDebugLog $plog "git checkout --theirs manifest.xml"
    git checkout --theirs manifest.xml || true
    if [[ -e "${WS_VERSION_FILE}" ]]; then
        _t4dDebugLog $plog "git checkout --theirs ${WS_VERSION_FILE}"
        git checkout --theirs ${WS_VERSION_FILE} || true
        git add ${WS_VERSION_FILE}
    fi
    _t4dDebugLog $plog "git add .diff manifest.xml"
    git add .diff manifest.xml || true
    _t4dDebugLog $plog "git commit --no-edit"

    ( git commit --no-edit && _t4dModGikCommit -folders $WS_MANIFEST_PROJECTS -f ) || _t4dModGikCommit -folders $WS_MANIFEST_PROJECTS -f
    
    _t4dDebugLog $plog "git push"
    if [[ "$(_t4dSrcGitIsMyBranchProtected $(_t4dSrcGitInfoBranch))" != "" ]]; then
        _t4dPromptSquare "Protected Branch, do you want to push manifest & .diff update in this branch ?"
        _t4dDebugLog "$pwarning" "Do You Want to continue ? Enter to proceed, Ctrl+C To Abort"
        read -n
        git push
    else
        git push
    fi

    if [[ "$(_t4dSrcGitUtilsDirtyGit)" != "false" ]]; then
        _t4dDebugLog $plog "Waiting 5 seconds after push in order to merge the global PullRequest" && _t4dPromptEchoTimer 5
        _t4dModBb8UtilsMerge $_ForceGlobalPRMerge $_GlobalPrURL
        _t4dDebugLog $plog "git checkout $__TARGET_BRANCH"
        git checkout $__TARGET_BRANCH
        _t4dDebugLog $plog "git pull"
        git pull
    else
        _t4dDebugLog $pwarning "Skipping Global PullRequest Merge as your workspace does not seem to be clean after all"
    fi

###############################
_t4dDebugInfoEnd "_t4dModBb8UtilsGlobalMerge" "$@"
}


_t4dModBb8UtilsWksProjectManager(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dModBb8UtilsWksProjectManager
#   - Name:
#       _t4dModBb8UtilsWksProjectManager
###
#   - Synopsis:
#       Default Function that can be overrided by project content
###
#   - Example:
#       _t4dModBb8UtilsWksProjectManager WKS SmartUI
###
###### DOCUMENTATION BLOC #####

    local _KEY=$1
    local _REPO=$2
    
    if [[ "$_KEY" != "WKS" ]] && [[ "$_KEY" != "T4D" ]] && [[ "$_KEY" != "wks" ]] && [[ ! -e "$PWD/manifest.xml" ]]; then
        echo "false"
    fi

###############################
}

_t4dModBb8UtilsGetPRSummary(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dModBb8UtilsGetPRSummary" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModBb8UtilsGetPRSummary
#   - Name:
#       _t4dModBb8UtilsGetPRSummary
###
#   - Synopsis:
#       Get a PR summary, (title, merge status and reviewers state)
###
#   - Definition:
#       Internal method, allow dev to show a quick PR summary including title of the Pull Request
#       His Merge status (conflicted or not) and All revewiers States (Approved or not)
#       It will help user to decide if he can merge a PullRequest or not.
#
#       If TargetBranch is Empty, it will get target branch from URL on BitBucket.
#
###
#   - Usage:
#       _t4dModBb8UtilsGetPRSummary <URL> [TargetBranch]
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
    local _URL="$1"
    local _TargetBranch="$2"
    local _OuputjsonFile2="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsGetPRSummary.json"
    local _GetJsonDefaultPath="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsGet.json"
    echo "" > $_OuputjsonFile2
    if [[ "$_TargetBranch" == "" ]]; then
        _t4dModBb8UtilsGet $1 > /dev/null
        _TargetBranch="$(_t4dGetJsonData ${_GetJsonDefaultPath} ".target_branch")"
    fi
    local _PullRequestUuid="$(_t4dGitLabUtilsGetPullRequestUuid $_URL)"
    local _KEY="$(echo $_PullRequestUuid | cut -d "|" -f1)"
    local _REPO="$(echo $_PullRequestUuid | cut -d "|" -f2)"
    local _ID="$(echo $_PullRequestUuid | cut -d "|" -f3)"
    _t4dGitLabProjectMergeRequestAPIList "${_KEY}/${_REPO}" "all" "all" "100" "${_OuputjsonFile2}" "&target_branch=${_TargetBranch}"
    _t4dModBb8ListParse $_OuputjsonFile2 0 true "$_ID"

###############################
_t4dDebugInfoEnd "_t4dFunctionName" "$@"
}

_t4dModBb8UtilsDecline(){
###### _t4dModBb8UtilsDecline
#   This is a global function that will delete a pull request to its destination, to be use carefully
#
#   Usage : 
#       _t4dModBb8UtilsDecline <ID> [PROJECT] [REPO] [delete]
#
##### DOCUMENTATION BLOC #####

    _t4dDebugLog $perror "Paint hasn't dried yet, please come back later"
    return 1

    local _Delete="${4:-false}"

    local _PullRequestUuid="$(_t4dGitLabUtilsGetPullRequestUuid $@)"
    local _KEY="$(echo $_PullRequestUuid | cut -d "|" -f1)"
    local _REPO="$(echo $_PullRequestUuid | cut -d "|" -f2)"
    local _ID="$(echo $_PullRequestUuid | cut -d "|" -f3)"

    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsDecline.json"
    local _OuputjsonFile2="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsDecline2.json"
    local _InputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsDeclineInput.json"
    local _GetJsonDefaultPath="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsGet.json"

    _t4dModBb8UtilsDeclinePullRequestInfoCase "$_InputjsonFile"
    echo "" > $_OuputjsonFile
    _t4dModBb8UtilsGet $@ | tee -a $_OuputjsonFile
    local _RelatedPRs="$(tail -n+1 $_OuputjsonFile | grep '^http')"
    if [[ "$_RelatedPRs" != "" ]]; then
        for _RelatedPR in $(echo $_RelatedPRs); do
            echo "" > $_OuputjsonFile2
            _t4dModBb8UtilsGet $_RelatedPR | tee -a $_OuputjsonFile2
            local __URL=$(tail -n+1 ${_OuputjsonFile2} | grep 'URL' | cut -d ':' -f3 | sed "s|//$_t4dGitLabURL/||g" | sed 's|https\?:||g')
            local __ID=$(tail -n+1 ${_OuputjsonFile2} | grep 'ID' | cut -d ':' -f2 | sed 's| ||g')
            local __KEY="$(echo $__URL | cut -d "/" -f1)"
            local __REPO="$(echo $__URL | cut -d "/" -f3)"
            echo "${__KEY} ${__REPO} ${__ID}"
            echo "Press enter to decline Pull Request, Ctrl+C to abort"
            read -n
            _t4dGitLabMergeRequestAPIEdit "${__KEY}/${__REPO}" "${__ID}" "${_InputjsonFile}" "${_OuputjsonFile2}"
            if [[ "$_Delete" == "true" ]]; then
                echo "" > $_OuputjsonFile
                #HERE to do get url from project
                (_t4dColorDisabled _t4dModBb8UtilsGet $_RelatedPR) >> $_OuputjsonFile
                _t4dGitLabDeleteBranch $_GetJsonDefaultPath "${_OuputjsonFile}"
            fi
        done
    else
        _t4dGitLabMergeRequestAPIEdit "${_KEY}/${_REPO}" "${_ID}" "${_InputjsonFile}" "${_OuputjsonFile2}"
        if [[ "$_Delete" == "true" ]]; then
            echo "" > $_OuputjsonFile
            #HERE TOO
            (_t4dColorDisabled _t4dModBb8UtilsGet $@) >> $_OuputjsonFile
            _t4dGitLabDeleteBranch "$_GetJsonDefaultPath" "${_OuputjsonFile}"
        fi
    fi
    cd $_OLDPWD
}

_t4dModBb8DuplicatePullRequest(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dModBb8DuplicatePullRequest
#   - Name:
#       _t4dModBb8DuplicatePullRequest
###
#   - Synopsis:
#       Allow user to cherry-pick all commits from a pull request to another base branch
###
#   - Definition:
#       Allow user to create a new Pull Request containing all commit for specified PR using git cherry-pick method. 
#       This method will cherry-pick all commit starting from merging base between old base branch and new base branch.
#
###
#   - Available Options:
#       * -url <link>           = Get All information from specified PullRequest URL
#       * -tgt <branch>         = Select new base branch, for example a release branch
#       * -f                    = Apply Cherry-picking
#       * -v                    = See if there is any cherry-picking error without applying modifications
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    _t4dDebugLog $perror "Paint hasn't dried yet, please come back later"
    return 1

    local _t4dErrorCode=1
    local _Url=""
    local _Args=""
    local _Branch=""
    local _NewTargetBranch=""
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8DuplicatePullRequest.json"

    while [[ "$@" != "" ]]; do
        case "$1" in
            -url)
                _Url="$2"
                shift
                shift
                
            ;;
            -tgt)
                _NewTargetBranch="$2"
                shift
                shift
            ;;
            -b)
                _Branch="$2"
                shift
                shift
            ;;
            *)
                _Args="$_Args $1"
                shift
            ;;
        esac
    done

    local _PullRequestUuid="$(_t4dGitLabUtilsGetPullRequestUuid $_Url)"
    _t4dGitLabMergeRequestAPIGet $(echo $_PullRequestUuid | sed 's/|/ /g') "${_OuputjsonFile}"
    local __TARGET_BRANCH="$(_t4dGetJsonData ${_OuputjsonFile} ".target_branch")"
    local __REF_BRANCH="$(_t4dGetJsonData ${_OuputjsonFile} ".source_branch")"
    if [[ "$_Branch" == "" ]]; then
        _Branch="$__REF_BRANCH"
    fi

    _t4dSrcGitUtilsDuplicateBranch -b $_Branch -start-from "$__TARGET_BRANCH" -cb "${_Branch}-backported-to-$(echo $_NewTargetBranch | sed 's|/|-|g')" -target "$_NewTargetBranch" -m "Backport of $_Url" $(echo $_Args)
    if [[ "$(_t4dSrcGitInfoBranchState)" == "local" ]]; then
        _t4dDebugLog $plog "You can now push your branch and create your pull request using :"
        _t4dDebugLog $pinfo "git push"
        _t4dDebugLog $pinfo "bb8 start here -b $_NewTargetBranch -done -rev"
    fi

###############################
}

_t4dModBb8UtilsGenerateDefaultDescriptionFile(){
###### _t4dModBb8UtilsGenerateDefaultDescriptionFile
#   - Description:
#       Function that show you the default description file for PullRequest Creation, this fonction can|NEED to be overloaded in Projects/_main_.env file.
#       Do NOT EDIT THIS CONTENT UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING
#
#   Usage : 
#       _t4dModBb8UtilsGenerateDefaultDescriptionFile > [DESCRIPTION FILE]
#
#   Note :
#       <  >    = Required
#       [  ]    = Optionnal
#
#
##### DOCUMENTATION BLOC #####

cat << EOF
__Tickets__

    + [TICKET ID]


__Content__

[Write Content here]

__Related Pull Requests__

EOF
}

_t4dModBb8UtilsFind(){
###### _t4dModBb8UtilsFind
#
#   Usage : 
#       _t4dModBb8UtilsFind <PROJECT> <REPO> <LIMIT> = Will search for all Pull Request from one repository
#
#   Note :
#       <  >    = Required
#       [  ]    = Optionnal
#
#
##### DOCUMENTATION BLOC #####
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsFind.json"
    local _limit=${3}
    _t4dGitLabProjectMergeRequestAPIList "${1}/${2}" "all" "all" "${_limit}" "${_OuputjsonFile}"
    shift
    shift
    shift
    _t4dModBb8UtilsList ${@} -json ${_OuputjsonFile} -l $_limit
}

_t4dModBb8UtilsNormalizeBranch(){
###### _t4dModBb8UtilsNormalizeBranch
#
#   Definition :
#       Return Normalized branch Name. Used for PullRequest automatic creation
#
#   Usage :
#       _t4dModBb8UtilsNormalizeBranch <branchName>
#
#   Note :
#       <  >    = Required
#       [  ]    = Optionnal
#
#
###### DOCUMENTATION BLOC #####
    local _var="$(echo $1 | sed 's|/|%|')"
    local _res=""
    if [[ "$(echo $_var | grep '%')" != "" ]]; then
        local _branchType="$(echo $_var | cut -d '%' -f1)"
        local _branchName="$(echo $_var | cut -d '%' -f2)"
        case $_branchType in
            feature)
                _res="[Feature]"
              ;;
            bugfix)
                _res="[Bugfix]"
              ;;
            hotfix)
                _res="[Hotfix]"
              ;;
            sprint)
                _res="[Sprint]"
              ;;
            ci*|jenkins*)
                _res="[Jenkins]"
              ;;
            demo*)
                _res="[Demo]"
              ;;
            test)
                _res="[TEST]"
              ;;
            release)
                _res="[${_branchName}] Release :"
              ;;
            *)
                _res="[${_branchType}]"
                (>&2 echo "${plyellow}WARNING 102${pstd} in _t4dGitLabMRNormalizeBranch : Unknown branchType >$_branchType<")
             ;;
         esac
    else
        local _branchName="$(echo $1)"
    fi

    echo "${_res} ${_branchName}" | sed 's|\([A-Z][A-Z]\)-\([0-9]\)|\1#\2|g' | sed 's|-| |g' | sed 's|\([A-Z][A-Z]\)#\([0-9]\)|\1-\2|g' | sed 's|/| -> |g'

}

_t4dModBb8UtilsError(){
    (>&2 echo "${plred}ERROR $1${pstd} in $2 : $3")
}

_t4dModBb8UtilsDeclinePullRequestInfoCase(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dModBb8UtilsDeclinePullRequestInfoCase" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModBb8UtilsDeclinePullRequestInfoCase
#   - Name:
#       _t4dModBb8UtilsDeclinePullRequestInfoCase
###
#   - Synopsis:
#       SubFunction of _t4dModBb8UtilsDecline
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

cat > $1 << EOF
    {
        "state_event": "close"
    }
EOF

###############################
_t4dDebugInfoEnd "_t4dModBb8UtilsDeclinePullRequestInfoCase" "$@"
}
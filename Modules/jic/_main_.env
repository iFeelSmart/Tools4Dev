#### MODULE HEADER BLOC
#
#   Name:
#       jic
###
#   Synopsis:
#       Jira In Console
###
#   Description :
#       Module that will allow user to interact with Jira instance
#       from command line to avoid webpage overhead
#       and pull data for release notes
###
#   Examples:
#       jic list
###
#   Prefix:
#       _t4dModJic
###
#   Error Code:
#       8XX
###
#   Supported Platform:
#       * OSX ( 10.15 or higher )
#       * Fedora ( 27 or higher )
###
#   Author(s):
#       Guillaume STIENON
#
###
#### HEADER BLOC ####

source $T4D_MODULES_PATH/jic/jic-output.env
source $T4D_MODULES_PATH/jic/jic-parser.env
source $T4D_MODULES_PATH/jic/jic-get.env
source $T4D_MODULES_PATH/jic/jic-utils.env
source $T4D_MODULES_PATH/jic/jic-nope.env
T4D_JIC_DEFAULT_OUTPUT_FILE="$T4D_PROJECT_LOG_PATH/jic/_t4dModJicGetTicketInfo.json"

jic(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### jic
#   - Name:
#       jic
###
#   - Synopsis:
#       Jira In Console
###
#   - Definition:
#       Interact with Jira from command line and avoid webpages
###
#   - Usage:
#       * jic <option> [arguments]
#           Will execute jic command with all arguments
#       * jic help <option>
#           Show specific option's documentation
###
#   - Options:
#
###
#   - Example:
#       * jic pp = Display personal tickets
###
#   - Note :
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local CHPWD=1
    local _t4dJicErrorCode=800

    mkdir -p $T4D_PROJECT_LOG_PATH/jic

    if [[ $1 != "help" ]]; then
        _t4dModJicLogo main
        _t4dModJicSafetyCheck || return $_t4dJicErrorCode
    fi

    (set -e
        case $1 in
            pp)                     _t4dModJicPersonalPrompt            ${@:2}    ;;
            sprint)                 _t4dModJicGetSprint                 ${@:2}    ;;
            search)                 _t4dModJicSearch                    ${@:2}    ;;
            info)                   _t4dModJicInfo                      ${@:2}    ;;
            release)                _t4dModJicGetTicketsRelease         ${@:2}    ;;
            comment)                _t4dModJicComment                   ${@:2}    ;;
            help|'')                _jicDoc             ${@:2}    ;;
            *)
                _t4dDebugLog $perror "Empty or Unkown argument < $1 >"
                return $_t4dJicErrorCode
            ;;
        esac
    )
    
    #ALL COMMAND ARE LAUNCHED IN A SUBSHELL
    #This is here to stop command at the first untracked error
    #We Also need to check the subshell output in order to identified which kind of error is sent
    if [[ "$?" == "0" ]]; then
        _t4dJicErrorCode="0"
    else
        _t4dJicErrorCode="801"
    fi

    return $_t4dJicErrorCode
###############################
}

#AUTO COMPLETION
_jic(){
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    option="${COMP_WORDS[1]}"
    if [[ ${prev} == "jic" ]] || [[ ${prev} == "help" ]] ; then
        opts="$(cat $T4D_INDEX_COMPLETION_PATH/jic)"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ -e $T4D_INDEX_COMPLETION_PATH/jic-module/${option} ]]; then
        opts="$(cat $T4D_INDEX_COMPLETION_PATH/jic-module/${option})"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}

_jicDoc(){
###### _jicDoc
#   - Name:
#       _jicDoc
###
#   - Synopsis:
#       Show Project Documentation
###
#   - Definition:
#       Parse project Header to show user a ready to read shell documentation
###
###### DOCUMENTATION BLOC ##### 
    local _Internal="${2:-shell}"
    local _MainContent="$(_t4dDocGetFunctionContent jic)"
    if [[ "$_Internal" == "-no-shell" ]]; then
        echo $_MainContent
    elif [[ $# -eq 1 ]] && [[ "$(_t4dDocGetOptionsList "$_MainContent" | grep "^$1")" != "" ]]; then
        local _OptionHiddenCallName="$(_t4dDocGetOptionsHiddenCall "$_MainContent" $1)"
        t4dHelp $_OptionHiddenCallName | sed "s|$_OptionHiddenCallName|jic $1|g"
    elif [[ "$1" == "" ]] || [[ "$1" == "jic" ]]; then
        _t4dModJicLogo doc
        t4dHelp -no-logo jic
    else
        t4dHelp $@
    fi
    echo ""
    echo ""
    echo ""
}

_t4dModJicLogo(){
#   Show Great Ascii IFS logo art ... maybe
#   Usage : _wksLogo

    local _color=${1:-$plcyan}
    l1="      #####    #######    #####  "
    l2="        ##       ##     ##    ## "
    l3="##     ##       ##    ##         "
    l4="##    ##       ##      ##    ##  "
    l5="  ####     ########     #####    "
    if [[ "$_T4D_QUIET_MODE" == "true" ]]; then
        #DoNothing
    elif [[ "$1" == "doc" ]]; then
        local _Content="${l1}%${l2}%${l3}%${l4}%${l5}"
        _t4dDocWks ${_Content} ${pired}
    elif [[ "$1" == "main" ]]; then
        local center="$(_t4dPromptCenterSpace '55' | sed 's|-||g')"
        echo "${center}${plcyan}"
        echo "${center}$plyellow      #####    #######    #####  ${pstd}"
        echo "${center}$plyellow        ##       ##     ##    ## ${pstd}"
        echo "${center}$plyellow##     ##       ##    ##         ${pstd}"
        echo "${center}$plyellow##    ##       ##      ##    ##  ${pstd}"
        echo "${center}$plyellow  ####     ########     #####    ${pstd}"
        echo "$pstd"
    else
        local center="$(_t4dPromptCenterSpace "${#l5}" | sed 's|-||g')"
        echo "${center}${_color} $l1 ${pstd}"
        echo "${center}${_color} $l2 ${pstd}"
        echo "${center}${_color} $l3 ${pstd}"
        echo "${center}${_color} $l4 ${pstd}"
        echo "${center}${_color} $l5 ${pstd}"
        echo ""
    fi
}
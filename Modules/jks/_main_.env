#### MODULE HEADER BLOC
#
#   - Name:
#       jks
###
#   - Synopsis:
#       Jenkins Command Line Tools
###
#   - Description:
#       Module that will allow user to interact with Jenkins Directly from command line
###
#   - Examples:
#       jks last    
###
#   - Prefix:
#       _t4dModJks
###
#   - Error Code:
#       360
###
#  -  Supported Platform:
#       * OSX ( 10.12.6 or higher )
#       * Fedora ( 25 or higher )
###
#  -  Author(s):
#       Quentin NIO
#
###
#### HEADER BLOC ####

source $T4D_MODULES_PATH/jks/jks-info.env
source $T4D_MODULES_PATH/jks/jks-utils.env



#Use this variable to define custom channel token

jks(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "jks" "$#" "$@"
###### jks
#   - Name:
#       jks
###
#   - Synopsis:
#       Jenkins API Command Line Tools
###
#   - Definition:
#       Modules that allow user to interract with Jenkins as a Command Line Tools. 
#       It will parse html Jenkins output into readable content from your terminal. 
#
#       * Explore Jenkins Projects as if you were on his web interface with get option.
#           _Please see jks help get for more informations._
#
#       * Launch Build on jenkins with a simple command %jks start% .
#           Depending on your project will start a new build of your current workspace/branch
#
#       * Get Last Build on jenkins using current workspace/branch with jks last
#
#       * IMPORTANT : This command use JENKINS_USER_AND_PASSWORD variable.
#           To define it you have to go to $JENKINS_WEB_URL
#               1. log in with your google account
#               2. Click on the top right corner %YourName% then Configure
#               3. Add Token or show legacy token
#               4. copy and paste its content into $Tools4Dev_PATH/.$USER.env using following syntax
#                    JENKINS_USER_AND_PASSWORD="{GoogleEmailAddress}:{YourToken}"
#
#       * Some project can also send build notification to personnal slack channel. 
#           To define it you will have to create your personnal token :
#               1. Go on %https://$WS_SLACK_ADDRESS/apps/A0F7VRFKN-jenkins-ci?next_id=0% 
#               2. Click on Add Configuration (if you do not have all rights you will have to request access)
#               3. Choose a channel (privately to you)
#               4. copy and paste Integration Token value into $Tools4Dev_PATH/.$USER.env using following syntax
#                   %WS_CUSTOM_CHANNEL_NOTIFICATION="{YourToken}"% .
#
#
###
#   - Usage:
#       * jks <option>  [arguments]
#           Will execute jks command with all arguments
#       * jks help <option>       
#           Show specific option's documentation 
#
###
#   - Options:
#
###
#   - Example:
#       * jks last                       = Get last build of current Project & Branch
#       * jks get                        = Get Jenkins Main Page and list available projects
#       * jks get Feature                = Get Jenkins Feature main page and list available branches
#       * jks get Prod master            = Get Jenkins branch master of SmartUI-Prod project and list available builds
#       * jks get Prod master 1          = Get Jenkins Build Status
#       * jks get Prod master last       = Get Jenkins Last Build Status
#       * jks get Prod master last All   = Download all avaiable artefacts
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
#
###
###### DOCUMENTATION BLOC #####
#
########## CODE BLOC ##########


    local CHPWD=1
    local _t4dJksError=360

    mkdir -p $T4D_PROJECT_LOG_PATH/jenkins

    if [[ $1 != "help" ]]; then
        _t4dModJksLogo main
        local _OutPutHtmlFile="$T4D_PROJECT_LOG_PATH/jenkins/jks.html"
        _t4dSrcJenkinsSafetyCheck || return 360
    fi

    (set -e
        case $1 in
            get)                _t4dModJksInfoMain ${@:2}               ;;
            start)              _t4dModJksUtilsStart ${@:2}             ;;
            startWithParams)    _t4dModJksUtilsStartWithParams ${@:2}   ;;
            last)               _t4dModJksUtilsGetLastPage ${@:2}       ;;
            stop|abort)         _t4dModJksUtilsStop ${@:2}              ;;
            restart)            _t4dModJksUtilsReStart $2               ;;
            monitor)            _t4dSrcJenkinsPageBuildMonitor ${@:2}   ;;
            help)               _jksDoc ${@:2}                          ;;
            edit)               _t4dModJksUtilsEdit                     ;;
            sync)               _t4dModJksUtilsSync ${@:2}              ;;
            *)
                _t4dDebugLog "$perror" "jks : Empty or Unknown argument < $1 >"
                return 360
            ;;
        esac

    )
    #ALL COMMAND ARE LAUNCHED IN A SUBSHELL
    #This is here to stop command at the first untracked error
    #We Also need to check the subshell output in order to identified which kind of error is sent
    if [[ "$?" == "0" ]]; then
        _t4dJksError="0"
    else
       _t4dJksError="360"
    fi

    return $_t4dJksError

###############################
_t4dDebugInfoEnd "jks" "$@"
}

#AUTO COMPLETION
_jks(){
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    option="${COMP_WORDS[1]}"
    if [[ ${prev} == "jks" ]] || [[ ${prev} == "help" ]] ; then
        opts="$(cat $T4D_INDEX_COMPLETION_PATH/jks)"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ ${prev} == "get" ]] ; then
        opts="$(_t4dSrcJenkinsPageMainGetHtmlPage --no-shell)"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ "${prev}" == "-Filter" ]] || [[ "${prev}" == "-F" ]] ; then
        opts=""
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ "${prev}" == "-Params" ]] || [[ "${prev}" == "-P" ]]; then
        opts=""
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ "$option" == "startWithParams" ]]; then
        opts="$(_t4dDocGetSectionContent "$(_t4dDocGetHeader -function _t4dModJksUtilsStartWithParams)" "Available Options" | grep -Eo '\* .*' | cut -d ' ' -f2 | cut -d '|' -f1 | tr '\n' ' ')"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}

_jksDoc(){
###### _gikDoc
#   - Name:
#       _gikDoc
###
#   - Synopsis:
#       Show Project Documentation
###
#   - Definition:
#       Parse project Header to show user a ready to read shell documentation
###
###### DOCUMENTATION BLOC ##### 
    local _Internal="${2:-shell}"
    local _MainContent="$(_t4dDocGetFunctionContent jks)"
    if [[ "$_Internal" == "-no-shell" ]]; then
        echo $_MainContent
    elif [[ $# -eq 1 ]] && [[ "$(_t4dDocGetOptionsList "$_MainContent" | grep "^$1")" != "" ]]; then
        local _OptionHiddenCallName="$(_t4dDocGetOptionsHiddenCall "$_MainContent" $1)"
        t4dHelp $_OptionHiddenCallName | sed "s|$_OptionHiddenCallName|jks $1|g"
    elif [[ "$1" == "" ]] || [[ "$1" == "jks" ]]; then
        _t4dModJksLogo doc
        t4dHelp -no-logo jks
    else
        t4dHelp $@
    fi
    echo ""
    echo ""
    echo ""
}

_jksTips(){
    _t4dPromptSquare "TIPS : Jks Commands" $plblue
        for _Item in $(echo $1); do
            local _FunctionDoc="$(_jksDoc $_Item -no-shell)"
            if [[ "$_FunctionDoc" != "" ]]; then
                local _Synopsis="$(_t4dDocGetSectionContent "$_FunctionDoc" "Synopsis" 2> /dev/null | sed 's|^       ||g' | sed 's| `|%%1|g' | sed 's|` |%%2|g' | sed "s|%%1| \\${plblue}|g" | sed "s|%%2|\\${pstd} |g")"
            else
                local _Synopsis=""
            fi
            _t4dPromptInfo "        ${plpurple}jks ${_Item}${pstd}" "${_Synopsis} " 40 "->"
        done
}

_t4dModJksLogo(){
#   Show Great Ascii IFS logo art :p
#   Usage : _wksLogo

    local _color=${1:-$plcyan}
    l1="      #####    ##   ##    #####  "
    l2="        ##    ##  ##     ##   ## "
    l3="##     ##    #####        ##     "
    l4="##    ##    ##   ##   ##    ##   "
    l5="  ####     ##     ##   #####     "
    if [[ "$_T4D_QUIET_MODE" == "true" ]]; then
        #DoNothing
    elif [[ "$1" == "doc" ]]; then
        local _Content="${l1}%${l2}%${l3}%${l4}%${l5}"
        _t4dDocWks ${_Content} ${pired}
    elif [[ "$1" == "main" ]]; then
        local center="$(_t4dPromptCenterSpace '58' | sed 's|-||g')"
        echo "${center}${plcyan}##########################################################"
        echo "${center}######################       _    _ ######################"
        echo "${center}############### _           | |  (_)       ###############"
        echo "${center}########       | | ___ _ __ | | ___ _ __  ___     ########"
        echo "${center}#####      _   | |/ _ \ '_ \| |/ / | '_ \/ __|       #####"
        echo "${center}#####     | |__| |  __/ | | |   <| | | | \__ \       #####"
        echo "${center}#####      \____/ \___|_| |_|_|\_\_|_| |_|___/       #####"
        _t4dPromptEmptyCenter 24
        _t4dPromptEmptyCenter 24
        _t4dPromptEmptyCenter 24
        echo "$pstd"
    else
        local center="$(_t4dPromptCenterSpace "${#l5}" | sed 's|-||g')"
        echo "${center}${_color} $l1 ${pstd}"
        echo "${center}${_color} $l2 ${pstd}"
        echo "${center}${_color} $l3 ${pstd}"
        echo "${center}${_color} $l4 ${pstd}"
        echo "${center}${_color} $l5 ${pstd}"
        echo ""
    fi
}





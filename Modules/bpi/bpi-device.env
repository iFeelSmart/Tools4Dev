_t4dModBpiDevice(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dModBpiDevice
#   - Name:
#       _t4dModBpiDevice
###
#   - Synopsis:
#       Manage devices inventory
###
#   - Definition:
#       BPI Device management interface
#       Handles device creation, edition and removal
#
###
#   - Available Options:
#       * add               = add device inventory content
#       * update            = update device inventory content
#       * remove            = remove device from inventory
#       * <device-UUID>     = load device in console to use with bpi deploy commands
#
###
#   - Usage:
#       * bpi device <device UUID>
#           Will load corresponding device UUID if it exists
#       * bpi help device <option>
#           Show specific option's documentation
#
###
#   - Example:
#       * bpi device            = display existing devices in inventory
#       * bpi device 200        = load device 200 from inventory
#       * bpi device add -uuid 200 -type dev.board.stb -ip "192.168.1.1" -mac-wifi "EE:EE:EE:EE:EE:EE" = add device to inventory
#       * bpi info 200          = display device 200 info
#       * bpi device remove 200 = remove device 200 from inventory
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local CHPWD=1
    local _t4dBpiDevicesErrorCode=100

    if [[ $1 != "help" ]]; then
        _t4dModBpiSafetyCheckDevices || return $_t4dBpiDevicesErrorCode
    fi

    case $1 in
        add)        _t4dModBpiDeviceAdd     ${@:2}  ;;
        edit)       _t4dModBpiDeviceUpdate  ${@:2}  ;;
        remove)     _t4dModBpiDeviceDelete  ${@:2}  ;;
        *)          _t4dModBpiDeviceSelect  ${@}    ;;
    esac

###############################
}

_t4dModBpiSafetyCheckDevices(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dModBpiSafetyCheckDevices
#   - Name:
#       _t4dModBpiSafetyCheckDevices
###
#   - Synopsis:
#       Doctor for bpi device
###
#   - Definition:
#       Checks :
#       * inventory folder presence
#       * inventory manifest existence
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    if [[ "$WS_INVENTORY_ROOT_PATH" == "" ]]; then
        _t4dCheckFailed "WS_INVENTORY_ROOT_PATH is not set"
        _t4dCheckInfo "Please specify an inventory folder and retry"
        return 200
    elif [[ ! -d $WS_INVENTORY_ROOT_PATH ]]; then
        _t4dCheckFailed "${WS_INVENTORY_ROOT_PATH} is not a folder"
        _t4dCheckInfo "Please specify an inventory folder and retry"
        return 204
    elif [[ ! -e $WS_INVENTORY_CONFIG_FILE ]]; then
        _t4dCheckFailed "$WS_INVENTORY_CONFIG_FILE does not exist"
        _t4dCheckInfo "Please add an hardware manifest file to your inventory folder and retry"
        return 208
    fi

###############################
}

_t4dModBpiDeviceSelect(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dModBpiDeviceSelect
#   - Name:
#       _t4dModBpiDeviceSelect
###
#   - Synopsis:
#       select a device, if none specified display available devices in inventory
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _t4dErrorCode=101
    local _Name="${1}"
    local _Manifest="$WS_INVENTORY_CONFIG_FILE"

    if [[ "$_Name" == "" ]]; then
        _t4dPromptSquare "Available devices" $plblue
        _t4dModBpiDeviceListInventory
        return 0
    fi

    local _Filepath=$(_t4dSrcInventoryUtilsSearch $_Name)
    
    if [[ ! -e $_Filepath ]]; then
        return $_t4dErrorCode
        #search function returns log error
    fi

    _t4dSrcInventoryUtilsCreateCacheFile "$_Manifest" "$_Filepath"

    _t4dPromptSquare "Device $(basename $_Filepath) loaded" "$plred"

    _t4dModBpiDeviceDisplay $_Manifest

###############################
}

_t4dModBpiDeviceAdd(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dModBpiDeviceAdd
#   - Name:
#       _t4dModBpiDeviceAdd
###
#   - Synopsis:
#       create device env file with given data
###
#   - Available Options :
#       * -force|-f = skip confirmation messages
#       see inventory manifest for possible values
###
#   - Example :
#       bpi device add -uuid {XXX} -type {dev.board.stb} -ip {"192.168.1.1"} -mac-wifi {"EE:EE:EE:EE:EE:EE"}
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _t4dErrorCode=101
    local _Manifest="$WS_INVENTORY_CONFIG_FILE"
    local _Prefix="$(_t4dManifestXmlGetData manifest name hardware prefix $_Manifest)"
    local _Values=""
    local _Force="false"
    local _IdName="$(_t4dSrcInventoryManifestIdName $_Manifest | sed 's|^'${_Prefix}'_||g' | tr '[:upper:]' '[:lower:]')"
    while [[ "$@" != "" ]]; do
        case "$1" in
            -force|-f)
                _Force="true"
                shift
            ;;
            -$_IdName)
                local _Data="$2"
                local _Exist="$(_t4dSrcInventoryUtilsSearch $_Data &> /dev/null)"

                if [[ -e $_Exist ]]; then
                    _t4dDebugLog $perror "This $_IdName already exists, please use another"
                    return $_t4dErrorCode
                fi

                local _Name="${_Prefix}$(echo $1 | tr '-' '_' | tr '[:lower:]' '[:upper:]')"

                _Values="${_Values} -D $_Name=$_Data"
                shift
            ;;
            -*)
                local _Name="${_Prefix}$(echo $1 | tr '-' '_' | tr '[:lower:]' '[:upper:]')"
                local _Data="$2"

                _Values="${_Values} -D $_Name=$_Data"
                shift
            ;;
            *)
                _t4dDebugLog $perror "Empty or Unknown argument < $1 >"
                return $_t4dErrorCode
            ;;
        esac
        shift
    done

    _t4dDebugLog "$pinfo" "Values : ${_Values}"

    if [[ "${_Force}" != "true" ]]; then
        _t4dSrcInventoryFileEditOrCreate -M $_Manifest $( echo $_Values )
        _t4dPromptAskForChar "Press Enter to save device, Ctrl+C to Abort"
    fi

    _t4dSrcInventoryFileEditOrCreate -M $_Manifest $( echo $_Values ) -f && _t4dCheckSucceeded "Device saved"

###############################
}

_t4dModBpiDeviceUpdate(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dModBpiDeviceUpdate
#   - Name:
#       _t4dModBpiDeviceUpdate
###
#   - Synopsis:
#       update device env file with given data
###
#   - Available Options :
#       * -device = file to edit
#       * -force|-f = skip confirmation messages
#       see inventory manifest for possible values
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _t4dErrorCode=101
    local _Manifest="$WS_INVENTORY_CONFIG_FILE"
    local _Prefix="$(_t4dManifestXmlGetData manifest name hardware prefix $_Manifest)"
    local _Values=""
    local _Force="false"
    local _Filepath=""
    local _BaseArgs="$@"
    while [[ "$@" != "" ]]; do
        case "$1" in
            -device)
                _Filepath="$(_t4dSrcInventoryUtilsSearch $2)"
                shift
            ;;
            -force|-f)
                _Force="true"
                shift
            ;;
            -*)
                local _Name="${_Prefix}$(echo $1 | tr '-' '_' | tr '[:lower:]' '[:upper:]')"
                local _Data="$2"
                _Values="${_Values} -D $_Name=$_Data"
                shift
            ;;
            *)
                _t4dDebugLog $perror "Empty or Unknown argument < $1 >"
                return $_t4dErrorCode
            ;;
        esac
        shift
    done

    if [[ -e $_Filepath ]]; then
        _Values="${_Values} -F $_Filepath"
        _t4dDebugLog "$pinfo" "Values : ${_Values}"

        if [[ "${_Force}" != "true" ]]; then
            _t4dSrcInventoryFileEditOrCreate -M $_Manifest $( echo $_Values )

            _t4dPromptAskForChar "Press Enter to save device, Ctrl+C to Abort"
        fi

        _t4dSrcInventoryFileEditOrCreate -M $_Manifest $( echo $_Values ) -f && _t4dCheckSucceeded "Device saved"
    else
        _t4dDebugLog "$perror" "Source device doesn't exist, use add option to create a new device"
        return $_t4dErrorCode
    fi

###############################
}

_t4dModBpiDeviceDelete(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dModBpiDeviceDelete
#   - Name:
#       _t4dModBpiDeviceDelete
###
#   - Synopsis:
#       Remove inventory file given in parameter
###
#   - Available Options:
#       * -force|-f                 = Apply modifications
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _t4dErrorCode=101
    local _Name
    local _ApplyChanges="false"

    while [[ "$@" != "" ]]; do
        case "$1" in
            -force|-f)
                _ApplyChanges="true"
            ;;
            *)
                _Name="$1"
            ;;
        esac
        shift
    done

    if [[ "$_Name" == "" ]]; then _t4dDebugLog "$perror" "${_t4dErrorCode}-A -> Device name is mandatory";    return $_t4dErrorCode; fi

    local _Filepath=$(_t4dSrcInventoryUtilsSearch $_Name)
    if [[ ! -e $_Filepath ]]; then
        return $_t4dErrorCode
        #search function returns log error
    fi

    if [[ "$_ApplyChanges" != "true" ]]; then
        _t4dSrcInventoryFileDelete -F $_Filepath || return $_t4dErrorCode 
        _t4dPromptSquare "This was a dry run, Specify -f option to delete device" "$plpurple"
    else
        _t4dSrcInventoryFileDelete -F $_Filepath -f && _t4dCheckSucceeded "Device removed"
    fi

###############################
}

_t4dModBpiDeviceListInventory(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dModBpiDeviceListInventory
#   - Name:
#       _t4dModBpiDeviceListInventory
###
#   - Synopsis:
#       Display inventory devices list
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _Manifest="$WS_INVENTORY_CONFIG_FILE"
    local _Options="$(_t4dManifestXmlGetMarker option name $_Manifest)"

    for _Option in $(echo $_Options); do
        local _PossibleSubFolders="$(_t4dManifestXmlGetData option name $_Option options $_Manifest \
                                    | tr '|' '\n')"
        for _Folder in $(echo $_PossibleSubFolders); do
            if [[ -d $WS_INVENTORY_ROOT_PATH/$_Folder ]]; then
                _t4dPromptSquare "$_Folder" "$plred"
                echo "$(find "$WS_INVENTORY_ROOT_PATH/$_Folder" \
                    | grep '.env' \
                    | rev | cut -d '/' -f1 | rev \
                    | sort -n)" | sed 's| ||g' | sed 's|.env||g' | sed 's|^|    |g'
            fi
        done
    done

###############################
}

_t4dModBpiDeviceInfo(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dModBpiDeviceInfo
#   - Name:
#       _t4dModBpiDeviceInfo
###
#   - Synopsis:
#       Display info from given inventory file or currently cached data
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    
    local _t4dErrorCode=101
    local _Name="${1}"
    local _Manifest="$WS_INVENTORY_CONFIG_FILE"
    local _Prefix="$(_t4dManifestXmlGetData manifest name hardware prefix $_Manifest)"

    if [[ "$_Name" == "" ]] && [[ -e $WS_ROOT/.t4d/inventory/cache.env ]]; then
        source "$WS_ROOT/.t4d/inventory/cache.env"
        _t4dPromptSquare "${CACHE_NAME} device" "$plgreen"
    elif [[ "$_Name" != "" ]]; then
        local _Filepath=$(_t4dSrcInventoryUtilsSearch $_Name)
        if [[ ! -e $_Filepath ]]; then
            return $_t4dErrorCode
            #search function returns log error
        fi

        _t4dPromptSquare "Device $(basename $_Filepath) info" "$plcyan"
        source $_Filepath
    else
        _t4dDebugLog "$perror" "No device selected and no device given in parameter, aborting"
        return $_t4dErrorCode
    fi

    _t4dModBpiDeviceDisplay $_Manifest

###############################
}

_t4dModBpiDeviceDisplay(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dModBpiDeviceDisplay
#   - Name:
#       _t4dModBpiDeviceDisplay
###
#   - Synopsis:
#       Inventory loop display from manifest, displays data from current env
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _t4dErrorCode=1
    local _Manifest="${1}"

    if [[ "$_Manifest" == "" ]]; then
        _t4dDebugLog "$perror" "No manifest given, aborting display"
    fi

    local _Elements="$(_t4dManifestXmlGetMarker element name $_Manifest)"
    local _Lists="$(_t4dManifestXmlGetMarker list name $_Manifest)"
    local _Options="$(_t4dManifestXmlGetMarker option name $_Manifest)"

    for _Elem in $(echo $_Elements); do
        local _Data=$(eval "echo \$$_Elem")
        _t4dPromptInfo "    $_Elem" "$_Data" 35 ":" "$plyellow"
    done

    for _List in $(echo $_Lists); do
        local _Elements="$(_t4dManifestXmlGetData list name $_List elements $_Manifest | tr ',' '\n' | sed "s|^|${_List}_|g" | tr '[a-z]' '[A-Z]' | tr '\n' ' ')"
        for _Elem in $(echo $_Elements); do
            local _Data=$(eval "echo \$$_Elem")
            _t4dPromptInfo "    $_Elem" "$_Data" 35 ":" "$plyellow"
        done
    done

    for _Option in $(echo $_Options); do
        local _Data=$(eval "echo \$$_Option")
        _t4dPromptInfo "    $_Option" "$_Data" 35 ":" "$plyellow"
    done

###############################
}
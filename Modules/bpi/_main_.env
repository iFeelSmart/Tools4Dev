#### MODULE HEADER BLOC
#
#   - Name:
#       bpi
###
#   - Synopsis:
#       Build Puller & Injector
###
#   - Description:
#       Module that will allow user to interact with S3 builds,
#       manage devices and deploy on them from command line
###
#   - Prefix:
#       _t4dModBpi
###
#   - Error Code:
#       463
###
#  -  Supported Platform:
#       * OSX ( 10.15 or higher )
#       * Fedora ( 27 or higher )
###
#  -  Author(s):
#       Guillaume STIENON
#
###
#### HEADER BLOC ####

source $T4D_MODULES_PATH/bpi/bpi-utils.env
source $T4D_MODULES_PATH/bpi/bpi-s3.env
source $T4D_MODULES_PATH/bpi/bpi-device.env
T4D_BPI_LIST_INDEX_FILE="$T4D_PROJECT_LOG_PATH/bpi/_OutPutBpiListFile.index"
T4D_BPI_BUCKETS_INDEX_FILE="$T4D_PROJECT_LOG_PATH/bpi/_OutPutBpiBucketsFile.index"
T4D_BPI_BUCKETS_INDEX_FOLDER="$T4D_PROJECT_LOG_PATH/bpi/autocomp"
mkdir -p $T4D_BPI_BUCKETS_INDEX_FOLDER
T4D_BPI_IMPORT_INDEX_FILE="$T4D_PROJECT_LOG_PATH/bpi/_OutPutBpiImportFile.index"

bpi(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### bpi
#   - Name:
#       bpi
###
#   - Synopsis:
#       Interact with s3 contents and builds to simplify deployment of CI generated artifacts
###
#   - Definition:
#       Bpi (Build Puller & Injector) is a command line tools that allow user to interact with 
#
#       1. Devices 
#           By loading their config files stored in a global inventory manager (smartphone, iphone etc. ).
#           It allow any user to save and share a configuration like his IP, his MacAddress, his Name or even his project's
#
#           - For more information:
#               >>>
#                   bpi help device add
#                   bpi help device select
#               >>>
#
#       2. Binaries on AWS S3
#           All archives built might be stored in a global server called S3. 
#           You can use bpi s3 to explore every single folders to find the right build that you need to test and import/pull it directly to your workspace
#           
#           - For more information:
#               >>>
#                   bpi help s3
#               >>>
#
#       3. Install local bin to your devices
#           Using bpi install you will be able to connect to previous selected device ( by using bpi device {ID} ) to install any available AND compatible binaries downloaded ( using bpi s3 )
#            
#           - For more information:
#               >>>
#                   bpi help install
#               >>>
#
#
#       4. Base Workflow 
#           Using default workflow behavior you might want to first add you device to the current inventory, select it and load his configuration file. 
#           Then you will be able to explore S3 Server to find any compatible archive, pull it (download + extract) then install it on your device. 
#
#           - Device: 
#               <<<
#                   Add device                       = bpi device add -uuid uuid ...         
#                   Select device                    = bpi device device-id
#               >>>
#           - Pull: 
#               <<<
#                   Search build on S3               = bpi s3 {S3FolderUrl}
#                   Pull build from S3               = bpi s3 {FileS3Url} -pull -extract 
#               >>>
#           - Install:
#               <<<
#                   Select device                    = bpi device device-id
#                   Install build on device          = bpi install folder
#               >>>
#       
#
###
#   - Usage:
#       * bpi <option> [arguments]
#           Will execute bpi command with all arguments
#       * bpi help <option>
#           Show specific option's documentation
#
###
#   - Options:
#
###
#   - Example:
#       * bpi s3                                = ls into s3://
#       * bpi s3 <{s3 path}> -pull -extract     = pull and extract given file
#       * bpi device                            = display existing devices in inventory
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local CHPWD=1
    local _t4dBpiErrorCode=463

    mkdir -p $T4D_PROJECT_LOG_PATH/bpi

    if [[ $1 != "help" ]]; then
        _t4dModBpiLogo main
    fi

    (set -e
        case $1 in
            device)         _t4dModBpiDevice ${@:2}         ;;
            select)         _t4dModBpiDeviceSelect ${@:2}   ;;
            s3)             _t4dModBpiS3 ${@:2}             ;;
            install)        _t4dModBpiInstall  ${@:2}       ;;
            info)           _t4dModBpiInfo  ${@:2}          ;;
            help|'')        _bpiDoc  ${@:2}                 ;;
            *)
                _t4dDebugLog $perror "Empty or Unknown argument < $1 >"
                return $_t4dBpiErrorCode
            ;;
        esac
    )
    
    #ALL COMMAND ARE LAUNCHED IN A SUBSHELL
    #This is here to stop command at the first untracked error
    #We Also need to check the subshell output in order to identified which kind of error is sent
    if [[ "$?" == "0" ]]; then
        _t4dBpiErrorCode="0"
    else
        _t4dBpiErrorCode="463"
    fi

    return $_t4dBpiErrorCode
###############################
}

#AUTO COMPLETION
_bpi(){
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    option="${COMP_WORDS[1]}"
    if [[ ${prev} == "bpi" ]] || [[ ${prev} == "help" ]] ; then
        opts="$(cat $T4D_INDEX_COMPLETION_PATH/bpi)"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ ${option} == "s3" ]]; then
            if [[ "$prev" == "s3" ]]; then
                if [[ -e $T4D_BPI_LIST_INDEX_FILE ]] && [[ "$(head -1 $T4D_BPI_LIST_INDEX_FILE | sed 's|^%--->||g')" == "" ]] ; then
                    opts="$(cat $T4D_BPI_LIST_INDEX_FILE | grep -v '^%--->' | sed 's|/$||g' | tr '\n' ' ')"
                else
                    opts="$(ls $T4D_BPI_BUCKETS_INDEX_FOLDER)"
                fi
            elif [[ "${cur:0:1}" == "-" ]] && [[ -e $T4D_INDEX_COMPLETION_PATH/bpi-module/${option} ]]; then
                opts="$(cat $T4D_INDEX_COMPLETION_PATH/bpi-module/${option})"
            else
                if [[ -e $T4D_BPI_LIST_INDEX_FILE ]]; then
                    local _prefix="$(head -1 $T4D_BPI_LIST_INDEX_FILE | sed 's|^%--->||g')"
                    local _path="$(echo ${COMP_LINE} | sed 's|^bpi ||g' | sed "s|^$option ||g" | sed 's| |/|g' | sed "s|${cur}$||g")"
                    if [[ "${_path}" == "$_prefix" ]] || [[ "${_path}" == "${_prefix}/" ]]; then
                        opts="$(cat $T4D_BPI_LIST_INDEX_FILE | grep -v '^%--->' | sed 's|/$||g' | tr '\n' ' ' )"
                    else
                        
                        if [[ -d "$T4D_BPI_BUCKETS_INDEX_FOLDER/$_path" ]]; then
                            opts="$(ls $T4D_BPI_BUCKETS_INDEX_FOLDER/$_path)"
                        fi
                    fi
                fi
                
            fi
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
    elif [[ -e $T4D_INDEX_COMPLETION_PATH/bpi-module/${option} ]] && [[ "${prev}" == "${option}" ]]; then
        opts="$(cat $T4D_INDEX_COMPLETION_PATH/bpi-module/${option})"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ ${option} == "list" ]] && [[ -e $T4D_BPI_LIST_INDEX_FILE ]]; then
        local _prefix="$(head -1 $T4D_BPI_LIST_INDEX_FILE | sed 's|^%--->||g')"
        if [[ "${prev}" == "${option}" ]] && ; then
            opts="$(cat $T4D_BPI_LIST_INDEX_FILE | grep -v '^%--->' | sed "s|^|$_prefix|g" )"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        fi
        return 0
    elif [[ -e $T4D_INDEX_COMPLETION_PATH/bpi-module/${option} ]] && [[ "${prev}" == "${option}" ]]; then
        opts="$(cat $T4D_INDEX_COMPLETION_PATH/bpi-module/${option})"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ ${option} == "pull" ]] && [[ "${prev}" == "${option}" ]]; then
        local _prefix="$(head -1 $T4D_BPI_LIST_INDEX_FILE | sed 's|^%--->||g')"
        opts="$(cat $T4D_BPI_LIST_INDEX_FILE | grep -v '^%--->' | sed "s|^|$_prefix|g" )"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ ${option} == "install" ]] && [[ -e $T4D_BPI_IMPORT_INDEX_FILE ]] && [[ "${prev}" == "${option}" ]]; then
        opts="$(head -1 $T4D_BPI_IMPORT_INDEX_FILE | sed 's|^%--->||g' | sed "s|^$(pwd)/||g")"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}

_bpiDoc(){
###### _bpiDoc
#   - Name:
#       _bpiDoc
###
#   - Synopsis:
#       Show Project Documentation
###
#   - Definition:
#       Parse project Header to show user a ready to read shell documentation
###
###### DOCUMENTATION BLOC ##### 
    local _Internal="${2:-shell}"
    local _MainContent="$(_t4dDocGetFunctionContent bpi)"
    local _SubContent="$(_t4dDocGetFunctionContent _t4dModBpiDevice)"
    if [[ "$_Internal" == "-no-shell" ]]; then
        echo $_MainContent
    elif [[ $# -eq 1 ]] && [[ "$(_t4dDocGetOptionsList "$_MainContent" | grep "^$1")" != "" ]]; then
        local _OptionHiddenCallName="$(_t4dDocGetOptionsHiddenCall "$_MainContent" $1)"
        t4dHelp $_OptionHiddenCallName | sed "s|$_OptionHiddenCallName|bpi $1|g"
    elif [[ $# -eq 2 ]] && [[ "$(_t4dDocGetOptionsList "$_SubContent" | grep "^$2")" != "" ]]; then
        local _OptionHiddenCallName="$(_t4dDocGetOptionsHiddenCall "$_SubContent" $2)"
        t4dHelp $_OptionHiddenCallName | sed "s|$_OptionHiddenCallName|bpi device $2|g"
    elif [[ "$1" == "" ]] || [[ "$1" == "bpi" ]]; then
        _t4dModBpiLogo doc
        t4dHelp -no-logo bpi
    else
        t4dHelp $@
    fi
    echo ""
    echo ""
    echo ""
}

_t4dModBpiLogo(){
#   Show Great Ascii IFS logo art ... maybe
#   Usage : _wksLogo

    local _color=${1:-$plcyan}
    l1="    #######    ######    #######"
    l2="   ##    ##   ##   ##      ##   "
    l3="  #######    ######       ##    "
    l4=" ##    ##   ##           ##     "
    l5="#######    ##        ########   "
    if [[ "$_T4D_QUIET_MODE" == "true" ]]; then
        #DoNothing
    elif [[ "$1" == "doc" ]]; then
        local _Content="${l1}%${l2}%${l3}%${l4}%${l5}"
        _t4dDocWks ${_Content} ${pipurple}
    elif [[ "$1" == "main" ]]; then
        local center="$(_t4dPromptCenterSpace '55' | sed 's|-||g')"
        echo "${center}${plcyan}"
        echo "${center}$plyellow               _ /'>                             ${pstd}"
        echo "${center}$plyellow              / > /'>                            ${pstd}"
        echo "${center}$plyellow        _____/ / / /'>                           ${pstd}"
        echo "${center}$plyellow       /____/ / / / /'>                          ${pstd}"
        echo "${center}$plyellow      /====/ / / / / /                           ${pstd}"
        echo "${center}$plyellow     / .> (_) < < < <                            ${pstd}"
        echo "${center}$plyellow    (__    \ \ \ \ \ \ ${pstd}${plblue}#######   #######  #######${pstd}"
        echo "${center}$plyellow     |__    \ \ \ \ \_${pstd}${plblue}##    ##  ##    ##    ##   ${pstd}"
        echo "${center}$plyellow      |___   \ \ \ \_${pstd}${plblue}#######   #######     ##    ${pstd}"
        echo "${center}$plyellow        \   ( \_> \_${pstd}${plblue}##    ##  ##          ##     ${pstd}"
        echo "${center}$plyellow                \_>${pstd}${plblue}#######   ##       ########   ${pstd}"
        echo "$pstd"
    else
        local center="$(_t4dPromptCenterSpace "${#l5}" | sed 's|-||g')"
        echo "${center}${_color} $l1 ${pstd}"
        echo "${center}${_color} $l2 ${pstd}"
        echo "${center}${_color} $l3 ${pstd}"
        echo "${center}${_color} $l4 ${pstd}"
        echo "${center}${_color} $l5 ${pstd}"
        echo ""
    fi
}

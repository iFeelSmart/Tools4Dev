#ERROR CODE 314

_t4dModGikUtilsSync(){
# Generated From $Tools4Dev_PATH/Templates/function-advanced.env
# v1.4.0
_t4dDebugInfoStart "_t4dModGikUtilsSync" "$#" "$@"
###### _t4dModGikUtilsSync
#   - Name:
#       _t4dModGikUtilsSync
###
#   - Synopsis:
#       align all project branches from manifest.xml
###
#   - Definition:
#
###
#   - Usage:
#
###
#   - Available Options:
#        -no-logo
#
###
#   - Example:
#
###
###### DOCUMENTATION BLOC #####

    local CHPWD=1
    local _1Error=0
    local _base="manifest"

    if [[ "$1" == "-no-logo" ]]; then
        shift
    else
         _t4dModGikLogo main "Sync"
    fi
    if [[ "$2" == "origin" ]]; then
        _base="default"
    fi
   
    for _project in $(echo $1); do
        if [[ "$_base" == "default" ]]; then
            local _origin="$(_t4dFindDataInXmlV2 "project" "path" "${_project}" "default" "$WS_ROOT/manifest")"
            local _newRevision="$(_t4dFindDataInXmlV2 "default" "name" "${_origin}" "revision" "$WS_ROOT/manifest")"
        else
            local _newRevision="$(_t4dFindDataInXML "project" "${_project}" "revision" "$WS_ROOT/manifest")"
        fi
        _t4dModGikUtilsSwitchToBranch "$_project" "$_newRevision" || _1Error=314
    done
    if [[ "$_1Error" != "0" ]]; then
        _t4dWarning "We found at least 1 Error during Multi-Project's Git commands"
        return $_1Error
    fi

###############################
_t4dDebugInfoEnd "_t4dModGikUtilsSync" "$@"
}

_t4dModGikUtilsSwitchToBranch(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dModGikUtilsSwitchToBranch
#   - Name:
#       _t4dModGikUtilsSwitchToBranch
###
#   - Synopsis:
#       switch given path to specified branch revision
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _Error=0
    local _project="$1"
    local _newRevision="$2"
    local _name="$(_t4dPromptVarWithSpaceAtEnd 17 "$_project" | sed 's|%||g')"
    cd "$WS_ROOT/$_project" || _Error='1'
    local _oldBranch="$(_t4dSrcGitInfoBranch)"
    
    if [[ "$_Error" == "0" ]]; then
        (git checkout "${_newRevision}" &> /dev/null && echo "${plblue}${_name}${pstd} -> switched to ${plgreen}${_newRevision}${pstd} (previous was ${plyellow}${_oldBranch}${pstd})") || _Error='2'
    fi
    if [[ "$_Error" != "0" ]]; then
        _1Error=314
        if [[ "$_Error" == "1" ]]; then
            echo "${plyellow}${_name} folder is missing, _wksClone will be launched in another process ${pstd}" && _t4dSystemSilentCommand "_wksClone"
        elif [[ "$_Error" == "2" ]]; then
            echo "${plred}${_name}${pstd} -> ${plred}failed to switch from ${_oldBranch} to ${_newRevision}${pstd}"
        fi
    fi

###############################
}

_t4dModGikDirtyWorkspace(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dModGikDirtyWorkspace" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModGikDirtyWorkspace
#   - Name:
#       _t4dModGikDirtyWorkspace
###
#   - Synopsis:
#       Return true if global git and all subrepo are not in a dirty mode, false otherwize
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local CHPWD=1
    local _OLDPWD=$PWD
    cd $WS_ROOT
    local GIK_PROJECTS="$(_t4dFindTypeInXML "project")"
    local _RepoStatus="$(_t4dModGikUtilsFolderAction $GIK_PROJECTS _t4dSrcGitUtilsDirtyGit | grep -B1 'false' | grep ':')"
    local _GlobalGitDirty="$(_t4dSrcGitUtilsDirtyGit)"
    if [[ "$_GlobalGitDirty" == "false" ]]; then
        _t4dPromptSquare "Global repository is dirty" "$plyellow"
    elif [[ "$_RepoStatus" != "" ]]; then
        _t4dPromptSquare "One or more sub repositories are dirty" "$plyellow"
        echo "$_RepoStatus" | sed 's|:||g'
    else
        echo "Working tree clean"
    fi
    cd $_OLDPWD

###############################
_t4dDebugInfoEnd "_t4dModGikDirtyWorkspace" "$@"
}

_t4dModGikUtilsShaSync(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dModGikUtilsShaSync" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModGikUtilsShaSync
#   - Name:
#       _t4dModGikUtilsShaSync
###
#   - Synopsis:
#       Checkout all project using .diff information will be DETACHED
###
#   - Definition:
#       Use .diff file in order to be on the same commit ID than .diff file.
#           Beware that it will be detached from HEAD and this behavior 
#           should normally only be used by Continuous Integration
#
###
#   - Usage:
#       _t4dModGikUtilsShaSync
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local CHPWD=1
    local _Error=0


    _t4dModGikLogo main "ShaSync"

    for _project in $(echo $1); do
        _Error=0
        cd "$WS_ROOT/$_project" || _Error='1'
        local _newRevision="$(_t4dSystemGetDiffSha7 "$_project" "$WS_ROOT/.diff")"
        local _oldBranch="$(_t4dSrcGitInfoBranch)"
        local _name="$(_t4dPromptVarWithSpaceAtEnd 17 "$_project" | sed 's|%||g')"
        if [[ "$_Error" == "0" ]]; then
            (git checkout "${_newRevision}" &> /dev/null && echo "${plblue}${_name}${pstd} -> switched to ${plgreen}${_newRevision}${pstd} (previous was ${plyellow}${_oldBranch}${pstd})") || _Error='2'
        fi
        if [[ "$_Error" != "0" ]]; then
            _t4dGikError='314'
            [[ "$_Error" == "1" ]] && echo "${plyellow}${_name} folder is missing, you might need to launch >wksClone< ${pstd}"
            [[ "$_Error" == "2" ]] && echo "${plred}${_name}${pstd} -> ${plred}failed to switch from ${_oldBranch} to ${_newRevision}${pstd}"
        fi
    done

###############################
_t4dDebugInfoEnd "_t4dModGikUtilsShaSync" "$@"
}

_t4dModGikUtilsFetch(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dModGikUtilsFetch" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModGikUtilsFetch
#   - Name:
#       _t4dModGikUtilsFetch
###
#   - Synopsis:
#       Launch Custom WS fetch 
###
#   - Definition:
#       Will get last fetch date then choose if it has to launch
#       a silent fetch or not in the workspace
#
###
#   - Usage:
#       _t4dModGikUtilsFetch <Edit Default Timer>
#
###
#   - Options:
#
###
#   - Example:
#       _t4dModGikUtilsFetch 10    = Launch fetch if last fetch date greater than 10 secondes
#       _t4dModGikUtilsFetch 600   = Launch fetch if last fetch date greater than 10 minutes
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
    local _LastFetch=""
    local _Time="$(date +%s)"
    if [[ -e $T4D_PROJECT_LOG_PATH/.fetchLog ]]; then
        _LastFetch="$(tail -n+1 $T4D_PROJECT_LOG_PATH/.fetchLog | head -1 | cut -d '|' -f1)"
    fi
    if [[ $( expr ${_Time:-610} - ${1:-900}) -ge ${_LastFetch:-0} ]]; then
        _t4dDebugLog $plog "Gik fetch launched"
        echo "$_Time|$(date)" > $T4D_PROJECT_LOG_PATH/.fetchLog
        echo "SILENT FETCH STARTED" >> $T4D_PROJECT_LOG_PATH/.fetchLog
        gik all git fetch &>> $T4D_PROJECT_LOG_PATH/.fetchLog
        echo "SILENT FETCH DONE" >> $T4D_PROJECT_LOG_PATH/.fetchLog
    else
        _t4dDebugLog $plog "Last Fetch : $(_t4dSrcGitInfoLastFetch)"
    fi

###############################
_t4dDebugInfoEnd "_t4dModGikUtilsFetch" "$@"
}

_t4dModGikUtilsSilentFetch(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dModGikUtilsSilentFetch" "$#" "$@"
###### _t4dModGikUtilsSilentFetch
#   - Name:
#       _t4dModGikUtilsSilentFetch
###
#   - Synopsis:
#       Launch Silent Global Fetch
###
#   - Example:
#       _t4dModGikUtilsSilentFetch
###
###### DOCUMENTATION BLOC #####

    _t4dSystemSilentCommand "_t4dModGikUtilsFetch 10" "Gik fetch launched in another process"

###############################
_t4dDebugInfoEnd "_t4dFunctionName" "$@"
}

_t4dModGikUtilsUpdate(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dModGikUtilsUpdate
#   - Name:
#       _t4dModGikUtilsUpdate
###
#   - Synopsis:
#       Update manifest.xml with current projects state
###
#   - Available Options:
#       * -no-logo               = remove logo from output
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local CHPWD=1
    local color=$plyellow
    local _manifestFile="$WS_ROOT/manifest.xml"
    local _enableLogo="true"
    
    if [[ "$1" == "-no-logo" ]]; then
        _enableLogo="false"
        shift
    fi

    if [[ "$2" != "" ]]; then
        _manifestFile="${2}"
    fi

    if [[ "$_enableLogo" == "true" ]]; then
        _t4dModGikLogo main "Update"
    fi

    cat "$_manifestFile" | grep -v '<project' | grep -v '<symbolic' | grep -v '^</' | grep -v '^$' > "$WS_ROOT/manifest.tmp"
    local symbolic="$(cat "$_manifestFile" | grep '<symbolic')"
    for _project in $(echo $1); do
        _t4dDebugLog $plog "$_project"
        cd "$WS_ROOT/$_project"
        local _revision="$(_t4dSrcGitInfoBranch)"
        local _lock="$(_t4dFindDataInXmlV2 "project" path "${_project}" "lock" "$WS_ROOT/manifest")"
        local _LockSize="12"
        local _key="$(_t4dFindDataInXmlV2 "project" path "${_project}" "key" "$WS_ROOT/manifest")"
        local _KeySize="$(expr 6 + $(_t4dVarGetMaxSize $(_t4dFindMarkerInXML project key "$WS_ROOT/manifest")))"
        local _name="$(_t4dFindDataInXmlV2 "project" path "${_project}" "name" "$WS_ROOT/manifest")"
        local _NameSize="$(expr 7 + $(_t4dVarGetMaxSize $(_t4dFindMarkerInXML project name "$WS_ROOT/manifest")))"
        local _remote="$(_t4dFindDataInXmlV2 "project" path "${_project}" "remote" "$WS_ROOT/manifest")"
        local _RemoteSize="$(expr 9 + $(_t4dVarGetMaxSize $(_t4dFindMarkerInXML project remote "$WS_ROOT/manifest")))"
        local _default="$(_t4dFindDataInXmlV2 "project" path "${_project}" "default" "$WS_ROOT/manifest")"
        local _DefaultSize="$(expr 10 + $(_t4dVarGetMaxSize $(_t4dFindMarkerInXML project default "$WS_ROOT/manifest")))"
        echo "    <project $(_t4dPromptVarWithSpaceAtEnd ${_LockSize:-4} "lock=\"${_lock:-false}\"" | sed 's|%||g') $(_t4dPromptVarWithSpaceAtEnd ${_KeySize:-12} "key=\"${_key}\"" | sed 's|%||g') $(_t4dPromptVarWithSpaceAtEnd ${_RemoteSize:-16} "remote=\"${_remote}\"" | sed 's|%||g') $(_t4dPromptVarWithSpaceAtEnd ${_DefaultSize:-20} "default=\"${_default:-default}\"" | sed 's|%||g') $(_t4dPromptVarWithSpaceAtEnd ${_NameSize:-24} "name=\"${_name}\"" | sed 's|%||g') revision=\"${_revision}\" path=\"${_project}\" />" >> "$WS_ROOT/manifest.tmp"
    done
    if [[ $symbolic != "" ]]; then
        echo $symbolic  >> "$WS_ROOT/manifest.tmp"
    fi
    echo "</manifest>" >> "$WS_ROOT/manifest.tmp"
    mv "$WS_ROOT/manifest.tmp" "$_manifestFile"

###############################
_t4dDebugInfoEnd "_t4dModGikUtilsUpdate" "$@"
}

_t4dModGikEditOriginBranch(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dModGikEditOriginBranch" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModGikEditOriginBranch
#   - Name:
#       _t4dModGikEditOriginBranch
###
#   - Synopsis:
#       Edit default origin branch to current working branch
###
#   - Definition:
#       Will edit your manifest default balise whose name is default
#       <default ....   name="default" 
#       This line revision will be replaced by current branch name
#       
#       If Arg1 is specified, will rename revision with this value instead
#
###
#   - Usage:
#       _t4dModGikEditOriginBranch [Default Name Branch]
###

###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
    local CHPWD=1
    local color=$plyellow
    cd $WS_ROOT

    _t4dModGikLogo main "Origin $@"

    tail -n+1 "$WS_ROOT/manifest.xml" | grep -B100 '<default' | grep -v '<default' > "$WS_ROOT/manifest.tmp"
    local _revision="$(_t4dSrcGitInfoBranch)"
    if [[ "$1" != "" ]]; then
        _revision="$1"
    fi
    local _key="$(_t4dFindDataInXML "default" "default" "key" "$WS_ROOT/manifest")"
    local _remote="$(_t4dFindDataInXML "default" "default" "remote" "$WS_ROOT/manifest")"
    echo "    <default $(_t4dPromptVarWithSpaceAtEnd 12 "key=\"${_key}\"" | sed 's|%||g') $(_t4dPromptVarWithSpaceAtEnd 16 "name=\"default\"" | sed 's|%||g') $(_t4dPromptVarWithSpaceAtEnd 20 "remote=\"${_remote}\"" | sed 's|%||g') revision=\"${_revision}\" />" >> "$WS_ROOT/manifest.tmp"
    tail -n+1 "$WS_ROOT/manifest.xml" | grep -A100 '<default' | sed -n '1!p' >> "$WS_ROOT/manifest.tmp"
    mv "$WS_ROOT/manifest.tmp" "$WS_ROOT/manifest.xml"

###############################
_t4dDebugInfoEnd "_t4dModGikEditOriginBranch" "$@"
}

_t4dModGiklUtilsCheckout(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dModGiklUtilsCheckout" "$#" "$@"
###### _t4dModGiklUtilsCheckout
#   - Name:
#       _t4dModGiklUtilsCheckout
###
#   - Synopsis:
#       Exec git checkout on file or sync projects
###
#   - Example:
#       |At Least One example|
###
###### DOCUMENTATION BLOC #####

    if [[ -f $1 ]]; then
        _t4dModGikLogo main "gik checkout $1"
        _t4dModGikUtilsFileAction $1 checkout
    else
        _t4dModGikLogo main "Checkout"
        git checkout $@
        echo ""
        GIK_PROJECTS="$(_t4dFindTypeInXML "project" "$WS_ROOT/manifest")"

        if [[ "$(_t4dSrcGitInfoBranch | grep 'HEAD detached at')" != "" ]] && [[ -e "$WS_ROOT/.diff" ]]; then
            _t4dModGikUtilsShaSync $GIK_PROJECTS
        else
            _t4dModGikUtilsSync -no-logo $GIK_PROJECTS
        fi
        
    fi

###############################
_t4dDebugInfoEnd "_t4dModGiklUtilsCheckout" "$@"
}

_t4dModGikUtilsFolderAction(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dModGikUtilsFolderAction" "$#" "$@"
###### _t4dModGikUtilsFolderAction
#   - Name:
#       _t4dModGikUtilsFolderAction
###
#   - Synopsis:
#       Execute any command in 1 or several Folder
###
#   - Example:
#       |At Least One example|
###
###### DOCUMENTATION BLOC #####

    local CHPWD=1
    for _project in $(echo $1); do
        cd "$WS_ROOT/$_project"
        if [[ "$(echo $@ | grep ' -q')" == "" ]]; then
            echo "${plblue}${_project}${pstd}:"
            ${@:2} 2> $T4D_PROJECT_LOG_PATH/.log || _t4dDebugLog $pwarning "$(head -1 $T4D_PROJECT_LOG_PATH/.log)"
        else
            local _name="${plblue}$(_t4dPromptVarWithSpaceAtEnd 17 "$_project" | sed 's|%||g')${pstd}"
            (($(echo ${@:2} | sed 's| -q||g')) &> /dev/null && echo "${_name} -> ${plgreen}done${pstd}") || echo "${_name} -> ${plred}failed${pstd} ( return $?)"
        fi
    done

###############################
_t4dDebugInfoEnd "_t4dModGikUtilsFolderAction" "$@"
}

_t4dModGikUtilsFileAction(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dModGikUtilsFileAction" "$#" "$@"
###### _t4dModGikUtilsFileAction
#   - Name:
#       _t4dModGikUtilsFileAction
###
#   - Synopsis:
#       Execute a git action about one file (git add, git reset HEAD etc.)
###
#   - Example:
#       |At Least One example|
###
###### DOCUMENTATION BLOC #####

    local CHPWD=1
    cd $WS_ROOT/$(dirname $1)
    git $(echo ${@:2}) $(basename $1)

###############################
_t4dDebugInfoEnd "_t4dModGikUtilsFileAction" "$@"
}

_t4dModGikUtilsDiff(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dModGikUtilsDiff" "$#" "$@"
###### _t4dModGikUtilsDiff
#   - Name:
#       _t4dModGikUtilsDiff
###
#   - Synopsis:
#       |One-line description of what it does. (less than 55 char)|
###
#   - Definition:
#       This module is here to use a git repository as a manager of several git project. 
#           Gik will use Manifest.xml file
#
###
#   - Usage:
#       gik -f <folders> [options]
#
###
#   - Available Options:
#       * -f '[folder1] [folder2] ...'
#           Show you a global git status between all subProjects.
#       * --no-color                  
#           stdout with no color.
#       * --name-only                 
#           show only filenames.
#       * --cached                    
#           show only cached diff.
#       * -b <branch>                 
#           Specify which branch to diff with
#       * -r <branch>                 
#           Specify which branch reference to diff with
#       * HEAD                        
#           Will simply ignore local changes during diff
#
###
#   - Example:
#       |At Least One example|
###
###### DOCUMENTATION BLOC #####

    local CHPWD=1
    local _diffArgs=""
    local _manifest=""
    local _branch=""
    local _Ref=""
    while [[ "$@" != "" ]]; do
        case "$1" in
            -f*)
                local _folders="$2"
                shift
                shift
            ;;
            --no*)
                local plpurple=''
                local plyellow=''
                local plgreen=''
                local pstd=''
                shift
            ;;
            --na*)
                _diffArgs="--name-only $_diffArgs"
                shift
            ;;
            --c*)
                _diffArgs="$_diffArgs --cached"
                shift
            ;;
            --staged)
                _diffArgs="$_diffArgs --cached"
                shift
            ;;
            -b*)
                local _branch=$2
                shift
                shift
            ;;
            -r*)
                _Ref="$2"
                shift
                shift
            ;;
            HEAD)
                _Ref="HEAD"
                shift
            ;;
            *)
                echo "Unknown option $1"
                return 314
            ;;
        esac
    done
    local _manifestDefault="$(_t4dFindMarkerInXML default revision "$WS_ROOT/manifest" | wc -l | sed 's| ||g')"

    if [[ "$_manifestDefault" == "1" ]]; then
        # This function test if there is several <default marker in your manifest, if no, branch is defined outside folder's loop 
        _branch=$(_t4dFindDataInXML "default" "default" "revision" "$WS_ROOT/manifest")
    fi
    for _project in $(echo $_folders); do
        cd "$WS_ROOT/$_project"
        
        if [[ "$_manifestDefault" != "1" ]]; then
            _default="$(_t4dFindDataInXML "project" "$_project" "default" "$WS_ROOT/manifest")"
            _branch="$(_t4dFindDataInXmlV2 "default" "name" "$_default" "revision" "$WS_ROOT/manifest")"
        fi
        _t4dSrcGitUtilsDiff --prefix "$_project" $(echo $_diffArgs) $_Ref $_branch
    done

###############################
_t4dDebugInfoEnd "_t4dModGikUtilsDiff" "$@"
}


_t4dModGikOther(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dModGikOther" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModGikOther
#   - Name:
#       _t4dModGikOther
###
#   - Synopsis:
#       Apply command to File/Folder provided or apply git command in all sub repo
#       
###
#   - Definition:
#       It will first parse all arguments.
#       During parsing, for every argument it will test if :
#       - It's a file
#       - A folder
#       - Something Else
#
#       If a filePath was found it will save the filename then change
#       current directory to the file source folder
#       Same behavior if a folder was found  cd <Folder> will be executed
#       All other Unknown behavior will be saved as git argument.
#
#       If Any file or folder was found it will launch git command in every
#       Sub repositories.
#       In other case the git command will be launched in the current file's 
#       sub repository
#
###
#   - Safe Mode:
#       If you specify -safe-mode in first argument, it will activate safe mode
#       This mode will show you what T4D understood.
#       If you want to abort you will have to press Ctrl+C. 
#
###
#   - Usage:
#       `_t4dModGikOther` [-safe-mode] [git option] [file || folder]
#
###
#   - Example:
#       `_t4dModGikOther UI/License diff HEAD^`     = cd UI && git diff HEAD^ License
#       `_t4dModGikOther UI log -1`                 = cd UI && git log -1
#       `_t4dModGikOther Script  add .`             = cd Script && git add .
#       `_t4dModGikOther Script  pull`              = cd Script && git pull
#       `_t4dModGikOther -safe-mode Script  pull`   = cd Script && git pull *+ Activate SafeMode* 
#
###
#   - Note:
#       Option has to be consistent with git command
#       File can be send anywhere in the command
#       If you want to execute _t4dModGikOther in several folder for now you will have 
#       to do it one by one.
#           `_t4dModGikOther add . Script` then replace Script by UI etc.
#       -safe-mode option has to be placed before anything
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local CHPWD=1
    local _Args=''
    local _FileName=''
    local _All='true'
    local _Folder=""
    local _SafeMode="false"
    if [[ $1 == "-safe-mode" ]]; then
        shift
        _t4dDebugLog $pinfo "TIPS : you don't need to specify 'other' argument, this will activate safe-mode"
        _t4dDebugLog $pinfo "gik ${@}${pstd} will works too"
        _SafeMode='true'
    fi
    while [[ "$@" != "" ]]; do
        if [[ "$1" == '.' ]]; then
            _Args="$_Args $1"
        elif [[ -f "${1}" ]]; then
            _All='false'
            _FolderFiles="$_FolderFiles $(dirname "$1")%$(basename "$1")"
        elif [[ -d "${1}" ]]; then
            _All='false'
            _FolderFiles="$_FolderFiles $1%."
        else
            _Args="$_Args $1"
        fi
        shift
    done
   

    if [[ "$_SafeMode" == "true" ]]; then
        if [[ "$_All" == "true" ]]; then
            _t4dDebugLog $pinfo "Will execute > git $(echo $_Args)< in all sub repositories, enter to proceed Ctrl+C to abort"
            read tmp
        else
            cd $WS_ROOT
            _t4dDebugLog $pinfo "Will execute > git $(echo $_Args)< in ${plpurple}$_Folder${pstd}, enter to proceed Ctrl+C to abort"
            read tmp
            cd "$_Folder"
        fi   
    fi

    if [[ "$_All" == "true" ]]; then
        local GIK_PROJECTS="$(_t4dFindTypeInXML "project")"
        _t4dModGikUtilsFolderAction "$GIK_PROJECTS" git $(echo $_Args)
    else
        for _folderFile in $(echo $_FolderFiles); do
            local _file="$(echo $_folderFile | cut -d '%' -f2)"
            local _folder="$(echo $_folderFile | cut -d '%' -f1)"
            cd ${WS_ROOT}/$_folder
            _t4dPromptSquare "$_folder" "$plyellow"
            echo "${plpurple}git ${_Args} ${_file}${pstd}"
            git $(echo ${_Args}) $_file
        done
    fi
    cd $WS_ROOT

###############################
_t4dDebugInfoEnd "_t4dModGikOther" "$@"
}


_t4dModGikUtilsTag(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.1
_t4dDebugInfoStart "_t4dModGikUtilsTag" "$#" "$@"
###### _t4dModGikUtilsTag
#   - Name:
#       _t4dModGikUtilsTag
###
#   - Synopsis:
#       Create tag in All subrepositories + Project Manager Repository
###
#   - Definition:
#       If you want to create a tag in only one folder, please use gikf "<Folders>" tag <Yourtag>
###
#   - Example:
#       gik tag 3.12.5-dailyTests
###
###### DOCUMENTATION BLOC #####

    local CHPWD=1
    _t4dPromptSquare "$(basename $PWD)" ${plblue}
    git tag ${@:2}
    _t4dModGikUtilsFolderAction "$1" git tag ${@:2}

###############################
_t4dDebugInfoEnd "_t4dModGikUtilsTag" "$@"
}

_t4dModGikUtilsPush(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dModGikUtilsPush" "$#" "$@"
###### _t4dModGikUtilsPush
#   - Name:
#       _t4dModGikUtilsPush
###
#   - Synopsis:
#       Push your work in your global project and every sub-repositories
###
#   - Available Options:
#       * -f
#           Allow protected push
###
#   - Example:
#       |At Least One example|
###
###### DOCUMENTATION BLOC #####

    local CHPWD=1
    local _branch="$(_t4dSrcGitInfoBranch)"
    local _protected="$(_t4dSrcGitIsMyBranchProtected $_branch)"
    local _force="${T4D_GIK_FORCE:-false}"
    local _folders="$1"
    shift

    _t4dModGikLogo main "Push"

    while [[ "$@" != "" ]]; do
        case "$1" in
            -f)
                local _force="true"
                shift
            ;;
            *)
                local _extraArgs="$1"
                shift
            ;;
        esac
    done

    [[ "$_force" != "true" ]] && [[ "$_protected" != "" ]] && _t4dModGikUtilsFatalError "314" "$_protected" "use -f option to allow protected push" && _t4dGikError='314' && return 314

    for _project in $(echo $_folders); do
        cd "$WS_ROOT/$_project"
        _t4dSrcGitUtilsPush "$(printf "%-17s" $_project)" "$(_t4dSrcGitInfoBranchState)" "$_extraArgs"
    done
    
    cd "$WS_ROOT"
    echo ""
    _t4dSrcGitUtilsPush "$(printf "%-17s" "WKS PROJECT")" "$(_t4dSrcGitInfoBranchState)" "$_extraArgs"

###############################
_t4dDebugInfoEnd "_t4dModGikUtilsPush" "$@"
}

_t4dModGikUtilsFatalError(){
echo "${plred}              .   ,                "
echo "        '. '.  \  \                        "
echo "       ._ '-.'. \`\  \                     "
echo "         '-._; .'; \`-.'.                  "
echo "        \`~-.; '.       '.     GIK ERROR $1"
echo "         '--,\`           '.               "
echo "            -='.          ;       $2       "
echo "  .--=~~=-,    -.;        ;                "
echo "  .-=\`;    \`~,_.;        /               "
echo " \`  ,-\`'    .-;         |                "
echo "    .-~\`.    .;         ;                 "
echo "     .;.-   .-;         ,\                 "
echo "       \`.'   ,=;     .-'  \`~.-._         "
echo "        .';   .';  .'      .'   '-.        "
echo "          .\  ;  ;        ,.' _  a',       "
echo "         .'~\";-\`   ;      ;\"~\` \`'-=.)  ${plyellow}$3${plred}"
echo "       .' .'   . _;  ;',  ;                "
echo "       '-.._\`~\`.'  \  ; ; :              "
echo "            \`~'    _'\\_ \\_              "
echo "                  /=\`^^=\`\"\"/\`)-.      "
echo "                  \ =  _ =     =\          "
echo "                   \`\"\"\` \`~-. =   ;    "
echo "             ${piblue}See Doc -> _t4dModGikCommit"
echo "${pstd}"
}

_t4dModGikUtilsPull(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dModGikUtilsPull" "$#" "$@"
###### _t4dModGikUtilsPull
#   - Name:
#       _t4dModGikUtilsPull
###
#   - Synopsis:
#       Pull in all repositories that are behind remotes HEAD
###
#   - Example:
#       |At Least One example|
###
###### DOCUMENTATION BLOC #####

    local CHPWD=1
    local _GikPullPreference="pull"

    if [[ "$1" == "-no-logo" ]]; then
        shift
    else
        _t4dModGikLogo main "Pull    ( only if Behind )"
    fi
    
    cd "$WS_ROOT"
    echo ""
    _t4dSrcGitUtilsPull "$(printf "%-18s" "WKS PROJECT")" "$(_t4dSrcGitInfoBranchState)" ${@:2}

    for _project in $(echo $1); do
        cd "$WS_ROOT/$_project"
        _t4dSrcGitUtilsPull "$(printf "%-18s" $_project)" "$(_t4dSrcGitInfoBranchState)" ${@:2}
    done

###############################
_t4dDebugInfoEnd "_t4dModGikUtilsPull" "$@"
}

_t4dModGikUtilsPullGlobal(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dFunctionName" "$#" "$@"
###### _t4dFunctionName
#   - Name:
#       _t4dFunctionName
###
#   - Synopsis:
#       Force to Fetch & Pull in all manifest repositories
###
#   - Example:
#       |At Least One example|
###
###### DOCUMENTATION BLOC #####

    _t4dModGikLogo main "Fetch & Pull"
    _t4dModGikUtilsPull -no-logo $1 -f ${@:2}

###############################
_t4dDebugInfoEnd "_t4dFunctionName" "$@"
}

_t4dModGikUtilsRebase(){
# Generated From $Tools4Dev_PATH/Templates/function-advanced.env
# v1.5.0
###### _t4dModGikUtilsRebase
#   - Name:
#       _t4dModGikUtilsRebase
###
#   - Synopsis:
#       Allow user to rebase work of any branch to any other branch using cherry-pick method
###
#   - Usage:
#       * {Name} <option>  [arguments]
#
###
#   - Available Options:
#       -start-from         = Will cherry-pick all commit starting from this sha7 or branch
#       -target             = select target branch 
#       -current            = select final sha7 or branch ( Default is HEAD)
#       -create-branch      = Create new branches
#       -pull               = Pull before doing anything
#       -force              = Default will only send you a status. Use -f to apply modifications
#       -logfile            = Override default log file
#
###
#   - Example:
#       * _t4dModGikUtilsRebase -b HEAD -sf develop -t feature/SMARTUI-3043-use-proxy-service-plan-on-seachange-demo 
#           Cherry-pick all commit between HEAD and local develop to be exported and mergeable into feature...
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###### DOCUMENTATION BLOC #####

    local _LogFile="$T4D_PROJECT_LOG_PATH/gik.log"
    local _OldOrigin="origin"
    local _NewOrigin=""
    local _Head=""
    local _Pull="false"
    local _Action="Status"
    local _NewBranch="false"
    local _GlobalDiffFound="false"
    local _Projects="$1"
    local _CustomCommitMessage=""
    shift

    while [[ "$@" != "" ]]; do
        case $1 in
            -start-from|-sf)
                _OldOrigin="$2"
                shift
            ;;
            -target|-t)
                _NewOrigin="$2"
                shift
            ;;
            -current|-b)
                _Head="$2"
                shift
            ;;
            -create-branch|-cb)
                _NewBranch="$2"
                shift
            ;;
            -pull|-p)
                _Pull="true"
            ;;
            -force|-f)
                _Action="Force"
            ;;
            -v)
                _Action="Diff"
            ;;
            -m)
                _CustomCommitMessage="$2"
                shift
            ;;
            -logfile)
                _LogFile="$2"
                shift
            ;;
            *)
                _t4dDebugLog $perror "_t4dModGikUtilsRebase Unknown Argument $1"
                return 310
            ;;
            esac
        shift
    done

    if [[ "$(_t4dModGikDirtyWorkspace)" != "Working tree clean" ]]; then
        _t4dPromptSquare "At Least one repository is dirty and need to be cleaned before entering in rebase mode" "$plred"
        _t4dDebugLog "$pwarning" "Do You Want to continue ? Enter to proceed, Ctrl+C To Abort"
        read -n
    fi

    if [[ "$_Pull" == "true" ]]; then
        _t4dDebugLog $plog "git pull"
            ( git pull ) &> $_LogFile
        _t4dDebugLog $plog "Fetch all subrepo"
            ( _t4dModGikUtilsFetch 10  ) &> $_LogFile
        _t4dDebugLog $plog "align subrepo from $_Head"
            ( _t4dModGiklUtilsCheckout $_Head  ) &> $_LogFile 
            ( _t4dModGikUtilsPullSelect  ) &> $_LogFile
        rm $_LogFile 
    else
        _t4dDebugLog $plog "align subrepo using manifest from $_Head"
            ( _t4dModGiklUtilsCheckout $_Head  ) &> $_LogFile 
        rm $_LogFile 
    fi

    cd $WS_ROOT 2>/dev/null

    #Search for tag in origin branch
    if [[ "$(_t4dSrcGitInfoGetHEADType $_OldOrigin)" == "commit" ]] || [[ "$(_t4dSrcGitInfoGetHEADType $_OldOrigin)" == "tag" ]]; then
        _t4dDebugLog $pinfo "You have selected commit ID as Old origin"
        local _DiffFile="$(git show ${_OldOrigin}:.diff)"
        _OldOrigin="commit"
    fi
    

    _t4dDebugLog $plog "Search for commit to cherry-pick"
    # local _MergeBase="$(git merge-base $_NewOrigin $_Head)"
    # local _ListOfCommits="$(git merge-base $_NewOrigin $_Head)"
    for _project in $(echo $_Projects); do
        local CHPWD=1
        local _CherryPickError="false"
        cd $WS_ROOT/$_project 2>/dev/null
        
        local _CurrentBranch="$(_t4dSrcGitInfoBranch)"
        local res=""
        local _MergeBase=""
        if [[ "$_OldOrigin" == "origin" ]]; then
            local _Origin="$(_t4dFindDataInXML "default" "$(_t4dFindDataInXML project $_project default "$WS_ROOT/manifest")" "revision" "$WS_ROOT/manifest")"
        elif [[ "$_OldOrigin" == "commit" ]]; then
            local _Origin="$(echo $_DiffFile | grep "^$_project " | rev | cut -d ' ' -f1 | rev )"
        else
            local _Origin="$_OldOrigin"
        fi
        _MergeBase="$(_t4dSrcGitInfoGetMergeBase $_Origin $_NewOrigin)"

        res="$(_t4dSrcGitInfoLogFromBranch $_Origin HEAD | grep -v 'Merge branch' | grep -v 'Merge pull request' || true)"  

        if [[ "${res}" != "" ]]; then
            _GlobalDiffFound="true" 
            case "$_Action" in 
                Diff)
                    local _CommitLists="$(echo $res | cut -d ' ' -f1 | rev | tr '\n' ' ' | rev)"
                    if [[ "$_NewBranch" != "false" ]]; then
                        echo "${plblue} $_project ($_MergeBase -> $_NewBranch) :${pstd}"
                    else
                        echo "${plblue} $_project ($_MergeBase) :${pstd}"
                    fi
                    git checkout $_MergeBase &> /dev/null
                    _t4dDebugLog "$pinfo" "git cherry-pick --allow-empty --no-commit $(echo $_CommitLists)"
                    git cherry-pick --allow-empty --no-commit $(echo $_CommitLists)  &> $_LogFile  || _CherryPickError="true"
                    # cat $_LogFile 
                    # rm $_LogFile 
                    if [[ "$_CherryPickError" == "true" ]]; then
                        _t4dDebugLog $pwarning "Conflict Found during cherry-pick"
                    fi
                    local res=$(_t4dSrcGitStatusConsole "$(git status -s 2> /dev/null)")
                    _t4dSrcGitStatusHuman ${res}
                    git cherry-pick --quit
                    git reset --hard &> /dev/null
                    git checkout $_CurrentBranch &> /dev/null

                ;;
                Force)
                    local _CommitLists="$(echo $res | cut -d ' ' -f1 | rev | tr '\n' ' ' | rev)"
                    
                    if [[ "$_NewBranch" != "false" ]]; then
                        echo "${plblue} $_project (${plpurple}${_NewBranch}${pstd}${plblue} from $_MergeBase) :${pstd}"
                        git checkout $_MergeBase &> $_LogFile
                        git checkout -b $_NewBranch
                    else
                        echo "${plblue} $_project ($_MergeBase) :${pstd}"
                        git checkout $_MergeBase &> $_LogFile
                    fi
                    _t4dDebugLog $pinfo "git cherry-pick --allow-empty $(echo $_CommitLists)"
                    git cherry-pick --allow-empty $(echo $_CommitLists)  &> $_LogFile  || _CherryPickError="true"
                    if [[ "$_CherryPickError" == "true" ]]; then
                        _t4dDebugLog $pwarning "Conflict Found during cherry-pick"
                    fi
                    
                    local res=$(_t4dSrcGitStatusConsole "$(git status -s 2> /dev/null)")
                    _t4dSrcGitStatusHuman ${res}
                ;;
                *)
                    if [[ "${res}" != "" ]]; then 
                        echo "${plblue} $_project ($_MergeBase) :${pstd}"
                        res="$(echo "$res" | sed "s|\[|\\${plyellow}[|g" | sed "s|\]|]\\${pstd}|g" \
                                        | sed "s|^|\\${pyellow}|g" | sed "s| |\\${pstd} |" \
                                        | sed "s|Merge branch|\\${pcyan}Merge branch|g")"
                        echo "$res"
                    fi
                ;;

            esac
        else
            case "$_Action" in 
                Force)
                    git checkout $_NewOrigin
                ;;

            esac
        fi
    done

    cd $WS_ROOT
    #Create Branch On Global Project if needed
    case "$_Action" in 
        Force)
            git checkout $_NewOrigin
            git checkout -b $_NewBranch
            _t4dModGikEditOriginBranch $_NewOrigin
            _t4dModGikCommit -m "${_CustomCommitMessage:-"Backport of $_Head"}"
        ;;
        *)
            _t4dPromptSquare "This was a dry run, Specify -f option to apply cherry-pick" "${plpurple}"
        ;;
    esac

    if [[ -e $_LogFile ]]; then
        rm $_LogFile 
    fi
    if [[ "$_GlobalDiffFound" != "true" ]]; then
        _t4dPromptSquare "Your branch|sha7 does not contains any diff, it might already be merged into it's origin branch" $plyellow
        return 310
    fi
    if [[ "$_CherryPickError" == "true" ]]; then
        _t4dPromptSquare "At least one repository had a conflict/error during cherry pick" $plyellow
        return 310
    fi
# git merge merge <TargetBranch>

###############################
}

_t4dModGikUtilsPullSelect(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dModGikUtilsPullSelect" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModGikUtilsPullSelect
#   - Name:
#       _t4dModGikUtilsPullSelect
###
#   - Synopsis:
#       Will pull sub directories only when current manifest branch is identical to Global Project Branch
###

###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local CHPWD=1

    cd "$WS_ROOT"
    local _branchName="$(_t4dSrcGitInfoBranch)"
    echo ""
    _t4dModGikLogo main "Selected Pull"

    _t4dSrcGitUtilsPull -no-logo "$(printf "%-17s" "WKS PROJECT")" "$(_t4dSrcGitInfoBranchState)" ${@:2}
    for _project in $(echo $1); do
        local _manifestBranchName="$(_t4dFindDataInXML "project" "$_project" "revision" "$WS_ROOT/manifest")"
        cd "$WS_ROOT/$_project"
        # _t4dDebugLog $plog "$_manifestBranchName And $_branchName"
        if [[ "$_branchName" == "$_manifestBranchName" ]]; then
            _t4dSrcGitUtilsPull "$(printf "%-17s" $_project)" "behind" ${@:2}
        else
            _t4dSrcGitUtilsPull "$(printf "%-17s" $_project)" "up-to-date" ${@:2}
        fi
    done

###############################
_t4dDebugInfoEnd "_t4dModGikUtilsPullSelect" "$@"
}



#ERROR CODE 313

_t4dModGikInfoLogStatus(){
# Generated From $Tools4Dev_PATH/Templates/function-advanced.env
# v1.5.0
###### _t4dModGikInfoLogStatus
#   - Name:
#       _t4dModGikInfoLogStatus
###
#   - Synopsis:
#       Usefull tools to get info of current branch and others commit or branch
###
#   - Definition:
#       {Text}
#       {Text}
#       {Text}
#           1. List
#           2. List
#           3. List
#
#       {Text}
#
###
#   - Usage:
#       * _t4dModGikInfoLogStatus <option>  [arguments]
#           {One-line Description}
#
###
#   - Available Options:
#       -commit
#
###
#   - Example:
#       * {Example1}
#           {One-line Description}
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###### DOCUMENTATION BLOC #####

    echo "${pcyan}༼ つ ◕_◕ ༽つ Log Status${pstd}"
    echo ""
    local CHPWD=1
    local res=''
    local _BaseBranch="${3:-origin}"
    local _Branch="${2:-HEAD}"
    local _Folders="$1"

    for _project in $(echo $_Folders); do
        cd $WS_ROOT/$_project 2>/dev/null
        if [[ "$_BaseBranch" == "origin" ]]; then
            local _Origin="$(_t4dFindDataInXML "default" "$(_t4dFindDataInXML project $_project default "$WS_ROOT/manifest")" "revision" "$WS_ROOT/manifest")"
        else
            local _Origin="$_BaseBranch"
        fi

        # res=$(echo $res && _t4dSrcGitStatusConsole "$(git status -s 2>/dev/null)" "${_project}")
        res="$(_t4dSrcGitInfoLogFromBranch $_Origin $_Branch | sed "s|\[|\\${plyellow}[|g" | sed "s|\]|]\\${pstd}|g" \
                                                        | sed "s|^|\\${pyellow}|g" | sed "s| |\\${pstd} |" \
                                                        | sed "s|Merge branch|\\${pcyan}Merge branch|g" )"
    
        if [[ "${res}" != "" ]]; then 
            echo "${plblue} $_project :${pstd}"
            echo "$res"
        # else
            # echo "    ${plgreen}¸¸♬·¯·♩¸¸♪·¯·♫¸¸Working tree clean¸¸♬·¯·♩¸¸♪·¯·♫¸¸${pstd}"
        fi
    done


###############################  
}

_t4dModGikInfoStatus(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dModGikInfoStatus" "$#" "$@"
###### _t4dModGikInfoStatus
#   - Name:
#       _t4dModGikInfoStatus
###
#   - Synopsis:
#       Return a customized git status with beautiful output
###
#   - Usage:
#       local WS_MANIFEST_PROJECTS="$(_t4dFindTypeInXML "project")"
#       _t4dModGikInfoStatus $WS_MANIFEST_PROJECTS
###
#   - Example:
#       _t4dModGikInfoStatus "$(_t4dFindTypeInXML "project")"
###
###### DOCUMENTATION BLOC #####

    echo "${pcyan}༼ つ ◕_◕ ༽つ Gik Status${pstd}"
    echo ""
    local CHPWD=1
    local res=''
    for _project in $(echo $1); do
        cd $WS_ROOT/$_project 2>/dev/null
        res=$(echo $res && _t4dSrcGitStatusConsole "$(git status -s 2>/dev/null)" "${_project}")
    done
    if [[ "${res}" != "" ]]; then 
        _t4dSrcGitStatusHuman ${res}
    else
        echo "    ${plgreen}¸¸♬·¯·♩¸¸♪·¯·♫¸¸Working tree clean¸¸♬·¯·♩¸¸♪·¯·♫¸¸${pstd}"
    fi

###############################
_t4dDebugInfoEnd "_t4dModGikInfoStatus" "$@"
}

_t4dModGikInfoBranchStatus(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dModGikInfoBranchStatus" "$#" "$@"
###### _t4dModGikInfoBranchStatus
#   - Name:
#       _t4dModGikInfoBranchStatus
###
#   - Synopsis:
#       Explore all project from manifest and show gitPromptStatus
###
#   - Usage:
#       local WS_MANIFEST_PROJECTS="$(_t4dFindTypeInXML "project")"
#       _t4dModGikInfoBranchStatus $WS_MANIFEST_PROJECTS
###
#   - Example:
#       _t4dModGikInfoBranchStatus "$(_t4dFindTypeInXML "project")"
###
###### DOCUMENTATION BLOC #####

    if [[ "$1" == "-no-logo" ]]; then
        shift
    else
        _t4dModGikLogo main "Branch-Status"
    fi
    
    START_TIME=$(date +%s)
    local CHPWD=1
    local color=$plyellow
    for _project in $(echo $1); do
        cd "$WS_ROOT/$_project"
        echo "$(_t4dPromptVarWithSpaceAtEnd 18 $_project | sed 's|%||g')$(_t4dSrcGitInfoBranchStatus false)"
    done
    END_TIME=$(date +%s)
    DIFF_TIME=$(( ${END_TIME} - ${START_TIME} ))
    echo "finished after $(expr ${DIFF_TIME} / 60)min $(expr ${DIFF_TIME} % 60)secs"

###############################
_t4dDebugInfoEnd "_t4dModGikInfoBranchStatus" "$@"
}



_t4dModGikInfoWorkspace(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dModGikGlobalStatus" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModGikGlobalStatus
#   - Name:
#       _t4dModGikGlobalStatus
###
#   - Synopsis:
#       Return workspaces informations concerning global variable and definitions
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
    local _center="$(_t4dPromptCenterSpace '45' | sed 's|-||g')"
    echo "${pgreen}"
    echo "${_center}                          _.-^-._    .--."
    echo "${_center}                       .-'   _   '-. |__|"
    echo "${_center}Gik Workspace info    /     |_|     \|  |"
    echo "${_center}                     /               \  |"
    echo "${_center}                    /|     _____     |\ |"
    echo "${_center}                     |    |==|==|    |  |"
    echo "${_center} |---|---|---|---|---|    |--|--|    |  |"
    echo "${_center} |---|---|---|---|---|    |==|==|    |  |"
    echo "${_center}^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
    echo "${pstd}"
    echo "${pigreen}"
    echo "Old MacDonald had a farm,"
    echo "Ee-i-ee-i-o,"
    echo "And on this farm he had a duck,"
    echo "Ee-i-ee-i-o,"
    echo "${pstd}"
    _t4dPromptInfo "User" "$USER" 20
    _t4dPromptInfo "OS Type" "$(uname -s)" 20
    echo ""
    _t4dPromptInfo "Tools4Dev_PATH" ${Tools4Dev_PATH} 20
    _t4dPromptInfo "Tools4Dev Version" "$(t4dGetVersion)" 20
    
    
    
    # _t4dPromptInfo "Remote" "${pyellow}$(_t4dFindDataInXML "remote" "origin" "fetch" "$WS_ROOT/manifest")${pstd}" 17
    # _t4dPromptInfo "Projects" "$(_t4dFindTypeInXML "project" "$WS_ROOT/manifest" | tr '\n' ' ' | sed "s/ / \\${pblue}|\\${pstd} /g")" 17
    # echo ""
    _t4dPromptInfo "Branch" " " 17
    echo "      From   ${plblue}$(_t4dSrcGitInfoBranch)${pstd}  to  ${plyellow}$(_t4dFindDataInXML "default" "default" "revision" "$WS_ROOT/manifest")${pstd}"
    echo ""
    echo ""
    for _Var in $(set | grep '^WS' | cut -d '=' -f1); do
        _t4dPromptInfo "$_Var" "$(echo $(eval "echo \$$_Var"))" 35
    done
    echo "${pigreen}"
    echo "With a quack-quack here, and a quack-quack there,"
    echo "Here a quack, there a quack, everywhere a quack-quack;"
    echo "Old MacDonald had a farm,"
    echo "Ee-i-ee-i-o."
    echo "${pstd}"
}

_t4dModGikGlobalStatus(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dModGikGlobalStatus" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dModGikGlobalStatus
#   - Name:
#       _t4dModGikGlobalStatus
###
#   - Synopsis:
#       Return a global Workspace related status ->    commitSha7 RepoName BranchName
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local CHPWD=1
    local res=''
    local _GikProjects="$1"
    local _MaxSize="$(_t4dVarGetMaxSize $(echo $_GikProjects))"
    

    echo "" > "$T4D_PROJECT_LOG_PATH/.gikStatus"
    cd $WS_ROOT
    _t4dPromptSquare "$(basename "$WS_ROOT")" "${plgreen}"
    res="$(_t4dSrcGitStatusConsole "$(git status -s 2>/dev/null)")"
    [[ "$res" != "" ]] && _t4dSrcGitStatusHuman $res
    
    _t4dPromptLineChar "^" "$pgreen"
    for _project in $(echo $_GikProjects); do
        if [[ -d $WS_ROOT/$_project ]]; then
            cd "$WS_ROOT/$_project"
            local _manifestBranchName="$(_t4dManifestXmlGetData "project" path "$_project" "revision" "$WS_ROOT/manifest")"
            local _lock="$(_t4dManifestXmlGetData "project" path "$_project" "lock" "$WS_ROOT/manifest")"
            local _branchName="$(_t4dSrcGitInfoBranch)"
            local _branchPrefix=""
            if [[ "$_lock" == "true" ]] && [[ "$_branchName" != "$_manifestBranchName" ]]; then 
                _t4dDebugLog $pwarning "$_project is locked and his branch is different from manifest ($_manifestBranchName)"
                _branchPrefix=" ${pemwarning}"
            elif [[ "$_lock" == "true" ]]; then 
                _branchPrefix=" ${pemlock}"
            elif [[ "$_branchName" != "$_manifestBranchName" ]]; then 
                _branchPrefix=" ${plgrey}${pemarrow}${pstd}"
            fi
            local _branchName="$(_t4dSrcGitInfoBranchStatus false)"
            local _sha7="$(_t4dSrcGitInfoSha7)"
            _t4dSrcGitStatusBranch "$_project" "${_branchPrefix}${_branchName}" "${_sha7}" "$_MaxSize"
            unset _branchName _sha7 _branchPrefix _lock
            res="$(_t4dSrcGitStatusConsole "$(git status -s 2>/dev/null)" "${_project}" | tee -a "$T4D_PROJECT_LOG_PATH/.gikStatus")"
            if [[ "$res" != "" ]]; then
                _t4dSrcGitStatusHuman $res
            fi
        else
            _t4dPromptError "313" "$_project Directory Not Found : wks clone ?"
            _t4dGikError="313"
        fi
        cd $WS_ROOT
    done

###############################
_t4dDebugInfoEnd "_t4dModGikGlobalStatus" "$@"
}

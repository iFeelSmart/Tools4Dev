#### MODULE HEADER BLOC
# Generated From $Tools4Dev_PATH/Templates/function.env
# This documentation will be read and compile for man usage, MarkDown file and shell documentation
# v1.2
#
#   - Name:
#       gik
###
#   - Usage:
#       gik <Options>
###
#   - Description:
#       Gik is multi repository oriented. This module will help to to managed all your git command
#       Threw a manifest.xml file where information will be stored about all your git dependencies.
#       This module is useful when you want to edit multiple git repositories during a single task
#       Or feature. For example you can have both Back and Front in the same workspace, edit  them
#       and compile your code dynamicaly.
###
#   - Commands:
#       Will Be Generated Automatically
###
#   - Examples :
#       Some examples of common usage.
###
#   - Keyword :
#       Gik Multiple Repo Manifest
#       
###
#   - Prefix:
#       _t4dModGik
###
#   - Error Code:
#       310
###
#   - See Also :
#       Git
###
#   - Supported Platform:
#       * OSX ( 10.12.6 or higher )
#       * Fedora ( 25 or higher )
###
#   - Author(s):
#       - Quentin NIO
#
###
#### HEADER BLOC ####

source $T4D_SOURCE_PATH/Git/_main_.env
source $T4D_MODULES_PATH/gik/gik-info.env
source $T4D_MODULES_PATH/gik/gik-utils.env
source $T4D_MODULES_PATH/gik/gik-completions.env
source $T4D_MODULES_PATH/gik/gik-commit.env

T4D_GIK_FORCE="false"

alias giks='gik global-status'
alias popol='gik spull'

alias gikb='gik branch-status'
alias gikf='gik folder'
alias gika='gik all git'
alias gikac='gik all git checkout'
alias gikc='gik checkout'

gik(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "gik" "$#" "$@"
#cat &>/dev/null << EOF
###### gik
#   - Name:
#       gik
###
#   - Synopsis:
#       Module used to manager several git projects through one command interface
###
#   - Definition:
#       Gik is a CommandLineTools utility that allow dev to use several Git projects as a unique project. 
#       Moreover, it allows to quickly test low level lib modification on a highlevel project.
#       Gik want to increase flexiblity between projects
#       
#       Gik stay close to git and use manifest.xml in order to clone and manage several git repositories.
#       
#       When you use several projects at a time you will have to make some adjustement depending on your project.
#       There is 2 different behaviour that you need to have in mind :
#
#       * Custom Option
#           commit or push option for gik are quite different because you need ability to commit in several projects in one command.
#           Imagine that ou are fixing a bug in a high level application that need to changes file in a really low lvl libraries. 
#           Gik will allow you to create a branch one both repositories and fix a bug as a global fix.
#       * Other
#           If you need to execute quick git command directly from a global workspace.
#           Gik will launch a different command depending on what you are saying to gik
#               - Known Options         -> Execute custom gik option command
#               - It's a file           -> Go to folder where file is then execute git command
#               - A folder              -> Go to folder then execute git command
#               - Something Else        -> Execute git command on all subrepositories defined in manifest.xml file
#       
#
###
#   - Usage:
#       * gik <option>  [arguments]
#           Will execute gik command with all arguments
#       * gik help [option]
#           Show Option documentation 
###
#   - Options:
#
###
#   - Useful Alias :
#       giks   = gik status
#       gikb   = gik branch-status
#       gikf   = gik folder
#       gika   = gik all git
#       gikac  = gik all git checkout
#       gikc   = gik checkout
###
#   - Example:
#       * gika checkout             = Try to git checkout on all manifest repositories
#       * gik checkout              = Align all repositories depending on manifest information
#       * gik fpull                 = Pull on all repositories
#       * gik pull                  = Pull only repositories that are behind
#       * gik spull                 = Pull only repositories with branch different from origin
#
###
#   - Prefix:
#       _t4dModGik
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local _OLDPWD=$PWD
    local CHPWD=1
    local _doc="false"
    _t4dGikError=310
    # local _Arguments=$(_t4dParseModuleArguments)
    # local _Option=$(echo $_Arguments | cut -d ' ' -f1)
    
    cd $WS_ROOT

    _t4dModGikLogo $@

    ( set -e
        local GIK_PROJECTS="$(_t4dFindTypeInXML "project")"
        case $1 in
            status)             _t4dModGikInfoStatus            $GIK_PROJECTS               ;;
            global-status|gs)   _t4dModGikGlobalStatus          "${GIK_PROJECTS}" ${@:2}    ;;
            branch-status|bs)   _t4dModGikInfoBranchStatus      $GIK_PROJECTS               ;;
            log-status|ls)      _t4dModGikInfoLogStatus         $GIK_PROJECTS ${@:2}        ;;
            rebase)             _t4dModGikUtilsRebase           "$GIK_PROJECTS" ${@:2}      ;;
            ws)                 _t4dModGikInfoWorkspace                                     ;;
            sync)               _t4dModGikUtilsSync             $GIK_PROJECTS ${@:2}        ;;
            shasync)            _t4dModGikUtilsShaSync          $GIK_PROJECTS               ;;
            push)               _t4dModGikUtilsPush             $GIK_PROJECTS ${@:2}        ;;
            fpull)              _t4dModGikUtilsPullGlobal       $GIK_PROJECTS ${@:2}        ;;
            tag)                _t4dModGikUtilsTag              $GIK_PROJECTS ${@:2}        ;;
            pull)               _t4dModGikUtilsPull             $GIK_PROJECTS ${@:2}        ;;
            spull)              _t4dModGikUtilsPullSelect       $GIK_PROJECTS ${@:2}        ;;
            update)             _t4dModGikUtilsUpdate           $GIK_PROJECTS               ;;
            origin)             _t4dModGikEditOriginBranch      ${@:2}                      ;;
            commit)             _t4dModGikCommit -folders       $GIK_PROJECTS ${@:2}        ;;
            checkout)           _t4dModGiklUtilsCheckout        ${@:2}                      ;;
            all)                _t4dModGikUtilsFolderAction     $GIK_PROJECTS ${@:2}        ;;
            fetch)              _t4dModGikUtilsSilentFetch                                  ;;
            folder)             _t4dModGikUtilsFolderAction     "$2" ${@:3}                 ;;
            help)               _gikDoc ${@:2}                    ;;
            other)              _t4dModGikOther -safe-mode ${@:2} ;;
            *)
                _t4dModGikOther $@
            ;;
        esac

    )
    #ALL COMMAND ARE LAUNCHED IN A SUBSHELL
    #This is here to stop command at the first untracked error
    #We Also need to check the subshell output in order to identified which kind of error is sent
    if [[ "$?" == "0" ]]; then 
        _t4dGikError="0"
    else
       _t4dGikError="310" 
    fi

    cd $_OLDPWD

    return $_t4dGikError

###############################
_t4dDebugInfoEnd "gik" "$@"
}

_gik(){
    local cur prev option opts
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    option="${COMP_WORDS[1]}"
    _t4dModGikCompletions $option $prev $cur
}

_gikDoc(){
###### _gikDoc
#   - Name:
#       _gikDoc
###
#   - Synopsis:
#       Show Project Documentation
###
#   - Definition:
#       Parse project Header to show user a ready to read shell documentation
###
###### DOCUMENTATION BLOC ##### 
    local _Internal="${2:-shell}"
    local _MainContent="$(_t4dDocGetFunctionContent gik)"
    if [[ "$_Internal" == "-no-shell" ]]; then
        echo $_MainContent
    elif [[ $# -eq 1 ]] && [[ "$(_t4dDocGetOptionsList "$_MainContent" | grep "^$1")" != "" ]]; then
        local _OptionHiddenCallName="$(_t4dDocGetOptionsHiddenCall "$_MainContent" $1)"
        t4dHelp $_OptionHiddenCallName | sed "s|$_OptionHiddenCallName|gik $1|g"
    elif [[ "$1" == "" ]] || [[ "$1" == "gik" ]]; then
        _t4dModGikLogo doc
        t4dHelp -no-logo gik
    else
        t4dHelp $@
    fi
    echo ""
    echo ""
    echo ""
}

_gikTips(){
    _t4dPromptSquare "TIPS : Gik Commands" $plblue
        for _Item in $(echo $1); do
            local _FunctionDoc="$(_gikDoc $_Item -no-shell)"
            if [[ "$_FunctionDoc" != "" ]]; then
                local _Synopsis="$(_t4dDocGetSectionContent "$_FunctionDoc" "Synopsis" 2> /dev/null | sed 's|^       ||g' | sed 's| `|%%1|g' | sed 's|` |%%2|g' | sed "s|%%1| \\${plblue}|g" | sed "s|%%2|\\${pstd} |g")"
            else
                local _Synopsis=""
            fi
            _t4dPromptInfo "        ${plpurple}gik ${_Item}${pstd}" "${_Synopsis} " 40 "->"
        done
        for _Item in $(echo $2); do
            _t4dPromptInfo "        ${plpurple}${_Item}${pstd}" "$(which $_Item | grep -Eo 'aliased to.{0,100}' | sed "s|aliased to|aliased to\\${plpurple}|g")" 40 "->"
        done
}

_t4dModGikLogo(){
#   Show Great Ascii IFS logo art :p
#   Usage : _wksLogo

    local _color=$plyellow
    l1="   ######      #######    ##   ##"
    l2=" ##              ##      ##  ##  "
    l3="##    ###       ##      #####    "
    l4="##     ##      ##      ##   ##   "
    l5="  ######   ########   ##     ##  "
    if [[ "$_T4D_QUIET_MODE" == "true" ]] || [[ "$1" == "help" ]]; then
        #DoNothing
    elif [[ "$1" == "doc" ]]; then
        local _Content="${l1}%${l2}%${l3}%${l4}%${l5}"
        _t4dDocWks ${_Content} ${pliyellow}
    elif [[ "$(echo $1 | grep 'status')" != "" ]]; then
            echo "${pgreen}"
            echo ".--.    _.-^-._                                   "
            echo "    |__| .-'   _   '-.                            "
            echo "    |  |/     |_|     \        GLOBAL STATUS      "
            echo "    |  /               \                          "
            echo "    | /|     _____     |\                         "
            echo "    |  |    |==|==|    |                          $(_t4dPromptInfo "WKS_MAIN_PROJECT" ${WKS_MAIN_PROJECT:-None} 19)${pgreen}"
            echo "    |  |    |--|--|    |---|---|---|---|---|      $(_t4dPromptInfo "Tools4Dev_PATH" ${Tools4Dev_PATH} 19)${pgreen}"
            echo "    |  |    |==|==|    |---|---|---|---|---|      $(_t4dPromptInfo "WS_ROOT" ${WS_ROOT} 19)${pgreen}"
            _t4dPromptLineChar "^" "$pgreen"
    elif [[ "$1" == "other" ]]; then
            shift
            echo "${plyellow}   __,---,"
            echo '  /__|o\  )       .-\"-.     .----.""".       '
            echo '   `-\ / /       / 4 4 \    /____/ (0 )\     '
            echo '     ,) (,       \_ v _/      `--\_    /     '
            echo '    //   \\\\      //   \\\\         //   \\\\       '
            echo "   {(  ${pred}W${plyellow}  )}    ((  ${pred}K${plyellow}  ))       {{  ${pred}G${plyellow}  }}      "
            echo "${pgrey}====${plyellow}\"\"${pgrey}===${plyellow}\"\"${pgrey}======${plyellow}\"\"${pgrey}===${plyellow}\"\"${pgrey}=========${plyellow}\"\"${pgrey}===${plyellow}\"\"${pgrey}=======${plyellow}"
            echo '     |||||         |||             |||'
            echo '      |||           |               | '
            echo "       |    $2"
            echo "${pstd}"
    elif [[ "$1" == "main" ]]; then
        shift
        echo "${plyellow}   __,---,"
        echo '  /__|o\  )       .-\"-.     .----.""".       '
        echo '   `-\ / /       / 4 4 \    /____/ (0 )\     '
        echo '     ,) (,       \_ v _/      `--\_    /     '
        echo '    //   \\\\      //   \\\\         //   \\\\       '
        echo "   {(  ${pred}G${plyellow}  )}    ((  ${pred}I${plyellow}  ))       {{  ${pred}K${plyellow}  }}      "
        echo "${pgrey}====${plyellow}\"\"${pgrey}===${plyellow}\"\"${pgrey}======${plyellow}\"\"${pgrey}===${plyellow}\"\"${pgrey}=========${plyellow}\"\"${pgrey}===${plyellow}\"\"${pgrey}=======${plyellow}"
        echo '     |||||         |||             |||'
        echo '      |||           |               | '
        echo "       |    $1"
        echo "${pstd}"
    elif [[ "$1" == "-no-logo" ]]; then
        shift
        _t4dDebugLog $plog "Gik $@"
    else
        local center="$(_t4dPromptCenterSpace "${#l5}" | sed 's|-||g')"
        echo "${center}${_color} $l1 ${pstd}"
        echo "${center}${_color} $l2 ${pstd}"
        echo "${center}${_color} $l3 ${pstd}"
        echo "${center}${_color} $l4 ${pstd}"    
        echo "${center}${_color} $l5 ${pstd}" 
        echo ""
    fi
}

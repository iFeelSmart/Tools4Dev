#ERROR CODE 211

_t4dSrcGitStatusModifiedFiles(){
###### _t4dSrcGitStatus
#   Return a list of modified file in current git directories
#   Usage : _t4dSrcGitStatusModifiedFiles
#   Usage : _t4dSrcGitStatusModifiedFiles <PrefixPath>
###### DOCUMENTATION BLOC #####
    git status -s 2>/dev/null | sed "s|^.\{3\}|${1}/|g" | sed 's|^/||'
}

_t4dSrcGitStatusAfterBranchCherryPick(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dSrcGitStatusAfterBranchCherryPick
#   - Name:
#       _t4dSrcGitStatusAfterBranchCherryPick
###
#   - Synopsis:
#       Apply Branch CherryPicking then return status
###
#   - Example:
#       _t4dSrcGitStatusAfterBranchCherryPick feature/toto
###
###### DOCUMENTATION BLOC #####

    _t4dSrcGitUtilsCherryPickBranch ${1} --no-commit
    _t4dSrcGitStatus
    git cherry-pick --quit

###############################
}

_t4dSrcGitStatusConsole(){
###### _t4dSrcGitStatusConsole
#   Return git status in console mode
#   Usage : 
#       local st="$(git status -s 2>/dev/null)"
#       _t4dSrcGitStatusConsole $st [prefix]
###### DOCUMENTATION BLOC #####
    local _Prefix=""
    [[ "$2" != "" ]] && _Prefix="$2/"
    echo $1 | sed "s| M | M ${_Prefix}|g"\
            | sed "s|?? |?? ${_Prefix}|g"\
            | sed "s| D | D ${_Prefix}|g"\
            | sed "s|M  |M  ${_Prefix}|g"\
            | sed "s|R  |R  ${_Prefix}|g"\
            | sed "s|A  |A  ${_Prefix}|g"\
            | sed "s|D  |D  ${_Prefix}|g"\
            | sed "s|RM |RM ${_Prefix}|g"\
            | sed "s|MM |MM ${_Prefix}|g"\
            | sed "s|AA |AA ${_Prefix}|g"\
            | sed "s|UU |UU ${_Prefix}|g"\
            | sed "s|AD |AD ${_Prefix}|g"\
            | sed '/^$/d'
}

_t4dSrcGitStatusCommit(){
###### _t4dSrcGitStatusCommit
#   Return git to be commited status
#   Usage : 
#       local st="$(git status -s 2>/dev/null)"
#       _t4dSrcGitStatusCommit $st
###### DOCUMENTATION BLOC #####
    [[ "$( echo $1 | grep 'A  ')" != "" ]] && echo "${plgreen}$(   echo $1 | grep 'A  ' | sed 's|A  |    added  : |g')${pstd}"
    [[ "$( echo $1 | grep 'M  ')" != "" ]] && echo "${plgreen}$(   echo $1 | grep 'M  ' | sed 's|M  |    modifed: |g')${pstd}"
    [[ "$( echo $1 | grep 'D  ')" != "" ]] && echo "${plgreen}$(   echo $1 | grep 'D  ' | sed 's|D  |    deleted: |g')${pstd}"
    [[ "$( echo $1 | grep 'R  ')" != "" ]] && echo "${plgreen}$(   echo $1 | grep 'R  ' | sed 's|R  |    renamed: |g')${pstd}" 
    [[ "$( echo $1 | grep 'MM ')" != "" ]] && echo "${pyellow}$(   echo $1 | grep 'MM ' | sed 's|MM |    added then modifed: |g')${pstd}"
    [[ "$( echo $1 | grep 'RM ')" != "" ]] && echo "${pliyellow}$( echo $1 | grep 'RM ' | sed 's|RM |    renamed and modifed: |g')${pstd}"
    return 0
}

_t4dSrcGitStatusBranch(){
###### _t4dSrcGitStatusBranch
#   Return git branch Name, repository and commit sha7
#   Usage : 
#       _t4dSrcGitStatusBranch <Folder name> <Branch> <sha7>
###### DOCUMENTATION BLOC #####
    local _folderName="$1"
    local _branchName="$2"
    local _sha7="$3"
    local _space="${4:-'17'}"
    echo "${plblue}${_sha7}${pstd} ${plpurple}$(_t4dPromptVarWithSpaceAtEnd $_space "$_folderName" | sed 's|%||g')${pstd}${_branchName}"
}

_t4dSrcGitStatusBranchOLD(){
###### _t4dSrcGitStatusBranch
#   Return git branch Name, repository and commit sha7
#   Usage : 
#       _t4dSrcGitStatusBranch
#       _t4dSrcGitStatusBranch <Folder name> <Branch> <sha7>
###### DOCUMENTATION BLOC #####
    local _folderName="$1"
    local _branchName="$2"
    local _sha7="$3"
    echo "${plpurple}$(_t4dPromptVarWithSpaceAtEnd 17 "$_folderName" | sed 's|%||g')${pstd} ${plyellow}(${_branchName})${pstd} -> ${plgreen}${_sha7}${pstd}"
}

_t4dSrcGitStatusCommits(){
###### _t4dSrcGitStatusBranch
#   Return git emoji + commits amount
#   Usage : 
#       _t4dSrcGitStatusCommits <git status> <state>
###### DOCUMENTATION BLOC #####
    local _st=$1
    local _state=$2
    local _res=""
    if [[ "$_state" == "ahead" ]]; then
        _res="$(echo "$_st" | grep 'ahead' | grep -Eo "by [0-9].{0,4}" | cut -d ' ' -f2)↑"
    elif [[ "$_state" == "behind" ]]; then
        _res="↓$(echo "$_st" | grep 'behind' | grep -Eo "by [0-9].{0,4}" | cut -d ' ' -f2)"
    elif [[ "$_state" == "diverged" ]]; then
        _res="$(echo "$_st" | grep 'and have' | cut -d ' ' -f3-5 | sed 's| and |↑↓|g')"
    fi
    echo $_res
}

_t4dSrcGitStatusCommitNoColor(){
###### _t4dSrcGitStatusCommitNoColor
#   Return git to be commited status with no colored output
#   Usage : 
#       local st="$(git status -s 2>/dev/null)"
#       _t4dSrcGitStatusCommitNoColor $st
###### DOCUMENTATION BLOC #####
    [[ "$( echo $1 | grep 'A  ')" != "" ]] && echo "$( echo $1 | grep 'A  ' | sed 's|A  |    added  : |g')"
    [[ "$( echo $1 | grep 'M  ')" != "" ]] && echo "$( echo $1 | grep 'M  ' | sed 's|M  |    modifed: |g')"
    [[ "$( echo $1 | grep 'D  ')" != "" ]] && echo "$( echo $1 | grep 'D  ' | sed 's|D  |    deleted: |g')"
    [[ "$( echo $1 | grep 'R  ')" != "" ]] && echo "$( echo $1 | grep 'R  ' | sed 's|R  |    renamed: |g')" 
    [[ "$( echo $1 | grep 'MM ')" != "" ]] && echo "$( echo $1 | grep 'MM ' | sed 's|MM |    added then modifed: |g')"
    [[ "$( echo $1 | grep 'RM ')" != "" ]] && echo "$( echo $1 | grep 'RM ' | sed 's|RM |    renamed and modifed: |g')"
}

_t4dSrcGitStatusHuman(){
###### _t4dSrcGitStatusHuman
#   Return global and colored git status
#   Usage : 
#       local st="$(git status -s 2>/dev/null)"
#       _t4dSrcGitStatusHuman $st [prefix]
###### DOCUMENTATION BLOC #####
    local _ToBeCommited='false'
    local _ToBeCommitedA='false'
    local _ToBeCommitedM='false'
    local _ToBeCommitedD='false'
    local _ToBeCommitedR='false'

    local _ToBeCommitedModifiedSince='false'
    local _ToBeCommitedModifiedSinceMM='false'
    local _ToBeCommitedModifiedSinceAD='false'
    local _ToBeCommitedModifiedSinceRM='false'

    local _NotStagedForCommit='false'
    local _NotStagedForCommitM='false'
    local _NotStagedForCommitD='false'
    local _NotStagedForCommitR='false'

    local _Unmmerged='false'
    local _UnmmergedUU='false'
    local _UnmmergedUD='false'
    local _UnmmergedDD='false'
    local _UnmmergedAA='false'
    local _UnmmergedDU='false'
    local _UnmmergedAU='false'
    local _UnmmergedUA='false'

    local _Untracked='false'
    
    [[ "$( echo $1 | grep 'A  ')" != "" ]] && _ToBeCommited='true' && _ToBeCommitedA='true'
    [[ "$( echo $1 | grep 'M  ')" != "" ]] && _ToBeCommited='true' && _ToBeCommitedM='true'
    [[ "$( echo $1 | grep 'D  ')" != "" ]] && _ToBeCommited='true' && _ToBeCommitedD='true'
    [[ "$( echo $1 | grep 'R  ')" != "" ]] && _ToBeCommited='true' && _ToBeCommitedR='true'

    [[ "$( echo $1 | grep 'MM ')" != "" ]] && _ToBeCommitedModifiedSince='true' && _ToBeCommitedModifiedSinceMM='true'
    [[ "$( echo $1 | grep 'AD ')" != "" ]] && _ToBeCommitedModifiedSince='true' && _ToBeCommitedModifiedSinceAD='true'
    [[ "$( echo $1 | grep 'AM ')" != "" ]] && _ToBeCommitedModifiedSince='true' && _ToBeCommitedModifiedSinceAM='true'
    [[ "$( echo $1 | grep 'RM ')" != "" ]] && _ToBeCommitedModifiedSince='true' && _ToBeCommitedModifiedSinceRM='true'

    [[ "$( echo $1 | grep ' M ')" != "" ]] && _NotStagedForCommit='true' && _NotStagedForCommitM='true'
    [[ "$( echo $1 | grep ' D ')" != "" ]] && _NotStagedForCommit='true' && _NotStagedForCommitD='true'
    [[ "$( echo $1 | grep ' R ')" != "" ]] && _NotStagedForCommit='true' && _NotStagedForCommitR='true'

    [[ "$( echo $1 | grep 'UU ')" != "" ]] && _Unmmerged='true' && _UnmmergedUU='true'
    [[ "$( echo $1 | grep 'UD ')" != "" ]] && _Unmmerged='true' && _UnmmergedUD='true'
    [[ "$( echo $1 | grep 'DD ')" != "" ]] && _Unmmerged='true' && _UnmmergedDD='true'
    [[ "$( echo $1 | grep 'AA ')" != "" ]] && _Unmmerged='true' && _UnmmergedAA='true'
    [[ "$( echo $1 | grep 'DU ')" != "" ]] && _Unmmerged='true' && _UnmmergedDU='true'
    [[ "$( echo $1 | grep 'AU ')" != "" ]] && _Unmmerged='true' && _UnmmergedAU='true'
    [[ "$( echo $1 | grep 'UA ')" != "" ]] && _Unmmerged='true' && _UnmmergedUA='true'
    
    [[ "$( echo $1 | grep '?? ')" != "" ]] && _Untracked='true'


    if [[ "$_ToBeCommited" == "true" ]]; then
        echo "Changes to be committed:"
        [[ "$_ToBeCommitedA" == true ]] && echo "${plgreen}$( echo $1 | grep 'A  ' | sed 's|A  |    added  : |g')${pstd}"
        [[ "$_ToBeCommitedM" == true ]] && echo "${plgreen}$( echo $1 | grep 'M  ' | sed 's|M  |    modifed: |g')${pstd}"
        [[ "$_ToBeCommitedD" == true ]] && echo "${plgreen}$( echo $1 | grep 'D  ' | sed 's|D  |    deleted: |g')${pstd}"
        [[ "$_ToBeCommitedR" == true ]] && echo "${plgreen}$( echo $1 | grep 'R  ' | sed 's|R  |    renamed: |g')${pstd}"
        echo ""
    fi

    if [[ "${_ToBeCommitedModifiedSince}" == "true" ]]; then
        echo "Changes to be committed BUT MODIFIED SINCE:"
        [[ "$_ToBeCommitedModifiedSinceMM" == true ]] && echo "${pyellow}$(   echo $1 | grep 'MM ' | sed 's|MM |    added then modifed:  |g')${pstd}"
        [[ "$_ToBeCommitedModifiedSinceAD" == true ]] && echo "${pliyellow}$( echo $1 | grep 'AD ' | sed 's|AD |    added then deleted:  |g')${pstd}"
        [[ "$_ToBeCommitedModifiedSinceAM" == true ]] && echo "${pliyellow}$( echo $1 | grep 'AM ' | sed 's|AM |    added then modified: |g')${pstd}"
        [[ "$_ToBeCommitedModifiedSinceRM" == true ]] && echo "${pliyellow}$( echo $1 | grep 'RM ' | sed 's|RM |    renamed and modifed: |g')${pstd}"
        echo ""
    fi

    if [[ "${_NotStagedForCommit}" == "true" ]]; then
        echo "Changes not staged for commit:"
        [[ "$_NotStagedForCommitM" == true ]] && echo "${pred}$(   echo $1 | grep ' M ' | sed 's| M |    modifed: |g')${pstd}"
        [[ "$_NotStagedForCommitD" == true ]] && echo "${plred}$(  echo $1 | grep ' D ' | sed 's| D |    deleted: |g')${pstd}"
        [[ "$_NotStagedForCommitR" == true ]] && echo "${plired}$( echo $1 | grep ' R ' | sed 's| R |    renamed: |g')${pstd}"
        echo ""
    fi

    if [[ "${_Unmmerged}" == "true" ]]; then
        echo "Unmerged :"
        [[ "$_UnmmergedUU" == true ]] && echo "${pllyellow}$( echo $1 | grep 'UU ' | sed 's|UU |    both modified: |g')${pstd}"
        [[ "$_UnmmergedUD" == true ]] && echo "${pllyellow}$( echo $1 | grep 'UD ' | sed 's|UD |    deleted by them: |g')${pstd}"
        [[ "$_UnmmergedDD" == true ]] && echo "${pllyellow}$( echo $1 | grep 'DD ' | sed 's|DD |    both deleted: |g')${pstd}"
        [[ "$_UnmmergedAA" == true ]] && echo "${pllyellow}$( echo $1 | grep 'AA ' | sed 's|AA |    both added: |g')${pstd}"
        [[ "$_UnmmergedDU" == true ]] && echo "${pllyellow}$( echo $1 | grep 'DU ' | sed 's|DU |    deleted by us: |g')${pstd}"
        [[ "$_UnmmergedAU" == true ]] && echo "${pllyellow}$( echo $1 | grep 'AU ' | sed 's|AU |    added by us: |g')${pstd}"
        [[ "$_UnmmergedUA" == true ]] && echo "${pllyellow}$( echo $1 | grep 'UA ' | sed 's|UA |    added by them: |g')${pstd}"
        echo ""
    fi

    if [[ "${_Untracked}" == "true" ]]; then
        echo "Untracked files:"
        echo "${ppurple}$( echo $1 | grep '?? ' | sed 's|?? |    added  : |g')${pstd}"
        echo ""
    fi
}
_t4dSrcGitInfoBranch(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dSrcGitInfoBranch
#   - Name:
#       _t4dSrcGitInfoBranch
###
#   - Synopsis:
#       return revision info, git branch, sha7 or tag
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    git branch | grep '^*' | sed 's|* ||'
###############################
}

_t4dSrcGitInfoRevision(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dSrcGitInfoRevision
#   - Name:
#       _t4dSrcGitInfoRevision
###
#   - Synopsis:
#       return revision info, git branch, sha7 or tag
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    _t4dSrcGitInfoBranch | sed 's|(HEAD detached at ||g' | sed 's|).*||g'

###############################
}

_t4dSrcGitInfoSha7BranchName(){
###### _t4dSrcGitInfoBranch
#   Return branch name or commit sha if HEAD detached
#   Usage : _t4dSrcGitInfoBranch
###### DOCUMENTATION BLOC #####

    local _Branch="$(git branch | grep '^*' | sed 's|* ||')"
    local _Sha7Branch="$(git log --oneline -1 --decorate=full | grep -Eo 'refs/remotes/origin/.*' | cut -d ' ' -f1 | sed 's|,||g' | sed 's|(||g' | sed 's|refs/remotes/origin/||g')"
    if [[ "$(echo $_Branch | grep 'detached ')" != "" ]] && [[ "$_Sha7Branch" != "" ]]; then
        _Res="$_Sha7Branch"
    else
        _Res="$_Branch"
    fi
    echo $_Res
}

_t4dSrcGitInfoLastTagSha7(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcGitInfoLastTagSha7
#   - Name:
#       _t4dSrcGitInfoLastTagSha7
###
#   - Synopsis:
#       return last sha7 in log containing tag
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    # local _t4dErrorCode=1
    git log --oneline -1 --tags | cut -d ' ' -f1

###############################
}

_t4dSrcGitInfoListPrMerged(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcGitInfoListPrMerged
#   - Name:
#       _t4dSrcGitInfoListPrMerged
###
#   - Synopsis:
#       check log for Merge commit between given sha and HEAD
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    # local _t4dErrorCode=1
    local _Base="$1"
    local _Version="${2:-HEAD}"
    local _PullRequestGitLog="${WS_MERGE_REQUEST_CUSTOM_LOG:-"ull request #"}"
    _t4dSrcGitInfoLogFromBranch $_Base $_Version | grep "$_PullRequestGitLog" || true

###############################
}


_t4dSrcGitInfoGetLocalBranches(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dSrcGitInfoGetLocalBranches
#   - Name:
#       _t4dSrcGitInfoGetLocalBranches
###
#   - Synopsis:
#       Return List of all available local branch 
###
#   - Usage:
#       _t4dSrcGitInfoGetLocalBranches 
###
###### DOCUMENTATION BLOC #####

    git branch | sed 's| ||g' | sed 's|*||g'

############################### 
    
}

_t4dSrcGitInfoSha(){
###### _t4dSrcGitInfoSha
#   Return commit sha
#   Usage : _t4dSrcGitInfoSha
###### DOCUMENTATION BLOC #####
    git log $1 | head -1 | cut -d ' ' -f2
}


_t4dSrcGitInfoSha7(){
# Generated From $Tools4Dev_PATH/Templates/function.env
_t4dDebugInfoStart "_t4dSrcGitInfoSha7" "$#" "$@"
#
###### _t4dSrcGitInfoSha7
#
#   Definition:
#       Return Sha7 from current git repository
#
#   Usage :
#       _t4dSrcGitInfoSha7
#
###### DOCUMENTATION BLOC #####
#
###############################


    echo "${$(git log | head -1 | cut -d ' ' -f2):0:7}"

    

###############################
_t4dDebugInfoEnd "_t4dSrcGitInfoSha7" "$@"
}

_t4dSrcGitInfoRepoSha7(){
# Generated From $Tools4Dev_PATH/Templates/function.env
###### _t4dSrcGitInfoRepoSha7
#
#   Definition:
#       Return Sha7 from target git repository
#
#   Usage :
#       _t4dSrcGitInfoRepoSha7 <Folder>
#
###### DOCUMENTATION BLOC #####
###############################
    local CHPWD=1
    local _OLDPWD=$PWD
    cd $1
    echo "${$(git log | head -1 | cut -d ' ' -f2):0:7}"
    cd $_OLDPWD

###############################
}

_t4dSrcGitInfoCommitersEmail(){
# Generated From $Tools4Dev_PATH/Templates/function.env
_t4dDebugInfoStart "_t4dSrcGitInfoCommitersEmail" "$#" "$@"
#
###### _t4dSrcGitInfoCommitersEmail
#
#   Definition:
#       Return last commiter email 
#
#   Usage :
#       _t4dSrcGitInfoCommitersEmail
#
###### DOCUMENTATION BLOC #####
#
###############################


    echo "$(git log -1 --format='%ae')"

###############################
_t4dDebugInfoEnd "_t4dSrcGitInfoSha7" "$@"
}



_t4dSrcGitInfoGetMergeBase(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dSrcGitInfoGetMergeBase
#   - Name:
#       _t4dSrcGitInfoGetMergeBase
###
#   - Synopsis:
#       Return youngest common commit id between 2 sha7 or HEAD
###
#   - Usage:
#       _t4dSrcGitInfoGetMergeBase <Origin> <Current>
###
###### DOCUMENTATION BLOC #####
    local _Base="$1"
    local _Target="$2"


    if [[ "$(_t4dSrcGitInfoBranch | grep 'HEAD detached at')" != "" ]]; then
        git merge-base $_Base $_Target
    elif [[ "$(_t4dSrcGitInfoGetHEADType "${_Base}")" == "unknown" ]]; then
        _t4dDebugLog $perror "No any branch, commit or tag : $_Base in $(basename $PWD)"
        return 210
    elif [[ "$(_t4dSrcGitInfoGetHEADType "${_Target}")" == "unknown" ]]; then
        _t4dDebugLog $perror "No any branch, commit or tag : $_Target in $(basename $PWD)"
        return 210
    else
        git merge-base $_Base $_Target
    fi

############################### 
}

_t4dSrcGitInfoGetCloneUrl(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dSrcGitInfoGetUrl
#   - Name:
#       _t4dSrcGitInfoGetUrl
###
#   - Synopsis:
#       Return clone url that has been used
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    git config --get remote.origin.url

###############################
}

_t4dSrcGitInfoGetHEADType(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dSrcGitInfoGetHeadType
#   - Name:
#       _t4dSrcGitInfoGetHeadType
###
#   - Synopsis:
#       Return branch, commit or tag depending of HEAD content.
###
#   - Usage:
#       _t4dSrcGitInfoGetHeadType <BranchName>
#       _t4dSrcGitInfoGetHeadType <Tag>
#       _t4dSrcGitInfoGetHeadType <Sha7>
###
###### DOCUMENTATION BLOC #####
    local _HEAD="${1:-$(_t4dSrcGitInfoBranch)}"
    local _LocalBranchList="$(_t4dSrcGitInfoGetLocalBranches)"
    local _Sha="$(echo $_HEAD | sed 's|(HEAD detached at ||g' | sed 's|)$||g')"
    local _GitShaPrint="$(git cat-file -t ${_Sha} 2>&1)"

    if [[ "$(echo $_LocalBranchList | grep "^${_HEAD}$")" != "" ]]; then
        echo "branch"
    elif [[ "$(echo $_GitShaPrint | grep 'fatal')" == "" ]]; then
        echo "$_GitShaPrint"
    else
        echo "unknown"     
    fi

############################### 
}

_t4dSrcGitInfoLogFromBranch(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dSrcGitInfoLogFromBranch
#   - Name:
#       _t4dSrcGitInfoLogFromBranch
###
#   - Synopsis:
#       Return Log diff from origin to current.
###
#   - Usage:
#       _t4dSrcGitInfoLogFromBranch <Origin> <Current>
###
###### DOCUMENTATION BLOC #####

    local _Log="$(git log --oneline ${1}..${2})"
    if [[ "$_Log" != "" ]]; then
        echo "$_Log"
    fi

###############################
}

_t4dSrcGitUtilsBusyGit(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dSrcGitUtilsBusyGit" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dSrcGitUtilsBusyGit
#   - Name:
#       _t4dSrcGitUtilsBusyGit
###
#   - Synopsis:
#       Return false if git folder is not currently on a complexe git action
###
#   - Usage:
#       _t4dSrcGitUtilsBusyGit
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

      if [[ -f ".git/MERGE_HEAD" ]]                           ; then echo 'MERGE_HEAD'
    elif [[ -f ".git/REVERT_HEAD" ]]                          ; then echo 'REVERT_HEAD'
    elif [[ -f ".git/BISECT_LOG" ]]                           ; then echo 'BISECT_LOG'
    elif [[ -f ".git/sequencer" ]]                            ; then echo 'sequencer'
    elif [[ -f ".git/CHERRY_PICK_HEAD" ]]                     ; then echo 'CHERRY_PICK_HEAD'
    elif [[ -d ".git/rebase-apply" ]]                         ; then echo 'REBASE_APPLY'
    elif [[ -d ".git/rebase-merge" ]]                         ; then echo 'REBASE_MERGE'
    elif [[ "$(git diff --name-only --diff-filter=U)" != "" ]]; then echo "CONFLICTS"
    else
        echo "false"
    fi

###############################
_t4dDebugInfoEnd "_t4dSrcGitUtilsBusyGit" "$@"
}


_t4dSrcGitUtilsDirtyGit(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcGitUtilsDirtyGit
#   - Name:
#       _t4dSrcGitUtilsDirtyGit
###
#   - Synopsis:
#       Return true/false depending git repo statement
###
#   - Definition:
#       Return true if git branch is up-to-date or behind
#           And git status -s return nothing
#       Return false if git branch is ahead diverged or local
#           Or git status -s is not empty
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _state="$(_t4dSrcGitInfoBranchState)"
    local _status="$(git status -s)"

    if [[ "$_state" == "ahead" ]] || [[ "$_state" == "diverged" ]] || [[ "$_state" == "local" ]]; then
        echo "false"
    else
        if [[ "$_status" != "" ]]; then
            echo "false"
        else
            echo "true"
        fi
            
    fi  

###############################
}

_t4dSrcGitUtilsRepoNotDirtyGit(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcGitUtilsRepoNotDirtyGit
#   - Name:
#       _t4dSrcGitUtilsRepoNotDirtyGit
###
#   - Synopsis:
#       Return true/false depending git repo statement
###
#   - Definition:
#       Return true if git branch is up-to-date or behind
#           And git status -s return nothing
#       Return false if git branch is ahead diverged or local
#           Or git status -s is not empty
#
###
#   - Usage:
#       * _t4dSrcGitUtilsRepoNotDirtyGit  [path]        = cd `path` then check if git repo is up-to-date and clean
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local CHPWD=1
    local _state _status
    local _path="${1:-null}"
    local _OLDPWD="$PWD"

    if [[ -d "$_path" ]]; then
        cd $_path
    fi

    _state="$(_t4dSrcGitInfoBranchState)"
    _status="$(git status -s)"

    if [[ "$_state" == "ahead" ]] || [[ "$_state" == "diverged" ]] || [[ "$_state" == "local" ]]; then
        echo "false"
    else
        if [[ "$_status" != "" ]]; then
            echo "false"
        else
            echo "true"
        fi
            
    fi  
    cd $_OLDPWD

###############################
}

_t4dSrcGitInfoListCommit(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dSrcGitInfoListCommit
#   - Name:
#       _t4dSrcGitInfoListCommit
###
#   - Synopsis:
#       List All commits between 2 Branches
###
#   - Example:
#       _t4dSrcGitInfoListCommit origin HEAD
###
###### DOCUMENTATION BLOC #####


local _originBranch="${1}"
local _currentBranch="${2:-HEAD}"

local COMMITS=$(git rev-list --reverse --topo-order ${_originBranch}..${_currentBranch})

echo $COMMITS

###############################
}

_t4dSrcGitInfoListRemotesBranch(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dSrcGitUtilsDirtyGit" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dSrcGitInfoListRemotesBranch
#   - Name:
#       _t4dSrcGitInfoListRemotesBranch
###
#   - Synopsis:
#       List All Remotes Branch
###
#   - Usage:
#       _t4dSrcGitInfoListRemotesBranch [-fetch]
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
    if [[ "${1:-none}" == "-fetch" ]]; then
        git fetch 2> /dev/null
    fi
    git branch -a | grep 'remotes/origin' | grep -v 'HEAD' | sed 's|remotes/origin/||g' | sed 's| ||g' 

###############################
_t4dDebugInfoEnd "_t4dFunctionName" "$@"
}



_t4dSrcGitInfoBranchState(){
###### _t4dSrcGitInfoBranchState
#   Return branch state
#       ahead || diverged || up-to-date || behind || local || up to date
#   Usage : _t4dSrcGitInfoBranchState
###### DOCUMENTATION BLOC #####
    local _st="$(git status 2>/dev/null)"
    if [[ $_st =~ 'Your branch is' ]]; then
        if [[ $_st =~ 'ahead' ]]; then
            echo 'ahead'
        elif [[ $_st =~ 'up-to-date' ]]; then
            #Obsolete since Git v2.15.1
            echo 'up-to-date'
        elif [[ $_st =~ 'up to date' ]]; then
            echo 'up-to-date'
        else
            echo 'behind'
        fi
    elif [[ $_st =~ 'Your branch and' ]]; then
        if [[ $_st =~ 'diverged' ]]; then
            echo 'diverged'
        fi
    else
        echo 'local'
    fi
}

_t4dSrcGitInfoLastFetch(){
    if [[ -e $T4D_PROJECT_LOG_PATH/.fetchLog ]]; then
        tail -n+1 $T4D_PROJECT_LOG_PATH/.fetchLog | head -1 | cut -d '|' -f2
    fi
}

_t4dSrcGitInfoLastCommitMessage(){
###### _t4dSrcGitInfoLastCommitMessage
#   Return last commit title
#   Usage : _t4dGitLastCommitMessage
###### DOCUMENTATION BLOC #####
    git show -s --format=%s $@
}

_t4dSrcGitInfoRepoName(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcGitInfoRepoName
#   - Name:
#       _t4dSrcGitInfoRepoName
###
#   - Synopsis:
#       if git repostory return his basename url, instead it will use arg1 or pwd
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _GitRemoteUrl="$(_t4dSrcGitInfoGetCloneUrl)"
    local _DefaultRootPath="${1:-$PWD}"
    if [[ "$_GitRemoteUrl" != "" ]]; then
        basename -s .git "$_GitRemoteUrl"
    else
        _t4dDebugLog $pwarning "Not a git repostory, using $_DefaultRootPath as default value"
        basename $_DefaultRootPath
    fi

###############################
}

_t4dSrcGitInfoRootPath(){
###### _t4dSrcGitInfoRootPath
#   Return git repository Path
#   Usage : _t4dSrcGitInfoRootPath
###### DOCUMENTATION BLOC #####
    basename $(git rev-parse --show-toplevel)
}

_t4dSrcGitInfoRelativeRootPath(){
###### _t4dSrcGitInfoRelativeRootPath
#   Return git repository Relative Path
#   Usage : _t4dSrcGitInfoRelativeRootPath
###### DOCUMENTATION BLOC #####
     git rev-parse --show-cdup
}

_t4dSrcGitInfoProjectKEY(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcGitInfoProjectKEY
#   - Name:
#       _t4dSrcGitInfoProjectKEY
###
#   - Synopsis:
#       return git project key
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _url="$(_t4dSrcGitInfoGetCloneUrl)"
    echo "$(dirname $(_t4dSrcGitInfoGetAbsolutePath $_url))"
###############################
}


_t4dSrcGitInfoGetAbsolutePath(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcGitInfoGetPath
#   - Name:
#       _t4dSrcGitInfoGetPath
###
#   - Synopsis:
#       parse given git url to return only git structure
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _gitUrl="${1:-$(_t4dSrcGitInfoGetCloneUrl)}"
    echo $_gitUrl  | sed "s|://||g" | sed 's|:|/|g' | sed 's|/[0-9]||g' | grep -Eo "/.*" | sed 's|^/||g'| sed 's|.git$||g' | sed 's|^scm/||g'

###############################
}

_t4dSrcGitInfoShaFromTag(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
###### _t4dSrcGitInfoShaFromTag
#   - Name:
#       _t4dSrcGitInfoShaFromTag
###
#   - Synopsis:
#       Return Commit Sha7 from given tag
###
#   - Example:
#       _t4dSrcGitInfoShaFromTag 3.12.5-previewDelivery
###
###### DOCUMENTATION BLOC #####

    git rev-list -n 1 "$1" | grep -Eo '^.{0,7}'
###############################
}

_t4dSrcGitInfoGetPRMerged(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dSrcGitInfoGetPRMerged" "$#" "$@"
###### _t4dSrcGitInfoGetPRMerged
#   - Name:
#       _t4dSrcGitInfoGetPRMerged
###
#   - Synopsis:
#       Return Commit Sha7 from given tag
###
#   - Example:
#       _t4dSrcGitInfoGetPRMerged 3.12.5-previewDelivery HEAD
###
###### DOCUMENTATION BLOC #####

    local version="${1:-HEAD}"
    local base="${2:-HEAD}"
    local _tagSha="$(_t4dSrcGitInfoShaFromTag $version)"
    local _Commit=""
    if [[ "$_tagSha" != "" ]] && [[ "$(git log -2000 | grep "$_tagSha")" != "" ]]; then
        local log="$(git log $base $version -2000 --oneline | grep -B2000 "$_tagSha")"
        local pullRequestMerged="$(echo $log | grep 'Merge pull request')"
        echo "$pullRequestMerged"
    else
        _t4dDebugLog $perror "Tag or Commit $version can't be found in history"
        return 1
    fi


###############################
_t4dDebugInfoEnd "_t4dSrcGitInfoGetPRMerged" "$@"
}

_t4dSrcGitInfoBranchLog(){
# Generated From Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dSrcGitInfoBranchLog
#   - Name:
#       _t4dSrcGitInfoBranchLog
###
#   - Synopsis:
#       List current branch available locally by comitterDate
###
#   - Usage:
#       _t4dSrcGitInfoBranchLog [MaxCount]
###
#   - Example:
#       * _t4dSrcGitInfoBranchLog 
#       * _t4dSrcGitInfoBranchLog 5
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _Count="$1"
    local _res=""
    local _List="$(git for-each-ref --sort=-committerdate --format='%(HEAD)|%(objectname:short)|%(refname:short)|%(committerdate:relative)|%(authorname)|%(subject)' --count=${_Count:-10} refs/heads)"
    local _PromptSize="$(_t4dPromptSize)"
    local _BranchNameSize="$(_t4dVarGetMaxSize $(echo $_List | cut -d '|' -f3 | tr '\n' ' '))"
    local _SubjectMaxSize="$(_t4dMath $_PromptSize - ${_BranchNameSize:-0} - 30 - 10)"

    echo $_List | while read _line ; do
        local _Current="$(echo $_line | cut -d '|' -f1 | tr -d ' ' )"
        local _ObjectName="$(echo $_line | cut -d '|' -f2)"
        local _Refname="$(echo $_line | cut -d '|' -f3)"
        local _CommiterDate="$(echo $_line | cut -d '|' -f4)"
        local _Author="$(echo $_line | cut -d '|' -f5)"
        local _Subject="$(echo $_line | cut -d '|' -f6)"
        local _RefColor="$pyellow"
        if [[ "$_Current" != "" ]]; then
            _RefColor="$plyellow"
        fi
        _res="${_res}${plgreen}${_ObjectName:0:7}|${_RefColor}${_Refname}|${pstd}${_Subject:0:$_SubjectMaxSize}|${plpurple}${_Author:0:15}|${plblue}${_CommiterDate:0:15}${pstd}\n" 
    done

    echo $_res | column -ts '|'
###############################
}

_t4dSrcGitInfoBranchStatus(){

    local CHPWD=1
    local _color=""
    unset __CURRENT_GIT_BRANCH_INFO
    unset __CURRENT_GIT_BRANCH_STATUS
    unset __CURRENT_GIT_BRANCH_IS_DIRTY
    unset __CURRENT_GIT_STATE
    unset output

    if [ $# -eq 0 ]; then
        local _colorStream="$lyellow"
        local _colorLocal="$lgreen"
        local _colorDiverged="$lcyan"
        local _UnMerged="$emfire"
        local _StillMerging="$emclouds"
        local _Diff="$emlightning"
    else
        local _colorStream="$plyellow"
        local _colorLocal="$plgreen"
        local _colorDiverged="$plcyan"
        local _UnMerged="$pemfire"
        local _StillMerging="$pemclouds"
        local _Diff="$pemlightning"
    fi

    local _status="$(git status 2> /dev/null)"
    local _NOTHING_TO_COMMIT="$(echo $_status | grep 'nothing to commit')"
    __CURRENT_GIT_BRANCH_IS_DIRTY="${_NOTHING_TO_COMMIT:-0}"
    __CURRENT_GIT_BRANCH="$(echo $_status | head -1)"
    __CURRENT_GIT_BRANCH_STATUS="$(echo $_status | grep 'Your branch' || echo '')"
    if [[ "$_status" != "" ]]; then
        if [[ $__CURRENT_GIT_BRANCH =~ 'Not currently on any branch.' ]]; then
            __CURRENT_GIT_BRANCH=''
        elif [[ $__CURRENT_GIT_BRANCH =~ 'HEAD detached at' ]]; then
            __CURRENT_GIT_BRANCH="$(echo ${__CURRENT_GIT_BRANCH} | sed 's|HEAD detached at ||g')"
        else
            __CURRENT_GIT_BRANCH="$(echo ${__CURRENT_GIT_BRANCH} | sed 's|On branch ||g' | sed 's|^# ||g')"
        fi

        if [[ $__CURRENT_GIT_BRANCH_STATUS =~ 'Your branch is' ]]; then
            if [[ $__CURRENT_GIT_BRANCH_STATUS =~ 'ahead' ]]; then
                __CURRENT_GIT_BRANCH_STATUS='ahead'
            elif [[ $__CURRENT_GIT_BRANCH_STATUS =~ 'up-to-date' ]]; then
                #Obsolete since Git v2.15.1
                __CURRENT_GIT_BRANCH_STATUS='up-to-date'
            elif [[ $__CURRENT_GIT_BRANCH_STATUS =~ 'up to date' ]]; then
                __CURRENT_GIT_BRANCH_STATUS='up-to-date'
            else
                __CURRENT_GIT_BRANCH_STATUS='behind'
            fi
            _color=$_colorStream
        elif [[ $__CURRENT_GIT_BRANCH_STATUS =~ 'Your branch and' ]]; then
            if [[ $__CURRENT_GIT_BRANCH_STATUS =~ 'diverged' ]]; then
                __CURRENT_GIT_BRANCH_STATUS='diverged'
            fi
            _color=$_colorDiverged
        else
            __CURRENT_GIT_BRANCH_STATUS='local'
            _color=$_colorLocal
        fi
        if [[ "${__CURRENT_GIT_BRANCH}" != "" ]]; then
            output+=" (${__CURRENT_GIT_BRANCH})"

            case "$__CURRENT_GIT_BRANCH_STATUS" in
                ahead)
                    output+=" $(_t4dSrcGitStatusCommits $_status ahead)"
                ;;
                diverged)
                    output+=" $(_t4dSrcGitStatusCommits $_status diverged)"
                ;;
                behind)
                    output+=" $(_t4dSrcGitStatusCommits $_status behind)"
                ;;
                up-to-date)
                    output+=""
                ;;
            esac
        fi

        if [[ "$__CURRENT_GIT_BRANCH_IS_DIRTY" == "0" ]]; then
            if [[ $_status =~ 'You have unmerged paths.' ]]; then
                output+="$_UnMerged"
            elif [[ $_status =~ 'All conflicts fixed but you are still merging.' ]]; then
                output+="$_StillMerging"
            else
                output+="$_Diff"
            fi
        fi
    else
        local output=""
        local pstd=""
        local std=""
    fi
    if [ $# -eq 0 ]; then
        printf "%s" "%{$_color%}" "%{%s%}" $output $std
    else
        printf "%s%s%s" $_color $output $pstd
    fi
}

_t4dSrcGitInfoLastTagFromTag(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dSrcGitInfoLastTagFromTag
#   - Name:
#       _t4dSrcGitInfoLastTagFromTag
###
#   - Synopsis:
#       using Last tag to get previous tag before him
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _GitLastTag="${1:-$(_t4dSrcGitInfoLastTag)}"
    if [[ "$_GitLastTag" != "" ]]; then
        local _Version="$(echo $_GitLastTag | cut -d ' ' -f2)"
        local _BaseVersion="$(echo $_Version | rev | grep -Eo "\..*" | rev | sed 's|.$||g')"
        local _Patch="$(echo $_Version | cut -d '.' -f3 | cut -d '-' -f1)"
        if [[ "$_Patch" == "0" ]]; then
            local _Tags=$(git tag | grep "${WS_TAG_VERSION_SUFFIX:-X}" | sort -V)
            local _Res="$(echo $_Tags | grep -B1 "$_BaseVersion" | head -1)"
        else
            
            local _Tags="$(git tag | grep "$_BaseVersion" | sort -V)"
            local _Res="$(echo $_Tags | grep -B1 "$_Version" | head -1)"
        fi

        if [[ "$_Res" != "" ]]; then
            echo "$_Res"
        else
            _t4dDebugLog $perror "[_t4dSrcGitInfoLastTagFromTag] - No tag found before $_GitLastTag"
        fi
    else
        _t4dDebugLog "$pwarning" "[_t4dSrcGitInfoLastTagFromTag] - No tag found"
        echo ""
    fi

###############################
}

_t4dSrcGitInfoLastTag(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcGitInfoLastTag
#   - Name:
#       _t4dSrcGitInfoLastTag
###
#   - Synopsis:
#       use git describe to retreive last tag information from log
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _Sep="${1:-" "}"
    local _TagInfo="$(git describe --tags --match "${2:-$WS_TAG_VERSION_PREFIX}*" 2> /dev/null | head -1 )"
    if [[ "$_TagInfo" != "" ]]; then
        local _TagSha="$(git tag | grep "$_TagInfo" 2> /dev/null)"
        local _TagCount _TagName _TagSha7
        if [[ "$_TagSha" == "" ]]; then
            local _TagRev="$(echo $_TagInfo  | rev | grep -Eo -m 1 '\-.*' | sed 's|^-||g')"
            _TagCount="$(echo $_TagRev | cut -d '-' -f1 | rev)"
            _TagName="$(echo $_TagRev  | grep  -Eo -m 1 '\-.*'  | sed 's|^-||g' | rev)"
            _TagSha7="$(_t4dSrcGitInfoShaFromTag ${_TagName:-unknown})"
        else
            _TagCount="0"
            _TagName="$_TagInfo"
            _TagSha7="$(_t4dSrcGitInfoSha7)"
        fi
        
        echo "${_TagSha7}${_Sep}${_TagName}${_Sep}${_TagCount}"
    else
        # _t4dDebugLog "$pwarning" "[_t4dSrcGitInfoLastTag] - No tag found"
        echo ""
    fi
###############################
}

_t4dSrcGitInfoGetRemote(){
# Generated From Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dSrcGitInfoGetRemote
#   - Name:
#       _t4dSrcGitInfoGetRemote
###
#   - Synopsis:
#       get remote provider without prefix/path
###
#   - Example:
#       _t4dSrcGitInfoGetRemote "git@github.com:T4D-Suites/Tools4Dev.git"      = github.com
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _Remote="${1:-$(_t4dSrcGitInfoGetCloneUrl)}"
    case $_Remote in
        http*)
            echo "$_Remote" | sed 's|http.*//||g' | cut -d '/' -f1
        ;;
        ssh*|git@*)
            echo "$_Remote" | cut -d '@' -f2 | cut -d ':' -f1
        ;;
        *)
            _t4dDebugLog $plog "_t4dSrcGitInfoGetRemote : Unsupported clone type >$_Remote<"
        ;;
    esac
    

###############################
}



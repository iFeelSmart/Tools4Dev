_t4dSrcGitUtilsLoadCompletion(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dSrcGitUtilsLoadCompletion
#   - Name:
#       _t4dSrcGitUtilsLoadCompletion
###
#   - Synopsis:
#       load custom git completions file
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    if [[ ! -e "$HOME/.oh-my-zsh" ]]; then
        source $T4D_SOURCE_PATH/Git/git-completions.env
    else
        zstyle ':completion:*:*:git:*' script $T4D_SOURCE_PATH/Git/git-completions.zsh
    fi

###############################
}

_t4dSrcGitUtilsGetVersionSuffix(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcGitUtilsGetVersionSuffix
#   - Name:
#       _t4dSrcGitUtilsGetVersionSuffix
###
#   - Synopsis:
#       return a,b or RC depending on branch
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _branch="${1:-default}"
    local _number="${2}"
    case $_branch in 
        master)
            echo ""
        ;;
        release*)
            echo "-RC${_number}"
        ;;
        develop|main)
            echo "-beta${_number}"
        ;;
        *)
            echo "-alpha${_number}"
        ;;
    esac

###############################
}

_t4dSrcGitUtilsNormalizeCommitMessage(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcGitUtilsNormalizeCommitMessage
#   - Name:
#       _t4dSrcGitUtilsNormalizeCommitMessage
###
#   - Synopsis:
#       normalize commit message to manage git commit format
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _Type="$(echo $1 | grep '^-' | cut -d ' ' -f1)"
    local _Message="$(echo $@ | sed "s|^${_Type} ||g")"
    local _NormalizedType="$(echo $_Type | sed "s|-f|feat|g" \
                                         | sed "s|-b|fix|g" \
                                         | sed "s|-m|chore|g" \
                                         | sed "s|-r|refactor|g" \
                                         | sed "s|-ci|ci|g" \
                                         | sed "s|-p|perf|g" \
                                         | sed "s|-d|docs|g" \
                                         | sed "s|$|:|g")"
    if [[ "$_NormalizedType" == "" ]]; then
        _NormalizedType="chore:"
    fi
    echo "${_NormalizedType} ${_Message}"

###############################
}

_t4dSrcGitUtilsDuplicateBranch(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dSrcGitUtilsDuplicateBranch
#   - Name:
#       _t4dSrcGitUtilsDuplicateBranch
###
#   - Synopsis:
#       duplicate given pull request but targeting a new branch
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _LogFile="$T4D_PROJECT_LOG_PATH/git.log"
    local _OldOrigin="origin"
    local _NewOrigin=""
    local _Head=""
    local _Pull="false"
    local _Action="Status"
    local _NewBranch="false"
    local _DiffFound="false"
    # local _Projects="$1"
    local _CustomCommitMessage=""
    # shift

    while [[ "$@" != "" ]]; do
        case $1 in
            -start-from|-sf)
                _OldOrigin="$2"
                shift
            ;;
            -target|-t)
                _NewOrigin="$2"
                shift
            ;;
            -current|-b)
                _Head="$2"
                shift
            ;;
            -create-branch|-cb)
                _NewBranch="$2"
                shift
            ;;
            -pull|-p)
                _Pull="true"
            ;;
            -force|-f)
                _Action="Force"
            ;;
            -v)
                _Action="Diff"
            ;;
            -m)
                _CustomCommitMessage="$2"
                shift
            ;;
            -logfile)
                _LogFile="$2"
                shift
            ;;
            *)
                _t4dDebugLog $perror "_t4dSrcGitUtilsDuplicateBranch Unknown Argument $1"
                return 310
            ;;
            esac
        shift
    done

    cd $WS_ROOT 2> /dev/null

    if [[ "$(_t4dSrcGitUtilsDirtyGit)" != "true" ]]; then
        _t4dPromptSquare "Your repository is dirty and need to be cleaned before entering in duplicate mode" "$plred"
        _t4dDebugLog "$pwarning" "Do You Want to continue ? Enter to proceed, Ctrl+C To Abort"
        read -n
    fi

    if [[ "$_Pull" == "true" ]]; then
        _t4dDebugLog $plog "git pull"
            ( git pull ) &> $_LogFile
        rm $_LogFile 
    else
        _t4dDebugLog $plog "git checkout $_Head"
            ( git checkout $_Head  ) &> $_LogFile 
        rm $_LogFile 
    fi

    if [[ "$(_t4dSrcGitInfoGetHEADType $_OldOrigin)" == "commit" ]] || [[ "$(_t4dSrcGitInfoGetHEADType $_OldOrigin)" == "tag" ]]; then
        _t4dDebugLog $pinfo "You have selected commit ID as Old origin"
        _OldOrigin="commit"
    fi

    _t4dDebugLog $plog "Search for commit to cherry-pick"
    local _CurrentBranch="$(_t4dSrcGitInfoBranch)"
    local res=""
    local _MergeBase=""
    if [[ "$_OldOrigin" == "commit" ]]; then
        local _Origin="$(echo $_DiffFile | grep "^$_project " | rev | cut -d ' ' -f1 | rev )"
    else
        local _Origin="$_OldOrigin"
    fi
    _MergeBase="$(_t4dSrcGitInfoGetMergeBase $_Origin $_NewOrigin)"

    res="$(_t4dSrcGitInfoLogFromBranch $_Origin HEAD | grep -v 'Merge branch' | grep -v 'Merge pull request' || true)" 

    if [[ "${res}" != "" ]]; then
            _GlobalDiffFound="true" 
            case "$_Action" in 
                Diff)
                    local _CommitLists="$(echo $res | cut -d ' ' -f1 | rev | tr '\n' ' ' | rev)"
                    if [[ "$_NewBranch" != "false" ]]; then
                        echo "${plblue} $_project ($_MergeBase -> $_NewBranch) :${pstd}"
                    else
                        echo "${plblue} $_project ($_MergeBase) :${pstd}"
                    fi
                    git checkout $_MergeBase &> /dev/null
                    _t4dDebugLog "$pinfo" "git cherry-pick --allow-empty --no-commit $(echo $_CommitLists)"
                    git cherry-pick --allow-empty --no-commit $(echo $_CommitLists)  &> $_LogFile  || _CherryPickError="true"
                    # cat $_LogFile 
                    # rm $_LogFile 
                    if [[ "$_CherryPickError" == "true" ]]; then
                        _t4dDebugLog $pwarning "Conflict Found during cherry-pick"
                    fi
                    local res=$(_t4dSrcGitStatusConsole "$(git status -s 2> /dev/null)")
                    _t4dSrcGitStatusHuman ${res}
                    git cherry-pick --quit
                    git reset --hard &> /dev/null
                    git checkout $_CurrentBranch &> /dev/null

                ;;
                Force)
                    local _CommitLists="$(echo $res | cut -d ' ' -f1 | rev | tr '\n' ' ' | rev)"
                    
                    if [[ "$_NewBranch" != "false" ]]; then
                        echo "${plblue} $_project (${plpurple}${_NewBranch}${pstd}${plblue} from $_MergeBase) :${pstd}"
                        git checkout $_MergeBase &> $_LogFile
                        git checkout -b $_NewBranch
                    else
                        echo "${plblue} $_project ($_MergeBase) :${pstd}"
                        git checkout $_MergeBase &> $_LogFile
                    fi
                    _t4dDebugLog $pinfo "git cherry-pick --allow-empty $(echo $_CommitLists)"
                    git cherry-pick --allow-empty $(echo $_CommitLists)  &> $_LogFile  || _CherryPickError="true"
                    if [[ "$_CherryPickError" == "true" ]]; then
                        _t4dDebugLog $pwarning "Conflict Found during cherry-pick"
                    fi
                    
                    local res=$(_t4dSrcGitStatusConsole "$(git status -s 2> /dev/null)")
                    _t4dSrcGitStatusHuman ${res}
                ;;
                *)
                    if [[ "${res}" != "" ]]; then 
                        echo "${plblue} $_project ($_MergeBase) :${pstd}"
                        res="$(echo "$res" | sed "s|\[|\\${plyellow}[|g" | sed "s|\]|]\\${pstd}|g" \
                                        | sed "s|^|\\${pyellow}|g" | sed "s| |\\${pstd} |" \
                                        | sed "s|Merge branch|\\${pcyan}Merge branch|g")"
                        echo "$res"
                    fi
                ;;

            esac
        else
            case "$_Action" in 
                Force)
                    git checkout $_NewOrigin
                ;;

            esac
        fi 

###############################
}


_t4dSrcGitUtilsFileAction(){
###### _t4dSrcGitUtilsFileAction
#   This is used to simply add a file to be commited after a status directly from WS_ROOT
###### DOCUMENTATION BLOC #####
    local _OLDPWD=$PWD
    local CHPWD=1
    cd $WS_ROOT/$(dirname $1)
    git $(echo ${@:2}) $(basename $1)
    cd $_OLDPWD
}

_t4dSrcGitUtilsExportCommits(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dSrcGitUtilsExportCommits
#   - Name:
#       _t4dSrcGitUtilsExportCommits
###
#   - Synopsis:
#       Cherry pick between branch's origin and branch's HEAD
###
#   - Usage:
#       _t4dSrcGitUtilsExportCommits <Base> <ListOfCommits>
###
#   - Example:
#       _t4dSrcGitUtilsExportCommits feature/toto
###
###### DOCUMENTATION BLOC #####

    local _Base="$1"
    local _ListOfCommits="${@:2}"
    # local _DiffCommits="$()"
#     
    git checkout $_Base
# git checkout result
    git cherry-pick --strategy=recursive -X theirs $(echo $_ListOfCommits)


###############################  
}

_t4dSrcGitUtilsStartBranch(){
###### _t4dSrcGitUtilsStartBranch
#   This function is here to help user to create his working branch using default good behavior
#   Usage  : _t4dSrcGitUtilsStartBranch -f toto
#   Usage  : _t4dSrcGitUtilsStartBranch -f 'ticket 321'
#   Usage  : _t4dSrcGitUtilsStartBranch -f ticket-321
#   Result : feature/ticket-321
#
#   Others :
#       Feature :
#           Usage  : _t4dSrcGitUtilsStartBranch -f epg-for-tvOS
#       Bugfixes
#           Usage  : _t4dSrcGitUtilsStartBranch -b epg-for-tvOS
#       Mutiple PR merge (for QA)
#           Usage  : _t4dSrcGitUtilsStartBranch -s pr1-pr2-pr3
#       Release
#           Usage  : _t4dSrcGitUtilsStartBranch -r 2.17.02
#       HotFix
#           Usage  : _t4dSrcGitUtilsStartBranch -h 2.17.02-crashiOS
###### DOCUMENTATION BLOC #####
    local _BranchType=""
    local _BranchName=""
    local _force=""
    while [[ "$@" != "" ]]; do
    case "$(echo $1)" in
            -force)
                _force="true"
            ;;
            -f*)
                _BranchType="feature/"
                shift
            ;;
            -b*)
                _BranchType="bugfix/"
                shift
            ;;
            -s*)
                _BranchType="staging/"
                shift
            ;;
            -r*)
                _BranchType="release/"
                shift
            ;;
            -h*)
                _BranchType="hotfix/"
                shift
            ;;
            *)
                if [[ "${_BranchName}" != "" ]]; then
                    alias t4dHelp='wksHelp _t4dSrcGitUtilsStartBranch'
                    (>&2 echo "${plyellow}WARNING :${pstd} Branch Name already set, ${plcyan}T4DHelp${pstd} for more info")
                fi
                _BranchName="$(echo $1 | sed 's| |-|g')"
                shift
            ;;
        esac
    done
    
    if [[ "${_BranchType}" == "" ]]; then
        alias t4dHelp='wksHelp _t4dSrcGitUtilsStartBranch'
        (>&2 echo "${plyellow}WARNING :${pstd} Branch Type is empty, ${plcyan}T4DHelp${pstd} for more info")
    fi
    
    _t4dPromptSquare "Creating Branch ${_BranchType}${_BranchName}" 
    [[ "$_force" != 'true' ]] && ( echo "Press enter to proceed, Ctrl+C to abort"; read -n )
    _t4dSrcGitUtilsSwitchOrCreateBranch "$(echo ${_BranchType}${_BranchName} | tr '[:upper:]' '[:lower:]')"
}

_t4dSrcGitUtilsDiff(){
    local _branchName="$(_t4dSrcGitInfoBranch)"
    local _sha7="$(_t4dSrcGitInfoSha7)"
    local _diff=''
    if [[ "$1" == "--prefix" ]]; then
        local _prefix="$2/"
        local _folderName="$2"
        shift
        shift
    else
        local _folderName="$(_t4dSrcGitInfoRootPath)"
    fi
    if [[ "$1" == '--name-only' ]]; then
        _diff="$(git diff --name-only ${@:2} | sed "s|^|    - ${_prefix}|g")"
    elif [[ "$1" == '--short' ]]; then
        _diff="$(git diff --no-color ${@:2} | grep -v '^ ' | grep -v '^+++' | grep -v '^diff' | grep -v '^index' | grep -v '^@' | sed "s|^+|\\${pgreen}+|g" | sed "s|$|\\$pstd|g" | sed "s|^---|\\$plwhite =>|g" | sed "s|^-|\\${pred}-|g" | sed "s| => a/||g")"
    else
        _diff="$(git diff --no-color ${@} | grep -v '^index' | grep -v '^@@ '  | grep -v '^+++' | grep -v '^---' | sed "s|^diff|\\${plcyan} |g" | sed "s|^+|\\${pgreen}+|g" | sed "s|^-|\\${pred}-|g" | sed "s|^ |\\${pstd} |g")"
    fi
    _t4dSrcGitStatusBranchOLD "$_folderName" "${_branchName}" "${_sha7}"
    if [[ "$_diff" != "" ]]; then
        echo "$_diff"
    fi
}

_t4dSrcGitUtilsFindPullRequestFromCommit(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dSrcGitUtilsFindPullRequestFromCommit
#   - Name:
#       _t4dSrcGitUtilsFindPullRequestFromCommit
###
#   - Synopsis:
#       Searching for PullRequest Merged in log history
###
#   - Usage:
#       _t4dSrcGitUtilsFindPullRequestFromCommit <Commit>
###
###### DOCUMENTATION BLOC #####

    local BranchName="$(git log -1000 | grep "$1" | cut -d '(' -f2 | cut -d ')' -f1)"
    git log -1000 | grep "into $BranchName"

###############################
}

_t4dSrcGitUtilsSwitchOrCreateBranch(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dSrcGitUtilsSwitchOrCreateBranch" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dSrcGitUtilsSwitchOrCreateBranch
#   - Name:
#       _t4dSrcGitUtilsSwitchOrCreateBranch
###
#   - Synopsis:
#       Try to create a local branch, if Already exists switch to it
###
#   - Definition:
#       Will try to create a new local branch, if it already exist, 
#           it will simply try to switch into it
#       On branch creation, will optionally checks if the branch as a correct prefix
#       Set the variable WS_GIT_VALID_PREFIX in your _t4d_/_variable_.env to "<prefix1> <prefix2> ..." setup prefix check
#
###
#   - Usage:
#       _t4dSrcGitUtilsSwitchOrCreateBranch <BranchName>
###
#   - Note:
#       We can't use git checkout -B option as it will also reset branch states
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local _BranchExist="$(git rev-parse --verify refs/heads/$1 2> /dev/null)"
    if [[ "$_BranchExist" != "" ]]; then
        git checkout "$1" 
    else
        local _Prefix="$(echo $1 | cut -d '/' -f1)"
        if [[ "$WS_GIT_VALID_PREFIX" != "" ]] && [[ "$(echo $WS_GIT_VALID_PREFIX | grep -Eo "$_Prefix")" == "" ]]; then
            _t4dPromptAskForChar "Are you sure you want to create a branch that does not start with >${plpurple}${WS_GIT_VALID_PREFIX}${pstd}< ? Ctrl+C to abort"
        fi
        git checkout -b "$1" 2> /dev/null
    fi

###############################
_t4dDebugInfoEnd "_t4dFunctionName" "$@"
}

_t4dSrcGitUtilsPush(){
###### _t4dSrcGitUtilsPush
#
#   Definition:
#       This is used to push your work only if needed
#
#   Usage :
#       _t4dSrcGitUtilsPush <name> <state>
###### DOCUMENTATION BLOC #####
    local _folder="$1"
    local _status="$2"
    local _extraArgs="${@:3}"
    # _t4dDebugLog $plog "git push $(echo $_extraArgs)"
    if [[ $_status == 'ahead' ]]; then
        echo "${plblue}$_folder :${pstd}"
        git push $(echo $_extraArgs)
    elif [[ $_status == 'diverged' ]]; then
        echo "${plblue}$_folder :${plyellow} ⚠️  Diverged from origin ⚠️${pstd}"
    elif [[ $_status == 'up-to-date' ]]; then
        echo "${plblue}$_folder :${plgrey} Skipped"
    elif [[ $_status == 'behind' ]]; then
         echo "${plblue}$_folder :${plyellow} ⚠️  behind from origin ⚠️${pstd}"
    elif [[ $_status == 'local' ]]; then
        echo "${plblue}$_folder :${pstd}"
        git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD) $(echo $_extraArgs)
    fi
}

_t4dSrcGitDeleteBranch(){
###### _t4dSrcGitDeleteBranch
#
#   Definition:
#       This is used to delete a branch remotely TO BE USED CAREFULLY
#
#   Usage :
#       _t4dSrcGitDeleteBranch <branchName> origin <ForceDeletion>
###### DOCUMENTATION BLOC #####
    if [[ "$(_t4dSrcGitIsMyBranchProtected $1)" == "" ]] && [[ "$3" == "true" ]]; then
        git push $2 --delete $1 && echo "     Branch ${plgreen} $1 ${pstd} deleted"
    elif [[ "$(_t4dSrcGitIsMyBranchProtected $1)" != "" ]] && [[ "$3" == "true" ]]; then
        echo "     Branch ${plyellow} $1 ${pstd} Not deleted -> Protected branch"
    else
        _t4dPromptAskForChar "Press enter to delete $(_t4dSrcGitIsMyBranchProtected $1) ${plyellow} $1 ${pstd} from ${2}, any key to skip Branch Deletion, Ctrl+C to abort" && git push $2 --delete $1
    fi
}

_t4dSrcGitUtilsPull(){
###### _t4dSrcGitUtilsPull
#
#   Definition:
#       This is used to push your work only if needed
#
#   Usage :
#       _t4dSrcGitUtilsPush <name> <state>
###### DOCUMENTATION BLOC #####
    if [[ $3 == "-f" ]]; then
        echo "${plblue}$1 :${pstd}"
        git pull
    else
        if [[ $2 == 'ahead' ]]; then
            echo "${plblue}$1 :${plgrey} Skipped${pstd}"
        elif [[ $2 == 'diverged' ]]; then
            echo "${plblue}$1 :${plyellow} ⚠️  Diverged from origin ⚠️${pstd}"
        elif [[ $2 == 'up-to-date' ]]; then
            echo "${plblue}$1 :${plgrey} Skipped${pstd}"
        elif [[ $2 == 'behind' ]]; then
            echo "${plblue}$1 :${pstd}"
            git pull
        elif [[ $2 == 'local' ]]; then
            echo "${plblue}$1 :${plgreen} Local Branch${pstd}"
        fi
    fi
}
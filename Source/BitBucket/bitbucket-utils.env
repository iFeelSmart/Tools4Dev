#CODE ERROR : 222

#CODE ERROR : 222

_t4dBitBucketPRStart(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dBitBucketPRStart" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dBitBucketPRStart
#   - Name:
#       _t4dBitBucketPRStart
###
#   - Synopsis:
#       Global function that will create a pull request with default behavior
###
#   - Definition:
#       Empty
#
###
#   - Usage:
#       _t4dBitBucketPRStart <option> [argument]
#
###
#   - Available Options:
#       -s <arg>     = Override Source Branch
#       -b <arg>     = Override Destination Branch
#       -r <arg>     = Select repository
#       -t <arg>     = Override Pull Request Title
#       -d <arg>     = Provide Description file
#       -u <arg>     = Append file with PR URL 
#       -v           = Open vim to create Pull Request Description
#       -f           = [ADVANCED USER ONLY] Force -> Will post without asking
#       -q           = Quiet option
#       -done        = set Title to [READY TO REVIEW]
#       -reviewer    = Add reviewer to PullRequest
#
###
#   - Example:
#       _t4dBitBucketPRStart -b develop -done
#
###
#   - Note:
#       <  >    = Required
#       [  ]    = Optionnal
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local _force=""
    local _quiet=""
    local _noColor=""

    local _Repository=""
    local _Project=""
    local _CurrentBranch=""
    local _Title="[WIP]"
    local _Description=""
    local _urlFile=""
    local _EnableDefaultReviewer="false"
    local _Reviewers=""
    local _InputjsonFile="$T4D_PROJECT_LOG_PATH/bitbucket/_t4dBitBucketPRStartInput.json"
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/bitbucket/_t4dBitBucketPRStartOutput.json"
    local _OuputjsonFile2="$T4D_PROJECT_LOG_PATH/bitbucket/_t4dBitBucketPRStartOutput2.json"
    while [[ "$@" != "" ]]; do
        case $1 in
            -s)
                _CurrentBranch="$2"
                shift
                shift
            ;;
            -b)
                _DestBranch="$2"
                shift
                shift
            ;;
            -reviewer|-rev)
                if [[ "$(echo $2 | grep '^-')" == "" ]] && [[ "$2" != "" ]]; then
                    _Reviewers="$_Reviewers $2"
                    shift
                fi
                _EnableDefaultReviewer="true"
                shift
            ;;
            -r)
                _Repository="$(_t4dFindDataInXML "project" "${2}" "name" "$WS_ROOT/manifest")"
                cd "$WS_ROOT/$2"
                shift
                shift
            ;;
            -done)
                _Title="[DONE]"
                shift
            ;;
            -t)
                _Title="$2"
                shift
                shift
            ;;
            -d)
                _Description="$(tail -n+1 $2 | sed 's|$|\\n|g' | tr -d '\n' | tr -d '\011')"
                shift
                shift
            ;;
            -v)
                if [[ -x $(which vim) ]]; then
                    echo "" > "$T4D_PROJECT_LOG_PATH/bitbucket/.desc"
                    (>&2 echo "${plblue}Argument sent : -v${pstd}")
                    (>&2 echo "${plblue}   - will open vim to create pull request description${pstd}")
                    (>&2 echo "Enter to proceed, Ctrl+C to abort")
                    read -n
                    vim "$T4D_PROJECT_LOG_PATH/bitbucket/.desc"
                    _Description="$(tail -n+1 $T4D_PROJECT_LOG_PATH/bitbucket/.desc | sed 's|$|\\n|g' | tr -d '\n' | tr -d '\011')"
                    rm "$T4D_PROJECT_LOG_PATH/bitbucket/.desc"
                else
                    (>&2 echo "${plred}ERROR 102${pstd} in _t4dBitBucketPRStart : can't find Vim")
                    return 102
                fi
                shift
            ;;
            -f)
                _force="true"
                shift
            ;;
            -q)
                _quiet="true"
                shift
            ;;
            -no-color)
                _noColor="-no-colors"
                shift
            ;;
            -u)
                _urlFile=$2
                shift
                shift
            ;;
            *)
                _t4dModBb8UtilsError 222 "_t4dBitBucketPRStart" "Unknown Argument $1"
                return 222
            ;;
         esac
    done
    
    ##### Default Values 
    [[ "$_Repository" == "" ]]    && local _Repository="$(_t4dSrcGitInfoRepoName)"
    [[ "$_Project" == "" ]]       && local _Project="$(_t4dSrcGitInfoProjectKEY)"
    [[ "$_CurrentBranch" == "" ]] && local _CurrentBranch="$(_t4dSrcGitInfoBranch)"
    [[ "$_DestBranch" == "" ]]    && local _DestBranch="$(_t4dFindDataInXML "default" "$(_t4dFindDataInXML project $_Repository default "$WS_ROOT/manifest")" "revision" "$WS_ROOT/manifest")"
    [[ "$_Title" == "[WIP]" ]]    && local _Title="${_Title}$(_t4dModBb8UtilsNormalizeBranch $_CurrentBranch)"
    [[ "$_Title" == "[DONE]" ]]   && local _Title="$(_t4dBitBucketDefaultFinishedPrefix)$(_t4dModBb8UtilsNormalizeBranch $_CurrentBranch)"
    [[ "$_Title" == "[READY TO REVIEW]" ]]   && local _Title="${_Title}$(_t4dModBb8UtilsNormalizeBranch $_CurrentBranch)"
    [[ "$_EnableDefaultReviewer" == "true" ]] && _Reviewers="$_Reviewers $(_t4dModBb8UtilsGetDefaultProjectReviewers $_Project $_Repository)"
    ####################
    
    cd $WS_ROOT
    
    if [[ "$_force" != 'true' ]]; then
        _t4dPromptSquare "${_Project}/${_Repository}"
        _t4dPromptInfo "Title" ${_Title} 6
        echo ""
        echo "      From   ${_CurrentBranch}  to  ${_DestBranch}"
        echo ""
        if [[ "$_Reviewers" != "" ]]; then
        echo "${plpurple}Reviewers : ${pstd}"
        echo "$_Reviewers"
        fi
        echo "${plpurple}Description : ${pstd}"
        echo "$_Description"
        cd $_OLDPWD
        
        echo "Press enter to create Pull Request, Ctrl+C to abort"
        read -n
        cd $WS_ROOT
    else
        echo "${plpurple}${_Repository} ${pstd}"
    fi
    
    ##### Tests Before Publish
    [[ "$_CurrentBranch" == "${_DestBranch}" ]] && _t4dModBb8UtilsError 222 "_t4dBitBucketPRStart" "Current Branch and Dest Branch are identical" && return 222
    ##########################
    
cat > $_InputjsonFile << EOF
    {
        "title": "${_Title}",
        "description": "${_Description}",
        "state": "OPEN",
        "open": true,
        "closed": false,
        "fromRef": {
            "id": "refs/heads/${_CurrentBranch}",
            "repository": {
                "slug": "${_Repository}",
                "name": null,
                "project": {
                    "key": "${_Project}"
                }
            }
        },
        "toRef": {
            "id": "refs/heads/${_DestBranch}",
            "repository": {
                "slug": "${_Repository}",
                "name": null,
                "project": {
                    "key": "${_Project}"
                }
            }
        },
        "locked": false,
EOF
if [[ "$_Reviewers" != "" ]]; then
cat >> $_InputjsonFile << EOF
        $(_t4dModBb8UtilsParseReviewers $(echo $_Reviewers))
EOF
fi
cat >> $_InputjsonFile << EOF
        "links": {
            "self": [
                null
            ]
        }
    }
EOF

    _t4dBitBucketPullRequestAPICreate $_Project $_Repository "${_InputjsonFile}" "${_OuputjsonFile}"
    rm -f "${_InputjsonFile}"
    
    local _URL=""
    
    if [[ "${_quiet}" != "true" ]]; then
        _t4dBitBucketGetServerResponse $(echo $_noColor) "${_OuputjsonFile}"
    fi

    [[ "${_urlFile}" != "" ]] && [[ "${_URL}" != "" ]] && echo "${_URL}/diff" >> ${_urlFile}

###############################
_t4dDebugInfoEnd "_t4dBitBucketPRStart" "$@"
}

_t4dModBb8UtilsGetDefaultProjectReviewers(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dModBb8UtilsGetDefaultProjectReviewers
#   - Name:
#       _t4dModBb8UtilsGetDefaultProjectReviewers
###
#   - Synopsis:
#       return list of default reviewers
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _ProjectKey="$1"
    local _ProjectName="$2"
    local _CurrentUser="$(echo $BITBUCKET_USER_AND_PASSWORD | cut -d ':' -f1)"
    local _OutputjsonFile="$T4D_PROJECT_LOG_PATH/bitbucket/_t4dBitBucketRepoGetDefaultReviewers.json"
    _t4dBitBucketRepoGetDefaultReviewers $_ProjectKey $_ProjectName $_OutputjsonFile
    local _Reviewers="$(_t4dGetJsonData "$_OutputjsonFile" ".[0].reviewers" 2> /dev/null | grep 'name":' | cut -d ':' -f2 | cut -d '"' -f2 | grep -v "${_CurrentUser:-Unknown}" | tr '\n' ' ' )"
    echo $_Reviewers

###############################
}

_t4dModBb8UtilsParseReviewers(){
    # Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dModBb8UtilsParseReviewers
#   - Name:
#       _t4dModBb8UtilsParseReviewers
###
#   - Synopsis:
#       parse sended reviewer to json format
###
#   - Usage:
#       _t4dModBb8UtilsParseReviewers <user1> [user2]
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    if [[ $# -gt 0 ]]; then
        echo "\"reviewers\": ["
        for _user in ${@:2}; do
            echo "      {"
            echo "          \"user\": {"
            echo "              \"name\": \"$_user\""
            echo "          }"
            echo "      },"
        done
        echo "      {"
        echo "          \"user\": {"
        echo "              \"name\": \"$1\""
        echo "          }"
        echo "      }"
        echo "  ],"
    fi
###############################
}

_t4dBitBucketGetServerResponse(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dBitBucketGetServerResponse" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dBitBucketGetServerResponse
#   - Name:
#       _t4dBitBucketGetServerResponse
###
#   - Synopsis:
#       Read and Parse Json Output after server interraction
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    if [[ "$1" == "-no-colors" ]]; then
        local plyellow=""
        local plgreen=""
        local plred=""
        local pstd=""
        shift
    fi
    local _OuputjsonFile="$1"
    if [[ $(tail -n+1 "${_OuputjsonFile}" | grep 'errors') == '' ]]; then
        _URL="$(_t4dGetJsonData ${_OuputjsonFile} ".links.self[0].href")"
        echo "${plgreen}${_URL}${pstd}"
    elif [[ "$(_t4dGetJsonData ${_OuputjsonFile} ".errors[0].existingPullRequest.links.self[0].href")" == 'null' ]]; then
        local _MESSAGE="$(_t4dGetJsonData ${_OuputjsonFile} ".errors[0].message")"
        echo "${plyellow}${_MESSAGE}${pstd}"
    elif [[ "$(_t4dGetJsonData ${_OuputjsonFile} ".errors[0].exceptionName")" == 'com.atlassian.bitbucket.pull.DuplicatePullRequestException' ]]; then
        local _MESSAGE="$(_t4dGetJsonData ${_OuputjsonFile} ".errors[0].message")"
        echo "${plyellow}${_MESSAGE}${pstd}"
        _URL="$(_t4dGetJsonData ${_OuputjsonFile} ".errors[0].existingPullRequest.links.self[0].href")"
        echo "${plyellow}${_URL}${pstd}"
    else
        _URL="$(_t4dGetJsonData ${_OuputjsonFile} ".errors[0].existingPullRequest.links.self[0].href")"
        echo "${plred}${_URL}${pstd}"
    fi

###############################
_t4dDebugInfoEnd "_t4dBitBucketGetServerResponse" "$@"
}

_t4dBitBucketDeleteBranch(){
# Generated From $Tools4Dev_PATH/Templates/function.env
_t4dDebugInfoStart "_t4dBitBucketDeleteBranch" "$#" "$@"
#
###### _t4dBitBucketDeleteBranch
#
#   Definition:
#
#   Usage :
#
#   Options :
#
#   Example :
#
#   Note :
#
###### DOCUMENTATION BLOC #####
#
########## CODE BLOC ##########


    local _GetJsonDefaultPath="$1"
    local _OuputjsonFile="$2"
    local _branch="$(tail -n+1 $_OuputjsonFile | grep -A1 '^Branches' | tail -1 | cut -d ':' -f2 | sed 's| From |%|g' | sed 's| to |%|g' | cut -d '%' -f2 | sed 's| ||g')"
    #This is here because bitbucket randomise http or ssh order links in clone tab doesn't have time to get it properly
    local _RemoteURL1="$(_t4dGetJsonData ${_GetJsonDefaultPath} ".fromRef.repository.links.clone[0].href" | grep 'ssh')"
    local _RemoteURL2="$(_t4dGetJsonData ${_GetJsonDefaultPath} ".fromRef.repository.links.clone[1].href" | grep 'ssh')"
    local _RemoteURL="${_RemoteURL1}${_RemoteURL2}"
    if [[ "$(tail -n+1 $_OuputjsonFile | grep '^State' | cut -d ':' -f2 | sed 's| ||g')" == "MERGED" ]]; then
        _t4dSrcGitDeleteBranch $_branch $_RemoteURL 'true'
    elif [[ "$(tail -n+1 $_OuputjsonFile | grep '^State' | cut -d ':' -f2 | sed 's| ||g')" == "DECLINED" ]]; then
        _t4dPromptSquare 'PullRequest marked as Declined' ${plyellow}
        _t4dSrcGitDeleteBranch $_branch $_RemoteURL 'true'
    fi

    

###############################
_t4dDebugInfoEnd "_t4dBitBucketDeleteBranch" "$@"
}

_t4dBitBucketSafetyCheck(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dBitBucketSafetyCheck" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dBitBucketSafetyCheck
#   - Name:
#       _t4dBitBucketSafetyCheck
###
#   - Synopsis:
#       Launch a series of important check before using BitBucket API
###
#   - Definition:
#       Return 320 if there is any problem, true if all is good
#
###

###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
    ## BitBucket Password #####################################
    if [[ "$BITBUCKET_USERNAME" != "" ]] && [[ "$BITBUCKET_USER_AND_PASSWORD" == "Init" ]]; then
        BITBUCKET_USER_AND_PASSWORD="$BITBUCKET_USERNAME:$(_t4dGetKeychainPassword BitBucketPassword)"
    else

        [[ "${BITBUCKET_USER_AND_PASSWORD}" == "" ]] && (>&2 echo "${plred}ERROR 320${pstd} in bb8 : BITBUCKET_USER_AND_PASSWORD variable is empty") && return 320
        
        if [[ "$(echo ${BITBUCKET_USER_AND_PASSWORD} | cut -d ":" -f2)" == "<askMe>" ]] ; then
            echo "You specify <askMe> in your $WS_ROOT/.$USER.env file or in your $Tools4Dev_PATH/.$USER.env, please enter your bitBucket Password."
            echo "      NOTE : it will not be exported or saved in any file"
            echo "      NOTE : Current BitBucket user -> $(echo ${BITBUCKET_USER_AND_PASSWORD} | cut -d ":" -f1)"
            read -s _tmp
            BITBUCKET_USER_AND_PASSWORD="$(echo ${BITBUCKET_USER_AND_PASSWORD} | cut -d ":" -f1):$_tmp"
        fi
        ###########################################################
    fi  

    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/bitbucket/_t4dBitBucketGetMainPage.json"
    if [[ "$(_t4dBitBucketGetMainPage $_OuputjsonFile 2>&1 | grep 'ERROR')" != "" ]]; then
        _t4dPromptError "320 in bb8" "Can't Reach BitBucket - https://$_t4dBitbucketURL" && return 320
    fi
    if [[ "$(_t4dBitBucketCheckLogIn)" != 'null' ]]; then
        _t4dPromptError "320 in bb8" "$(_t4dBitBucketCheckLogIn)" && return 320
    fi 



###############################
_t4dDebugInfoEnd "_t4dBitBucketSafetyCheck" "$@"
}

_t4dBitBucketCheckLogIn(){
# Generated From $Tools4Dev_PATH/Templates/function.env
_t4dDebugInfoStart "_t4dBitBucketCheckLogIn" "$#" "$@"
#
###### _t4dBitBucketCheckLogIn
#
#   Definition:
#       This Method simply check BitBucket Login, return error message if any, return null if login succeed
#
#   Usage :
#       _t4dBitBucketCheckLogIn
#
#   Example :
#       [[ "$(_t4dBitBucketCheckLogIn)" != 'null' ]] && return <ErrorCode>
#
###### DOCUMENTATION BLOC #####
#
########## CODE BLOC ##########


    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/bitbucket/_t4dBitBucketCheckLogIn.json"
    _t4dBitBucketUserAPIGet "$(echo ${BITBUCKET_USER_AND_PASSWORD} | cut -d ":" -f1)" "$_OuputjsonFile"
    echo "$(_t4dGetJsonData $_OuputjsonFile '.errors[0].message')"

    

###############################
_t4dDebugInfoEnd "_t4dBitBucketCheckLogIn" "$@"
}

_t4dSrcBitBucketUtilsListRemoteBranches(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dSrcBitBucketUtilsListRemoteBranches" "$#" "$@"
###### _t4dSrcBitBucketUtilsListRemoteBranches
#   - Name:
#       _t4dSrcBitBucketUtilsListRemoteBranches
###
#   - Synopsis:
#       |One-line description of what it does. (less than 55 char)|
###
#   - Example:
#       _t4dSrcBitBucketUtilsListRemoteBranches <KEY> <REPO> <Filter>
###
###### DOCUMENTATION BLOC #####
    local _KEY="$1"
    local _REPO="$2"
    local _Filter="$3"
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/bitbucket/_t4dSrcBitBucketUtilsListRemoteBranches.json"
    _t4dBitBucketRepoAPIListBranches "$_KEY" "$_REPO" "$_Filter" $_OuputjsonFile
    local _size=$(expr $(_t4dGetJsonData ${_OuputjsonFile} '.size') - 1) 2> /dev/null
    local _List=""
    for i in $(seq 0 $_size); do
        echo "$(_t4dGetJsonData ${_OuputjsonFile} ".values[$i].displayId" )"
    done

###############################
_t4dDebugInfoEnd "_t4dSrcBitBucketUtilsListRemoteBranches" "$@"
}

_t4dSrcBitBucketUtilsMultiMerge(){
###### _t4dSrcBitBucketUtilsMultiMerge
#   This is a global function that will merge a pull request to its destination, to be use carefully
#
#   Usage : 
#       _t4dSrcBitBucketUtilsMultiMerge <PullRequests Lists> <force>
#
#   Options :
#       PullRequests Lists          = Variable that contains list of URLs
#       force                       = If true, don't ask for Merge at every Pull Requests TO BE USED CAREFULY
#
##### DOCUMENTATION BLOC #####
    local _RelatedPRs=$1
    local _Force=$2
    local _DeleteBranch=${3:-true}
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/bitbucket/_t4dSrcBitBucketUtilsMultiMerge.json"
    local _GetJsonDefaultPath="$T4D_PROJECT_LOG_PATH/bitbucket/_t4dModBb8UtilsGet.json"
    
    for _RelatedPR in $(echo $_RelatedPRs); do
        echo "" > $_OuputjsonFile
        if [[ "$_Force" == 'true' ]]; then
            _t4dModBb8UtilsGet $_RelatedPR > $_OuputjsonFile
        else
            _t4dModBb8UtilsGet $_RelatedPR | tee -a $_OuputjsonFile
        fi
        
        local __URL=$(_t4dGetJsonData "$_GetJsonDefaultPath" '.links.self[0].href')
        local __ID=$(_t4dGetJsonData "$_GetJsonDefaultPath" '.id')
        local __KEY="$(_t4dGetJsonData "$_GetJsonDefaultPath"  '.fromRef.repository.project.key')"
        local __REPO="$(_t4dGetJsonData "$_GetJsonDefaultPath" '.fromRef.repository.name')"
        local __VERSION="$(_t4dGetJsonData "$_GetJsonDefaultPath" '.version')"
        _t4dPromptInfo "${__KEY}/${__REPO}" "${__ID}" 20
        if [[ "$_Force" == 'false' ]]; then
            echo "Press enter to merge Pull Request, Ctrl+C to abort"
            read -n
        fi
        _t4dBitBucketPullRequestAPIMerge "${__KEY}" "${__REPO}" "${__ID}" "${__VERSION}" "${_OuputjsonFile}"
        local _MESSAGE="$(_t4dGetJsonData ${_OuputjsonFile} ".errors[0].message")"
        if [[ "$(echo $_MESSAGE | grep 'has already been merged' )" != "" ]]; then
            _t4dDebugLog $pinfo "$_MESSAGE"
        elif [[ "$_MESSAGE" != "null" ]]; then
            _t4dPromptSquare "$_MESSAGE" "$plred"
            return 320
        fi

        if [[ "$_Delete" == "true" ]]; then
            echo "" > $_OuputjsonFile
            (_t4dColorDisabled _t4dModBb8UtilsGet $_RelatedPR) >> $_OuputjsonFile
            if [[ "$(tail -n+1 $_OuputjsonFile | grep '^State' | cut -d ':' -f2 | sed 's| ||g')" == "MERGED" ]] && [[ "$(_t4dSrcGitIsMyBranchProtected $__TARGET_BRANCH)" != "" ]]; then
                local _branch="$(tail -n+1 $_OuputjsonFile | grep -A1 '^Branches' | tail -1 | cut -d ':' -f2 | sed 's| From |%|g' | sed 's| to |%|g' | cut -d '%' -f2 | sed 's| ||g')"
                #This is here because bitbucket randomise http or ssh links in clone tab doesn't have time to get it properly
                local _RemoteURL1="$(_t4dGetJsonData ${_GetJsonDefaultPath} ".fromRef.repository.links.clone[0].href" | grep 'ssh')"
                local _RemoteURL2="$(_t4dGetJsonData ${_GetJsonDefaultPath} ".fromRef.repository.links.clone[1].href" | grep 'ssh')"
                local _RemoteURL="${_RemoteURL1}${_RemoteURL2}"
                _t4dSrcGitDeleteBranch "$_branch" "$_RemoteURL" "$_DeleteBranch"
            fi
        fi
    done
}

_t4dSrcBitBucketUtilsSetBuildStatus(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dSrcBitBucketUtilsSetBuildStatus" "$#" "$@"
###### _t4dSrcBitBucketUtilsSetBuildStatus
#   - Name:
#       _t4dSrcBitBucketUtilsSetBuildStatus
###
#   - Synopsis:
#       |One-line description of what it does. (less than 55 char)|
###
#   - Example:
#       _t4dSrcBitBucketUtilsSetBuildStatus "$(_t4dSrcGitInfoSha)" "Build-Variant-0" "INPROGRESS"
#       _t4dSrcBitBucketUtilsSetBuildStatus -user-password user:password "$(_t4dSrcGitInfoSha)" "Build-Variant-0" "INPROGRESS"
###
###### DOCUMENTATION BLOC #####
    if [[ "$1" == "-user-password" ]]; then
        BITBUCKET_USER_AND_PASSWORD="${2}"
        shift
        shift
    fi
    local _InputjsonFile="$T4D_PROJECT_LOG_PATH/bitbucket/_t4dSrcBitBucketUtilsSetBuildStatusInput.json"
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/bitbucket/_t4dSrcBitBucketUtilsSetBuildStatus.json"
    local _CommitID="$1"
    local _Name="$2"
    local _State="$3"
    local _Url="${4:-"http://$JENKINS_WEB_URL/blue/pipelines"}"

cat > $_InputjsonFile << EOF
    {
        "state": "$_State",
        "key": "$_Name",
        "name": "$_Name",
        "url": "$_Url"
    }
EOF
_t4dDebugLog $pinfo "Set Bitbucket Status : $_CommitID -> $_Name [$_State]"
_t4dBitBucketSetBuildStatus "${_CommitID}" "$_InputjsonFile" "${_OuputjsonFile}"

###############################
_t4dDebugInfoEnd "_t4dSrcBitBucketUtilsSetBuildStatus" "$@"
}

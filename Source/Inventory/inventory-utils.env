
# _t4dSrcInventoryInfoGetData <VAR NAME>
# _t4dSrcInventoryInfoGetStatus <FILE> <outputStyle>

# _t4dSrcInventoryUtilsSearch
# _t4dSrcInventoryUtilsAddLine
# _t4dSrcInventoryUtilsCreateCacheFile

# _t4dSrcIntenoryFileCreate
# _t4dSrcIntenoryFileEdit
# _t4dSrcIntenoryFileDelete
# _t4dSrcIntenoryFileRulesCheck File.env Manifest.xml

_t4dSrcInventoryFileEditOrCreate(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dSrcInventoryFileEditOrCreate
#   - Name:
#       _t4dSrcInventoryFileEditOrCreate
###
#   - Synopsis:
#       Create Inventory File based on manifest configuration
###
#   - Available Options:
#       * -manifest|-M              = Send manifest that containt inventory hardware structure
#       * -define|-D                = add a variable to global definition, be careful, every variable should be present in manifest 
#       * -file|-F                  = source file that already contains hardware variable
#       * -force|-f                 = Apply modifications
#
###
#   - Example:
#       * _t4dSrcInventoryFileEditOrCreate -M $T4D_TEAM_ROOT/inventory/config.xml -D WS_HDW_UUID=12 -D WS_HDW_IP="XXX.XXX.X.X" -D WS_HDW_PRODUCT="Apple - MacBook" -D WS_HDW_TYPE=computer -D WS_HDW_MAC_ETH=FE:FE:FE:FD:FF -D WS_HDW_SHORTCUT=yourname  
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=274
    local _ManifestFile=""
    local _SourceFile=""
    local _CacheTmpFile="$WS_ROOT/.t4d/inventory/cache.tmp"
    local _OutPutTmpFile="$WS_ROOT/.t4d/inventory/output.tmp"
    local _VarName=""
    local _VarData=""
    local _ApplyChanges="false"
    mkdir -p "$WS_ROOT/.t4d/inventory"
    echo "" > $_CacheTmpFile

    while [[ "$@" != "" ]]; do
        case "$1" in
            -manifest|-M)
                _ManifestFile="$2"
                shift
            ;;
            -define|-D)
                _VarName="$(echo $2 | cut -d '=' -f1)"
                _VarData="$(echo $2 | cut -d '=' -f2)"
                echo "${_VarName}=\"$_VarData\"" >> $_CacheTmpFile
                shift
            ;;
            -file|-F)
                _SourceFile="$2"
                shift
            ;;
            -force|-f)
                _ApplyChanges="true"
            ;;
            *)
                _t4dDebugLog $perror "Empty or Unknown argument < $1 >"
                return $_t4dErrorCode
            ;;
        esac
        shift
    done

    local _Prefix="$(_t4dFindDataInXmlV2 manifest name hardware prefix $_ManifestFile)"

    t4dClearEnv $_Prefix

    if [[ -e "$_SourceFile" ]]; then
        source $_SourceFile
    fi
    source $_CacheTmpFile
    local _DefaultPrefix="$(_t4dFindDataInXmlV2 rule name default prefix $_ManifestFile)"
    local _Elements="$(_t4dFindMarkerInXML element name $_ManifestFile)"
    local _Lists="$(_t4dFindMarkerInXML list name $_ManifestFile)"
    local _Options="$(_t4dFindMarkerInXML option name $_ManifestFile)"
    local _Title="$(eval echo $(_t4dFindMarkerInXML filename data $_ManifestFile ) | sed 's|-$||g' | sed 's|_$||g' | sed 's|\.$||g')"
    
    _t4dPromptSquare --no-color "$(echo $_Title | sed 's|/| -> |g')" | sed 's|^|#       |g' > $_OutPutTmpFile

    for _Elem in $(echo $_Elements); do
        local _Count="$(_t4dFindDataInXmlV2 element name $_Elem count $_ManifestFile)"
        local _Rule="$(_t4dFindDataInXmlV2 element name $_Elem rule $_ManifestFile)"
        local _Prefix="$(_t4dFindDataInXmlV2 rule name $_Rule prefix $_ManifestFile)"
        
        local _Data="$(eval "echo \$$_Elem")"
        local _DataValidated="$(_t4dSrcInventoryRulesDataCheck $_Rule $_Data)"


        if [[ "$_DataValidated" == "" ]] && [[ "$_Data" != "" ]]; then
            return $_t4dErrorCode
        elif [[ "$_Data" == "" ]] && [[ "$_Count" != "*" ]]; then
            _t4dDebugLog $perror "Data empty or not valid for mandatory element $_Elem"
            return $_t4dErrorCode
        fi
        # _t4dDebugLog $plog "${_Elem} - ${_Data} $_Prefix"
        if [[ "$_DataValidated" != "" ]]; then
            echo "$(echo ${_Prefix:-$_DefaultPrefix} | sed "s|ELEMENT|${_Elem}|g" | sed "s|DATA|${_DataValidated}|g")" >> $_OutPutTmpFile
        fi
    done

    for _Option in $(echo $_Options); do
        # _t4dDebugLog $plog "$_Option"
        local _Count="$(_t4dFindDataInXmlV2 option name $_Option count $_ManifestFile)"
        local _Rule="$(_t4dFindDataInXmlV2 option name $_Option rule $_ManifestFile)"
        local _Prefix="$(_t4dFindDataInXmlV2 rule name $_Rule prefix $_ManifestFile)"
        local _Available="$(_t4dFindDataInXmlV2 option name $_Option options $_ManifestFile)"
        # _t4dDebugLog $plog "$_Count - $_Rule - $_Prefix "
        # _t4dDebugLog $plog "$_Available"

        local _Data="$(eval "echo \$$_Option")"
        # _t4dDebugLog $plog "-> $_Data"
        local _DataValidated="$(_t4dSrcInventoryRulesDataCheck $_Rule $_Data $_Available)"

        if [[ "$_DataValidated" == "" ]] && [[ "$_Data" != "" ]]; then
            _t4dDebugLog $perror "[$_t4dErrorCode] Data < $_Option > not valid : "
            _t4dDebugLog $pinfo "$(echo $_Available | sed 's/|/ /g')"
            return $_t4dErrorCode
        elif [[ "$_Data" == "" ]] && [[ "$_Count" != "*" ]]; then
            _t4dDebugLog $perror "Data empty or not valid for mandatory element $_Option"
            return $_t4dErrorCode
        fi

        if [[ "$_DataValidated" != "" ]]; then
            echo "$(echo ${_Prefix:-$_DefaultPrefix} | sed "s|ELEMENT|${_Option}|g" | sed "s|DATA|${_DataValidated}|g")" >> $_OutPutTmpFile
        fi

    done

    for _List in $(echo $_Lists); do
        
        local _NonEmpty="false"
        local _Count="$(_t4dFindDataInXmlV2 list name $_List count $_ManifestFile)"
        local _Rule="$(_t4dFindDataInXmlV2 list name $_List rule $_ManifestFile)"
        local _Prefix="$(_t4dFindDataInXmlV2 list name $_Rule prefix $_ManifestFile)"
        local _Elements="$(_t4dFindDataInXmlV2 list name $_List elements $_ManifestFile | tr ',' '\n' | sed "s|^|${_List}_|g" | tr '[a-z]' '[A-Z]' | tr '\n' ' ')"
        for _Elem in $(echo $_Elements); do
            # local _Var="$(echo $_List | sed "s|$|_$_Elem|g" | tr '[a-z]' '[A-Z]')"
            local _Data="$(eval "echo \$$_Elem")"
            if [[ "$_Data" != "" ]]; then
                _DataValidated="$(_t4dSrcInventoryRulesDataCheck $_Rule $_Data)"
            else
                _DataValidated=""
            fi
            # _t4dDebugLog $pwarning "$_Rule $_Data - $_DataValidated"
            if [[ "$_DataValidated" == "" ]] && [[ "$_Data" != "" ]]; then
                return $_t4dErrorCode
            fi
            if [[ "$_DataValidated" != "" ]]; then
                _NonEmpty='true'
                echo "$(echo ${_Prefix:-$_DefaultPrefix} | sed "s|ELEMENT|${_Elem}|g" | sed "s|DATA|${_DataValidated}|g")" >> $_OutPutTmpFile
            fi
        done
        # _t4dDebugLog $plog "$_NonEmpty $_Count"
        if [[ "$_NonEmpty" != "true" ]] && [[ "$_Count" != "*" ]]; then
            _t4dDebugLog $perror "List need at least 1 mandatory element between > $_Elements <"
            return $_t4dErrorCode
        else 

        fi
    done
 
    local _OutputFileName="$WS_INVENTORY_ROOT_PATH/$_Title.env"
    # cat $_OutPutTmpFile
    


    case $_ApplyChanges in
        true)
            if [[ -e "$_SourceFile" ]]; then
                mv "$_SourceFile" "$_OutputFileName"
            fi
            mkdir -p "$(dirname $_OutputFileName)"
            cat "$_OutPutTmpFile" > "$_OutputFileName"
        ;;
        *)
            if [[ -e "$_SourceFile" ]]; then
                echo "$(diff --unified "$_SourceFile" "$_OutPutTmpFile" | sed "s|^+|\\$pgreen|g" | sed "s|^-|\\$pred|g" | sed "s|$|\\$pstd|g")"
            elif [[ -e "$_OutputFileName" ]]; then
                echo "$(diff --unified "$_OutputFileName" "$_OutPutTmpFile" | sed "s|^+|\\$pgreen|g" | sed "s|^-|\\$pred|g" | sed "s|$|\\$pstd|g" | tail -n +3)"
                # echo $_res
            else    
                _t4dDebugLog $plog "Filename $_OutputFileName "
                echo "$pgreen$(cat $_OutPutTmpFile)${pstd}"
            fi
        ;;
    esac

###############################
}

_t4dSrcInventoryUtilsCreateCacheFile(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dSrcInventoryUtilsCreateCacheFile
#   - Name:
#       _t4dSrcInventoryUtilsCreateCacheFile
###
#   - Synopsis:
#       Create cache file with all prefixed var
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _Manifest="$1"
    local _Source="$2"
    local _Prefix="$(_t4dFindDataInXmlV2 manifest name hardware prefix $_Manifest)"
    t4dClearEnv $_Prefix

    source $_Source
    mkdir -p "$WS_ROOT/.t4d/inventory"
    echo "CACHE_NAME=$(basename $_Source)" > "$WS_ROOT/.t4d/inventory/cache.env"
    set | grep "^${_Prefix:-Nope}" >> "$WS_ROOT/.t4d/inventory/cache.env"
###############################
}
# _t4dSrcInventoryUtilsCreateCacheFile $Tools4Dev_PATH/Team/IFeelSmart/Inventory/config.xml

_t4dSrcInventoryUtilsSearch(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dSrcInventoryUtilsSearch
#   - Name:
#       _t4dSrcInventoryUtilsSearch
###
#   - Synopsis:
#       Search device file in inventory folders
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _t4dErrorCode=1
    local _Data="$1"

    if [[ ! -d $WS_INVENTORY_ROOT_PATH ]]; then
        _t4dDebugLog "$perror" "WS_INVENTORY_ROOT_PATH isn't a folder, aborting"
        return $_t4dErrorCode
    fi

    local _Found=$(find "${WS_INVENTORY_ROOT_PATH}/" \
                    | grep '.env' \
                    | grep -w "$_Data")
    local _Count="$(find "${WS_INVENTORY_ROOT_PATH}/" \
                    | grep '.env' \
                    | grep -w "$_Data" \
                    | wc -l \
                    | sed 's| ||g')"
    #can't use echo because it will output an empty line

    if [[ "${_Count}" == "1" ]]; then
        echo "$_Found"
        return 0
    elif [[ "${_Count}" == "0" ]]; then
        _t4dDebugLog "$perror" "No corresponding file found"
        return $_t4dErrorCode
    else
        _t4dDebugLog "$perror" "Multiple files found"
        _t4dDebugLog "$pinfo" "Data :\n${_Found}"
        return $_t4dErrorCode
    fi

###############################
}

_t4dSrcInventoryFileDelete(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dSrcInventoryFileDelete
#   - Name:
#       _t4dSrcInventoryFileDelete
###
#   - Synopsis:
#       Delete file in inventory folder
###
#   - Available Options:
#       * -file|-F                  = file to be deleted
#       * -force|-f                 = Apply modifications
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _t4dErrorCode=1
    local _File
    local _ApplyChanges="false"

    while [[ "$@" != "" ]]; do
        case "$1" in
            -file|-F)
                _SourceFile="$2"
                shift
            ;;
            -force|-f)
                _ApplyChanges="true"
            ;;
            *)
                _t4dDebugLog "$perror" "Empty or Unknown argument < $1 >"
                return $_t4dErrorCode
            ;;
        esac
        shift
    done

    if [[ ! -e $_SourceFile ]]; then
        _t4dDebugLog "$perror" "The file you're trying to remove doesn't exist"
        return $_t4dErrorCode
    elif [[ "$_ApplyChanges" == "true" ]]; then
        _t4dDebugLog "$pinfo" "Deleting inventory file $_SourceFile"
        rm $_SourceFile
    else
        _t4dDebugLog "$plog" "File found : $_SourceFile"
        _t4dDebugLog "$pinfo" "Execute the command with -force switch to remove file"
    fi

    return 0
###############################
}

_t4dSrcInventoryManifestIdName(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dSrcInventoryManifestIdName
#   - Name:
#       _t4dSrcInventoryManifestIdName
###
#   - Synopsis:
#       Return id element name (where rule = id)
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _t4dErrorCode=1
    local _Manifest="$1"

    if [[ ! -e $_Manifest ]]; then
        _t4dDebugLog "$perror" "Given file does not exist, aborting"
        return $_t4dErrorCode
    fi

    local _Elements="$(_t4dFindMarkerInXML element name $_Manifest)"
    for _Elem in $(echo $_Elements); do
        local _Rule="$(_t4dFindDataInXmlV2 element name $_Elem rule $_Manifest)"
        if [[ "$_Rule" == "id" ]]; then
            echo "$_Elem"
            return 0
        fi
    done

    _t4dDebugLog "$perror" "No id found in manifest, are you sure it's well formed ?"
    return $_t4dErrorCode

###############################
}
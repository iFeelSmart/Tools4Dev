
_t4dSrcAwsImportFile(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.1
_t4dDebugInfoStart "_t4dSrcAwsImportFile" "$#" "$@"
###### _t4dSrcAwsImportFile
#   - Name:
#       _t4dSrcAwsImportFile
###
#   - Synopsis:
#       Pull file from s3
###
#   - Usage:
#       _t4dSrcAwsImportFile <ServerPath> <LocalPath> <FileName>
#       _t4dSrcAwsImportFile -f <ServerPath> <LocalPath> <FileName>
###
#   - Available Options:
#       -f          = Overwrite local file if already exist. To be used carefully
###
#   - Example:
#       _t4dSrcAwsImportFile "$WS_AMAZON_S3_ROOT/Qt-opensource/src" "$WS_ROOT/Archive" "Qt-opensource-5.10.1.tar.xz"
###
###### DOCUMENTATION BLOC #####

    local _OverwriteIfExist="false"
    if [[ "$1" == "-f" ]]; then
        _OverwriteIfExist="true"
        shift
    fi
    local _ServerPath="$1"
    local _LocalPath="$2"
    local _File="$3"
    if [[ "$_File" == "" ]]; then
        _t4dCheckFailed "Filename is empty"
        return 260
    elif [[ -e "$_LocalPath/$_File" ]] && [[ "$_OverwriteIfExist" == "false" ]]; then
        _t4dCheckSucceeded "$_File Already exists"
    elif [[ "$($WS_AWS_CLI_PATH s3 ls "$_ServerPath/$_File")" == "" ]]; then
        _t4dCheckFailed "$_File Unavailable"
        return 261
    else
        _t4dCheckInfo "Downloading $_File"
        _t4dSrcAwsCp "$_ServerPath/$_File" "$_LocalPath/$_File"
    fi

###############################
_t4dDebugInfoEnd "_t4dSrcAwsImportFile" "$@"  
}

_t4dSrcAwsListFolder(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dSrcAwsListFolder
#   - Name:
#       _t4dSrcAwsListFolder
###
#   - Synopsis:
#       return quick list of aws s3 folder content
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=Unknown
    local _path="$1"
    $WS_AWS_CLI_PATH s3 ls $1 | rev | cut -d ' ' -f1 | rev

###############################
}

_t4dSrcAwsList(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dSrcAwsList
#   - Name:
#       _t4dSrcAwsList
###
#   - Synopsis:
#       return quick list of aws s3 folder content
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=Unknown
    local _path="$1"
    case $2 in
        folder)
            $WS_AWS_CLI_PATH s3 ls --human-readable $_path | rev | grep '^/' | cut -d ' ' -f1 | rev
        ;;
        file)
            $WS_AWS_CLI_PATH s3 ls --human-readable $_path | rev | grep -v '^/' | cut -d ' ' -f1 | rev
        ;;
        *)
            local _Output="$($WS_AWS_CLI_PATH s3 ls --human-readable --summarize $_path | sed '/^$/d')"
            if [[ "$_Output" != "" ]]; then
                local _Files="$(echo $_Output | grep -v 'Total Size:' | grep -v '^Total Objects:' | rev | grep -v '^/' | cut -d ' ' -f1 | rev | sed 's/^/file|/g')"
                local _Folders="$(echo $_Output | rev | grep  '^/' | cut -d ' ' -f1 | rev | sed 's/^/folder|/g')"
                local _ObjectsSize="$(echo $_Output | grep -Eo 'Total Size:.*' | sed 's|Total Size: ||g' | sed 's/^/size|/g')"
                local _ObjectsCount="$(echo $_Output | grep -Eo 'Total Objects:.*' | sed 's|Total Objects: ||g' | sed 's/^/count|/g')"
                echo "$_ObjectsSize\n$_ObjectsCount\n${_Folders}\n${_Files}" | sed '/^$/d'
            fi
        ;;
    esac
    

###############################
}

_t4dSrcAwsListBuckets(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dSrcAwsListBuckets
#   - Name:
#       _t4dSrcAwsListBuckets
###
#   - Synopsis:
#       return quick list of aws s3 folder content
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=0
    local _path="s3://"
    
    local _AvailableBucket="$($WS_AWS_CLI_PATH s3 ls $_path | rev | cut -d ' ' -f1 | rev | sed 's|$|/|g' 2> /dev/null)"
    if [[ "$_AvailableBucket" == "" ]]; then
        _t4dSrcAwsCheckCredentials || return 404
        
        _t4dCheckFailed "Something went wrong"
        _t4dCheckInfo "s3 does not contains any bucket ? Please check your permission"
        _t4dCheckInfo "Please check aws configuration"

        return $_t4dErrorCode
    else
        echo $_AvailableBucket
    fi

###############################
}

_t4dSrcAwsExportFile(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.1
_t4dDebugInfoStart "_t4dSrcAwsExportFile" "$#" "$@"
###### _t4dSrcAwsExportFile
#   - Name:
#       _t4dSrcAwsExportFile
###
#   - Synopsis:
#       Push file to s3
###
#   - Usage:
#       _t4dSrcAwsExportFile <ServerPath> <LocalPath> <FileName>
#       _t4dSrcAwsExportFile -f <ServerPath> <LocalPath> <FileName>
###
#   - Available Options:
#       -f          = Erase file on aws if already exist. To be used carefully
###
#   - Example:
#       _t4dSrcAwsExportFile "$WS_AMAZON_S3_ROOT/Qt-opensource/src" "$WS_ROOT/archive" "Qt-opensource-5.10.1.tar.xz"
###
###### DOCUMENTATION BLOC #####
    local _EraseIfExist="false"
    if [[ "$1" == "-f" ]]; then
        _EraseIfExist="true"
        shift
    fi
    local _ServerPath="$(echo $1 | sed 's|/$||g')"
    local _LocalPath="$2"
    local _File="$3"
    local _Files="$($WS_AWS_CLI_PATH s3 ls "$_ServerPath/" | cut -d ' ' -f5)"
    if [[ -e "$_LocalPath/$_File" ]]; then
        if [[ "$($WS_AWS_CLI_PATH s3 ls "$_ServerPath/$_File")" != "" ]]; then
            if [[ "$_EraseIfExist" == "true" ]]; then
                _t4dCheckInfo "$_File Already Exist, Replacing file"
                _t4dSrcAwsRm "$_ServerPath/$_File"
                _t4dSrcAwsCp "$_LocalPath/$_File" "$_ServerPath/$_File"
                
            else
                _t4dCheckSucceeded "$_File Already exists"
            fi
            
        else
            _t4dCheckInfo "Uploading $_File"
            _t4dSrcAwsCp "$_LocalPath/$_File" "$_ServerPath/$_File"
        fi
    else
        _t4dDebugLog $perror "Local File $_File does not exist in $_LocalPath"
        return 201
    fi

###############################
_t4dDebugInfoEnd "_t4dSrcAwsExportFile" "$@"  
}

_t4dSrcAwsSyncStatus(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.1
_t4dDebugInfoStart "_t4dSrcAwsSyncStatus" "$#" "$@"
###### _t4dSrcAwsSyncStatus
#   - Name:
#       _t4dSrcAwsSyncStatus
###
#   - Synopsis:
#       |One-line description of what it does. (less than 55 char)|
###
#   - Usage:
#       _t4dSrcAwsSyncStatus <ServerPath> <LocalPath>
###
#   - Example:
#       _t4dSrcAwsSyncStatus "$WS_AMAZON_S3_ROOT/Qt-opensource/src" "$WS_ROOT/Archive"
###
###### DOCUMENTATION BLOC #####

    local _ServerPath="$1"
    local _LocalPath="$2"
    local _Files="$($WS_AWS_CLI_PATH s3 ls "$_ServerPath/" | grep '.tar' | cut -d ' ' -f5)"
    for _File in $(echo $_Files); do
        if [[ -e "$_LocalPath/$_File" ]]; then
            echo "${plgreen}${_File}${pstd}"
        else
            echo "${pigreen}${_File}${pstd}"
        fi
    done
    for _File in $(ls $_LocalPath); do
        if [[ "$(echo $_Files | grep "$_File")" == "" ]]; then
            echo "${plcyan}${_File}${pstd}"
        fi
    done

###############################
_t4dDebugInfoEnd "_t4dSrcAwsSyncStatus" "$@"  
}

_t4dSrcAwsPingMainName(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dSrcAwsPingMainName
#   - Name:
#       _t4dSrcAwsPingMainName
###
#   - Synopsis:
#       ping aws.amazon.com to confirm aws access
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _output=$(_t4dPing aws.amazon.com)

    if [[ "$_output" == "" ]]; then
        echo "aws.amazon.com is unreachable, are you connected to internet ?"
        return 1
    fi

    return 0

###############################
}

_t4dSrcAwsCheckCredentials(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dSrcAwsCheckCredentials
#   - Name:
#       _t4dSrcAwsCheckCredentials
###
#   - Synopsis:
#       check credentials file existance and consistency
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    if [[ ! -e "~/.aws/credentials" ]]; then
        echo "Credentials file don't exist. Please run aws config"
        return 1;
    elif [[ "$(grep "aws" -c ~/.aws/credentials)" != "2" ]]; then
        echo "Credentials file inconsistent. Please run aws config"
        return 1
    fi

    return 0

###############################
}
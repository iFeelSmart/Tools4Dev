#CODE ERROR : 252

_t4dGitLabCheckLogIn(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dGitLabCheckLogIn
#   - Name:
#       _t4dGitLabCheckLogIn
###
#   - Synopsis:
#       This Method simply check GitLab Login, return error message if any, return null if login succeed
###
#   - Usage:
#       * _t4dGitLabCheckLogIn
#
###
#   - Example:
#       * [[ "$(_t4dGitLabCheckLogIn)" != 'null' ]] && return <ErrorCode>
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/gitlab/_t4dGitLabCheckLogIn.json"
    _t4dGitLabUserAPIGet "$_OuputjsonFile"
    local _message="$(_t4dGetJsonData ${_OuputjsonFile} ".message")" 2> /dev/null
    if [[ "$_message" != "" ]] then;
        echo "$_message"
    else
        echo "null"
    fi

###############################
}

_t4dGitLabSafetyCheck(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dGitLabSafetyCheck
#   - Name:
#       _t4dGitLabSafetyCheck
###
#   - Synopsis:
#       Launch a series of important check before using GitLab API
#       Return 320 if there is any problem, true if all is good
###
#   - Usage:
#       * _t4dGitLabSafetyCheck
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    ## Gitlab Token #####################################

    [[ "${GITLAB_TOKEN}" == "" ]] && (>&2 echo "${plred}ERROR 320${pstd} in bb8 : GITLAB_TOKEN variable is empty") && return 320

    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/gitlab/_t4dGitLabGetMainPage.json"
    if [[ "$(_t4dGitLabGetMainPage $_OuputjsonFile 2>&1 | grep 'ERROR')" != "" ]]; then
        _t4dPromptError "320 in bb8" "Can't Reach GitLab - https://$_t4dGitLabURL" && return 320
    fi
    if [[ "$(_t4dGitLabCheckLogIn)" != 'null' ]]; then
        _t4dPromptError "320 in bb8" "$(_t4dGitLabCheckLogIn)" && return 320
    fi 

###############################
}

_t4dSrcGitLabUtilsListRemoteBranches(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcGitLabUtilsListRemoteBranches
#   - Name:
#       _t4dSrcGitLabUtilsListRemoteBranches
###
#   - Synopsis:
#       List available remote branches for a project
###
#   - Usage:
#       * _t4dSrcGitLabUtilsListRemoteBranches <KEY> <REPO> <Filter>
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _KEY="$1"
    local _REPO="$2"
    local _Filter="$(echo "&search=$3" | sed 's|/|%2F|g')"
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dSrcGitLabUtilsListRemoteBranches.json"
    _t4dGitLabProjectAPIListBranches "$_KEY" "$_REPO" $_OuputjsonFile "$_Filter"
    local _size=$(expr $(_t4dGetJsonData ${_OuputjsonFile} 'length') - 1) 2> /dev/null
    local _List=""
    for i in $(seq 0 $_size); do
        echo "$(_t4dGetJsonData ${_OuputjsonFile} ".[$i].name" )"
    done

###############################
}

_t4dGitLabMRStart(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dGitLabMRStart
#   - Name:
#       _t4dGitLabMRStart
###
#   - Synopsis:
#       Global function that will create a pull request with default behavior
###
#   - Usage:
#       * _t4dGitLabMRStart <option> [argument]
#
###
#   - Available Options:
#       -s <arg>     = Override Source Branch
#       -b <arg>     = Override Destination Branch
#       -r <arg>     = Select repository
#       -t <arg>     = Override Pull Request Title
#       -d <arg>     = Provide Description file
#       -u <arg>     = Append file with PR URL
#       -v           = Open vim to create Pull Request Description
#       -f           = [ADVANCED USER ONLY] Force -> Will post without asking
#       -q           = Quiet option
#       -done        = do not add 'WIP: ' to title
#
###
#   - Example:
#       * _t4dGitLabMRStart -b develop -done
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _force=""
    local _quiet=""

    local _Repository=""
    local _Project=""
    local _CurrentBranch=""
    local _Title="[WIP]"
    local _Description=""
    local _urlFile=""
    local _InputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dGitLabMRStartInput.json"
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dGitLabMRStartOutput.json"
    while [[ "$@" != "" ]]; do
        case $1 in
            -s)
                _CurrentBranch="$2"
                shift
                shift
            ;;
            -b)
                _DestBranch="$2"
                shift
                shift
            ;;
            -r)
                _Repository="$(_t4dFindDataInXML "project" "${2}" "name" "$WS_ROOT/manifest")"
                cd "$WS_ROOT/$2"
                shift
                shift
            ;;
            -done)
                _Title="[DONE]"
                shift
            ;;
            -t)
                _Title="$2"
                shift
                shift
            ;;
            -d)
                _Description="$(tail -n+1 $2 | sed 's|$|\\n|g' | tr -d '\n' | tr -d '\011')"
                shift
                shift
            ;;
            -v)
                if [[ -x $(which vim) ]]; then
                    echo "" > "$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/.desc"
                    (>&2 echo "${plblue}Argument sent : -v${pstd}")
                    (>&2 echo "${plblue}   - will open vim to create pull request description${pstd}")
                    (>&2 echo "Enter to proceed, Ctrl+C to abort")
                    read -n
                    vim "$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/.desc"
                    _Description="$(tail -n+1 $T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/.desc | sed 's|$|\\n|g' | tr -d '\n' | tr -d '\011')"
                    rm "$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/.desc"
                else
                    (>&2 echo "${plred}ERROR 102${pstd} in _t4dGitLabMRStart : can't find Vim")
                    return 102
                fi
                shift
            ;;
            -f)
                _force="true"
                shift
            ;;
            -q)
                _quiet="true"
                shift
            ;;
            -u)
                _urlFile=$2
                shift
                shift
            ;;
            *)
                _t4dModBb8UtilsError 252 "_t4dGitLabMRStart" "Unknown Argument $1"
                return 252
            ;;
         esac
    done
    
    ##### Default Values 
    [[ "$_Repository" == "" ]]    && local _Repository="$(_t4dSrcGitInfoRepoName)"
    [[ "$_Project" == "" ]]       && local _Project="$(_t4dSrcGitInfoProjectKEY)"
    [[ "$_CurrentBranch" == "" ]] && local _CurrentBranch="$(_t4dSrcGitInfoBranch)"
    [[ "$_DestBranch" == "" ]]    && local _DestBranch="$(_t4dFindDataInXML "default" "$(_t4dFindDataInXML project $_Repository default "$WS_ROOT/manifest")" "revision" "$WS_ROOT/manifest")"
    [[ "$_Title" == "[WIP]" ]]    && local _Title="$(_t4dGitLabDefaultWIPTag)$(_t4dModBb8UtilsNormalizeBranch $_CurrentBranch)"
    [[ "$_Title" == "[DONE]" ]]   && local _Title="$(_t4dGitLabDefaultFinishedPrefix)$(_t4dModBb8UtilsNormalizeBranch $_CurrentBranch)"
    #[[ "$_Title" == "[READY TO REVIEW]" ]]   && local _Title="${_Title}$(_t4dModBb8UtilsNormalizeBranch $_CurrentBranch)"
    ####################
    
    cd $WS_ROOT
    
    if [[ "$_force" != 'true' ]]; then
        _t4dPromptSquare "${_Project}/${_Repository}"
        _t4dPromptInfo "Title" ${_Title} 6
        echo ""
        echo "      From   ${_CurrentBranch}  to  ${_DestBranch}"
        echo ""
        echo "${plpurple}Description : ${pstd}"
        echo "$_Description"
        cd $_OLDPWD
        
        echo "Press enter to create Pull Request, Ctrl+C to abort"
        read -n
        cd $WS_ROOT
    else
        echo "${plpurple}${_Repository} ${pstd}"
    fi
    
    ##### Tests Before Publish
    [[ "$_CurrentBranch" == "${_DestBranch}" ]] && _t4dModBb8UtilsError 252 "_t4dGitLabMRStart" "Current Branch and Dest Branch are identical" && return 252
    ##########################

    local _RemoveSourceBr="true"
    local _Squash="true"

cat > $_InputjsonFile << EOF
    {
        "title": "$_Title",
EOF
if [[ "$_Description" != "" ]]; then
cat >> $_InputjsonFile << EOF
        "description": "$_Description",
EOF
fi
cat >> $_InputjsonFile << EOF
        "remove_source_branch": "$_RemoveSourceBr",
        "squash": "$_Squash"
    }
EOF

    _t4dGitLabMergeRequestAPICreate "$_Project/$_Repository" "$_CurrentBranch" "$_DestBranch" "${_InputjsonFile}" "${_OuputjsonFile}"
    
    local _URL=""
    
    if [[ "${_quiet}" != "true" ]]; then
        _t4dGitLabGetServerResponse "${_OuputjsonFile}"
    fi

    [[ "${_urlFile}" != "" ]] && [[ "${_URL}" != "" ]] && echo "${_URL}/diffs\n" >> ${_urlFile}

###############################
}

_t4dGitLabGetServerResponse(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dGitLabGetServerResponse
#   - Name:
#       _t4dGitLabGetServerResponse
###
#   - Synopsis:
#       Read and Parse Json Output after server interaction
###
#   - Usage:
#       * _t4dGitLabGetServerResponse <Json file>
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _OuputjsonFile="$1"
    if [[ $(tail -n+1 "${_OuputjsonFile}" | grep 'message') == '' ]]; then
        _URL="$(_t4dGetJsonData ${_OuputjsonFile} ".web_url")"
        echo "${plgreen}${_URL}${pstd}"
    else
        local _message="$(_t4dGetJsonData ${_OuputjsonFile} ".message[0]")"
        _URL="https://$_t4dGitLabURL/$_Project/$_Repository/-/merge_requests/$(echo $_message | cut -d '!' -f2)"
        echo "${plred}${_URL}${pstd}"
    fi

###############################
}

_t4dGitLabDeleteBranch(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dGitLabDeleteBranch
#   - Name:
#       _t4dGitLabDeleteBranch
###
#   - Synopsis:
#       Remove branch
###
#   - Usage:
#       * _t4dGitLabDeleteBranch <KEY> <REPO> <branch>
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    _t4dDebugLog $perror "Paint hasn't dried yet"
    return 1

    #HERE
    local _GetJsonDefaultPath="$1"
    local _OuputjsonFile="$2"
    local _branch="$(tail -n+1 $_OuputjsonFile | grep -A1 '^Branches' | tail -1 | cut -d ':' -f2 | sed 's| From |%|g' | sed 's| to |%|g' | cut -d '%' -f2 | sed 's| ||g')"
    #This is here because bitbucket randomise http or ssh order links in clone tab doesn't have time to get it properly
    local _RemoteURL1="$(_t4dGetJsonData ${_GetJsonDefaultPath} ".fromRef.repository.links.clone[0].href" | grep 'ssh')"
    local _RemoteURL2="$(_t4dGetJsonData ${_GetJsonDefaultPath} ".fromRef.repository.links.clone[1].href" | grep 'ssh')"
    local _RemoteURL="${_RemoteURL1}${_RemoteURL2}"
    if [[ "$(tail -n+1 $_OuputjsonFile | grep '^State' | cut -d ':' -f2 | sed 's| ||g')" == "MERGED" ]]; then
        _t4dSrcGitDeleteBranch $_branch $_RemoteURL 'true'
    elif [[ "$(tail -n+1 $_OuputjsonFile | grep '^State' | cut -d ':' -f2 | sed 's| ||g')" == "DECLINED" ]]; then
        _t4dPromptSquare 'PullRequest marked as Declined' ${plyellow}
        _t4dSrcGitDeleteBranch $_branch $_RemoteURL 'true'
    fi

    

###############################
}

_t4dSrcGitLabUtilsMultiMerge(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcGitLabUtilsMultiMerge
#   - Name:
#       _t4dSrcGitLabUtilsMultiMerge
###
#   - Synopsis:
#       This is a global function that will merge a pull request to its destination, to be use carefully
###
#   - Available Options:
#       PullRequests Lists      = Variable that contains list of URLs
#       force                   = If true, don't ask for Merge at every Pull Requests TO BE USED CAREFULY
#
###
#   - Usage:
#       * _t4dSrcGitLabUtilsMultiMerge <PullRequests Lists> <force>
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local _RelatedPRs=$1
    local _Force=$2
    local _DeleteBranch=${3:-true}
    local _SquashCommits=${4:-false}
    local _OuputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dSrcGitLabUtilsMultiMerge.json"
    local _GetJsonDefaultPath="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsGet.json"
    local _InputjsonFile="$T4D_PROJECT_LOG_PATH/$T4D_BB8_MODE/_t4dModBb8UtilsMultiMergeInput.json"

cat > $_InputjsonFile << EOF
{
    "squash": "${_SquashCommits}",
    "should_remove_source_branch": "${_DeleteBranch}"
}
EOF
    
    for _RelatedPR in $(echo $_RelatedPRs); do
        echo "" > $_OuputjsonFile
        if [[ "$_Force" == 'true' ]]; then
            _t4dModBb8UtilsGet $_RelatedPR > $_OuputjsonFile
        else
            _t4dModBb8UtilsGet $_RelatedPR | tee -a $_OuputjsonFile
        fi
         
        local __URL=$(_t4dGetJsonData "$_GetJsonDefaultPath" '.web_url')
        local __PullRequestUuid="$(_t4dGitLabUtilsGetPullRequestUuid $__URL)"
        local __KEY="$(echo $__PullRequestUuid | cut -d "|" -f1)"
        local __REPO="$(echo $__PullRequestUuid | cut -d "|" -f2)"
        local __ID="$(echo $__PullRequestUuid | cut -d "|" -f3)"
        _t4dPromptInfo "${__KEY}/${__REPO}" "${__ID}" 20
        if [[ "$_Force" == 'false' ]]; then
            echo "Press enter to merge Pull Request, Ctrl+C to abort"
            read -n
        fi
        _t4dGitLabMergeRequestAPIMerge "${__KEY}/${__REPO}" "${__ID}" "${_InputjsonFile}" "${_OuputjsonFile}"
        local _MESSAGE="$(_t4dGetJsonData ${_OuputjsonFile} ".message")"
        if [[ "$(echo $_MESSAGE | grep 'has already been merged' )" != "" ]]; then
            _t4dDebugLog $pinfo "$_MESSAGE"
        elif [[ "$_MESSAGE" != "null" ]]; then
            _t4dPromptSquare "$_MESSAGE" "$plred"
            return 320
        fi
    done

###############################
}
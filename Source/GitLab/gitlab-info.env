_t4dGitLabMRInfoGetAllApprovers(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dGitLabMRInfoGetAllApprovers
#   - Name:
#       _t4dGitLabMRInfoGetAllApprovers
###
#   - Synopsis:
#       Get approvers status from json file
###
#   - Usage:
#       * _t4dGitLabMRInfoGetAllApprovers <InputJsonFile>
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local __APPROVERS="$(_t4dGetJsonData ${1} ".approvers | length" )"
    for _Approver in $(seq 0 $(expr $__APPROVERS - 1)); do
        local __NAME="$(_t4dGetJsonData ${1} ".approvers[$_Approver].user.name")"
        local __REVIEW="$(_t4dGetJsonData ${1} ".approved_by" | grep "$__NAME" )"
        [[ "$__REVIEW" != "" ]] && echo "    - ${plgreen}APPROVED${pstd} $__NAME"
        [[ "$__REVIEW" == "" ]] && echo "    - ${plyellow}WAITING${pstd} $__NAME"
    done

###############################
}

_t4dGitLabMRInfoGetReviewersName(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dGitLabMRInfoGetReviewersName
#   - Name:
#       _t4dGitLabMRInfoGetReviewersName
###
#   - Synopsis:
#       Get approvers name from json file
#       Will not contain approver status
###
#   - Usage:
#       * _t4dGitLabMRInfoGetReviewersName <InputJsonFile>
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    local __APPROVERS="$(_t4dGetJsonData ${1} ".approvers | length" )"
    if [[ "$__APPROVERS" != "0" ]]; then
        for i in $(seq 0 $(expr $__APPROVERS - 1)); do
            local __NAME="$(_t4dGetJsonData ${1} ".approvers[$_Approver].user.name")"
            echo "$__NAME"
        done
    fi

###############################
}

_t4dGitLabMRInfoGetDescription(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dGitLabMRInfoGetDescription
#   - Name:
#       _t4dGitLabMRInfoGetDescription
###
#   - Synopsis:
#       Return PullRequest Description from jsonFile
###
#   - Usage:
#       * _t4dGitLabMRInfoGetDescription <InputJsonFile>
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    _t4dGetJsonData $1 ".description" | sed 's|null||g' | sed 's|\r||g' | sed 's|$|\\n|g' | sed 's|"|\\"|g' | tr -d '\n'

###############################
}

_t4dGitLabGetRelatedPullRequests(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dGitLabGetRelatedPullRequests
#   - Name:
#       _t4dGitLabGetRelatedPullRequests
###
#   - Synopsis:
#       Get all related pull request listed in a global PR
###
#   - Usage:
#       * _t4dGitLabGetRelatedPullRequests <InputJsonFile>
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    echo "$(_t4dGetJsonData ${1} ".description" | grep -A100 'Related Pull Requests' | grep '^http' | sed 's|\r||g' | sed 's|$|\\n|g')"

###############################
}

_t4dGitLabParseBuildStatus(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dGitLabParseBuildStatus
#   - Name:
#       _t4dGitLabParseBuildStatus
###
#   - Synopsis:
#       Parse Json Output to generate Build Status Info
###
#   - Example:
#       * _t4dGitLabParseBuildStatus test.json
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    if [[ "$1" == "-prompt" ]]; then
        shift
        local _yellow="$lyellow"
        local _green="$lgreen"
        local _red="$lred"
        local _std="$std"
    else
        local _yellow="$plyellow"
        local _green="$plgreen"
        local _red="$plred"
        local _std="$pstd"
    fi
    local _Succeed="$(cat $1 | grep '"state": "SUCCESSFUL"' | wc -l | tr -d ' ')"
    local _Failed="$(cat $1 | grep '"state": "FAILED"' | wc -l | tr -d ' ')"
    local _Progress="$(cat $1 | grep '"state": "INPROGRESS"' | wc -l | tr -d ' ')"
    local _Res=""
    
    if [[ $_Progress  -gt 0 ]]; then
        _Res="${_Res} ${_yellow}${_Progress}?${_std}"
    fi
    if [[ $_Succeed -gt 0 ]]; then
        _Res="${_Res} ${_green}${_Succeed}✔${_std}"
    fi
    if [[ $_Failed -gt 0 ]]; then
        _Res="${_Res} ${_red}${_Failed}✖${_std}"
    fi
    echo "${_Res}"

###############################
}

_t4dGitLabGetRefBranchName(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dGitLabGetRefBranchName
#   - Name:
#       _t4dGitLabGetRefBranchName
###
#   - Synopsis:
#       Get base branch name from a global PR
###
#   - Usage:
#       * _t4dGitLabGetRefBranchName <InputJsonFile>
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    echo "$(_t4dGetJsonData ${1} ".source_branch")"

###############################
}

_t4dGitLabUtilsGetPullRequestUuid(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dGitLabUtilsGetPullRequestUuid
#   - Name:
#       _t4dGitLabUtilsGetPullRequestUuid
###
#   - Synopsis:
#       Get important information in order to edit merge or get a PullRequest, return <KEY>|<REPO>|<ID>
###
#   - Usage:
#       * _t4dGitLabUtilsGetPullRequestUuid | cut -d '|' -f1
#       * _t4dGitLabUtilsGetPullRequestUuid | cut -d '|' -f2
#       * _t4dGitLabUtilsGetPullRequestUuid | cut -d '|' -f3
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    if [[ "$(echo $1 | grep "$_t4dGitLabURL" )" != "" ]]; then
        local _url=$(echo $1 | sed "s|//$_t4dGitLabURL/||g" | sed 's|https\?:||g')
        local _intermediate="$(echo $_url | sed 's|/-/|#|g')"
        local _ID="$(echo $_intermediate | cut -d "#" -f2 | cut -d '/' -f2)"
        local _REPO="$(echo $_intermediate | cut -d "#" -f1 | rev | cut -d '/' -f1 | rev)"
        local _KEY="$(echo $_intermediate | cut -d "#" -f1 | sed "s|/$_REPO||g")"
    else
        local _ID="$1"
        local _KEY="$2"
        local _REPO="$3"
    fi

    if [[ "${_KEY}" == "" ]] || [[ "${_REPO}" == "${_ID}" ]]; then
        _KEY="$(_t4dSrcGitInfoProjectKEY)"
        _REPO="$(_t4dSrcGitInfoRepoName)"
    fi

    echo "$_KEY|$_REPO|$_ID"

###############################
}

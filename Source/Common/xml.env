#CODE ERROR : 204

_t4dFindDataInXML(){
###### _t4dFindDataInXML
#   Find data in xml file
#   Usage : _t4dFindDataInXML "<type>" "<typeName>" "<Data>"
#   Exemple : _t4dFindDataInXML "default" "default" "revision"
###### DOCUMENTATION BLOC #####
    local _type=$1
    local _name=$2
    local _attribute=$3
    local _filename="$(echo ${4:-manifest} | sed 's|\.xml$||g')"
    if [[ -e "${_filename}.xml" ]]; then
        cat ${_filename}.xml | grep "<${_type} " | grep "\"${_name}\"" | grep -Eo " ${_attribute}=.{0,200}" | cut -d '"' -f2
    else
        _t4dDebugLog $pwarning "_t4dFindDataInXML - ${_filename}.xml File Not Found"
    fi
    
}

_t4dFindDataInXmlV2(){
###### _t4dFindDataInXmlV2
#   Find data in xml file
#   Usage : _t4dFindDataInXmlV2 <type> <typeName> <Name> <Data> [ManifestPath]
#   Exemple : _t4dFindDataInXmlV2 "default" "name" "default" "revision"
###### DOCUMENTATION BLOC #####
    local _type=$1
    local _nameType=$2
    local _name=$3
    local _attribute=$4
    local _filename="$5"

    _t4dManifestXmlGetData "$_type" "$_nameType" "$_name" "$_attribute" "$_filename"
    _t4dDebugLog $pwarning "This is deprecated, please use _t4dManifestXmlGetData"
    
}

_t4dFindLineInXml(){
###### _t4dFindLineInXml
#   Find data in xml file
#   Usage : _t4dFindLineInXml <type> <typeName> <Name> [ManifestPath]
#   Exemple : _t4dFindLineInXml "default" "name" "default" "revision"
###### DOCUMENTATION BLOC #####
    local _type=$1
    local _nameType=$2
    local _name=$3
    local _filename="$4"
    
    _t4dManifestXmlGetLine "$_type" "$_nameType" "$_name" "$_filename"
    _t4dDebugLog $pwarning "This is deprecated, please use _t4dManifestXmlGetLine"
}

_t4dFindTypeInXML(){
###### _t4dFindTypeInXML
#   Find each type specified in first arg in xml file (default is manifest)
#   Usage : _t4dFindTypeInXML <type> [filename]
###### DOCUMENTATION BLOC #####
    local _type=$1
    local _filename="$(echo ${2:-manifest} | sed 's|\.xml$||g')"
    if [[ -e "${_filename}.xml" ]]; then
        cat ${_filename}.xml | grep "<${_type} " | grep -Eo " path=.{0,200}" | cut -d '"' -f2
    else
        _t4dDebugLog $pwarning "_t4dFindTypeInXML - ${_filename}.xml File Not Found"
        return 1
    fi
}

_t4dFindMarkerInXML(){
###### _t4dFindMarkerInXML
#   Find each type specified in first arg in xml file (default is manifest)
#   Usage : _t4dFindMarkerInXML <type> <marker> [filename]
###### DOCUMENTATION BLOC #####

    local _type=$1
    local _marker=$2
    local _filename="${3}"

    _t4dManifestXmlGetMarker "$_type" "$_marker" "$_filename"
    _t4dDebugLog $pwarning "This is deprecated, please use _t4dManifestXmlGetMarker"
}

_t4dSrcXmlGetSection(){
# Generated From Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dSrcXmlGetSection
#   - Name:
#       _t4dSrcXmlGetSection
###
#   - Synopsis:
#       Read XML and try to search for section(s) with given args
###
#   - Usage:
#       _t4dSrcXmlGetSection <file|xmlContent> [section1] [section2] ...
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _ContentFile="${1:-empty}"
    local _Section="${@:2}"
    local _Res=""
    local _LastWord="lastOne"
    local _CountLine=""
    local _EmptyElement=""
    local _Word=""
    local _Content=""

    if [[ -e "${_ContentFile}" ]]; then
        _Content="$(cat $_ContentFile)"
    else
        _Content="$_ContentFile"
    fi
    if [[ "$_Section" != "" ]]; then
        _Res="$_Content"
        for _Word in $(echo $_Section); do
            _EmptyElement="$(echo $_Res | grep -Eo "<${_Word} .*/>" || echo "" )"
            _Res="$(echo $_Res | grep -A 100 "<$_Word.*" | grep -B 100 "</$_Word>")"
            _LastWord="$_Word"
            if [[ "$_Res" == "" ]] && [[ "$_EmptyElement" != "" ]]; then
                _Res="$_EmptyElement"
                _t4dDebugLog $pwarning "_t4dSrcXmlGetSection - Empty Element found"
                break
            fi
        done
        _CountLine="$(echo $_Res | wc -l | tr -d ' ')"
        if [[ "$_CountLine" == "1" ]]; then
            echo "$_Res" | sed "s|^ *<${_LastWord}>||g" | sed "s|</${_LastWord}>||g"
        else
            local _Indent="$(echo "$_Res" | head -1 | grep -Eo '^ *')"
            echo "$_Res" | sed "s|^${_Indent:-null}||g"
        fi
    else
        echo $_Content
    fi

###############################
}

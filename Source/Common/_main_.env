#ERROR CODE 201
source $T4D_SOURCE_PATH/Common/json.env
source $T4D_SOURCE_PATH/Common/system.env
source $T4D_SOURCE_PATH/Common/variable.env
source $T4D_SOURCE_PATH/Common/xml.env
source $T4D_SOURCE_PATH/Common/debug.env
source $T4D_SOURCE_PATH/Common/xcarchive.env
source $T4D_SOURCE_PATH/Common/html.env
source $T4D_SOURCE_PATH/Common/version.env
source $T4D_SOURCE_PATH/Common/boolean.env
source $T4D_SOURCE_PATH/Common/plist.env
source $T4D_SOURCE_PATH/Common/properties.env

source $T4D_SOURCE_PATH/Common/_project_.env
source $T4D_SOURCE_PATH/Common/_tools_.env
source $T4D_SOURCE_PATH/Common/_team_.env


[[ "$_t4dDebug" == 'true' ]] && echo "Sourcing Common/_main_.env"



t4dLogo(){
##### t4dLogo
cat &>/dev/null << EOF
#    Will show Tools4Dev ascii logo :p
EOF
##### DOCUMENTATION BLOC #####
    local center="$(_t4dPromptCenterSpace '48' | sed 's|-||g')"
    echo "${pgreen}${center}  _____            _     _  _     ___           ${pstd}"
    echo "${pgreen}${center} /__   \___   ___ | |___| || |   /   \_____   __${pstd}"
    echo "${pgreen}${center}   / /\/ _ \ / _ \| / __| || |_ / /\ / _ \ \ / /${pstd}"
    echo "${pgreen}${center}  / / | (_) | (_) | \__ \__   _/ /_//  __/\ V / ${pstd}"
    echo "${pgreen}${center}  \/   \___/ \___/|_|___/  |_|/___ / \___| \_/  ${pstd}"
    echo ""
}

_t4dParseModuleArguments(){
    local _res=""
    if [[ $2 == "help" ]]; then
        _res="$2 $1 ${@:3}"
    else
        _res="$@"
    fi
    echo $_res
}

t4dSearch(){
# Generated From Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### t4dSearch
#   - Name:
#       t4dSearch
###
#   - Synopsis:
#       description
###
#   - Usage:
#       t4dSearch <word1> [word2] [word3] 
###
#   - Example:
#       * t4dSearch ip
#       * t4dSearch prompt var
#       * t4dSearch prompt square
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _Error="false"
    local _TeamFunctions _OldRes _Res
    if [[ -e "$T4D_TEAM_ROOT/.Ressources/index" ]]; then
        _TeamFunctions="$(cat $T4D_TEAM_ROOT/.Ressources/index/public.index $T4D_TEAM_ROOT/.Ressources/index/private.index | grep -v '^#' | cut -d ':' -f2)"
    fi

    local _T4dFunctions="$(cat $Tools4Dev_PATH/.Ressources/index/public.index $Tools4Dev_PATH/.Ressources/index/private.index | grep -v '^#' | cut -d ':' -f2)"
    if [[ "$1" == "-h" ]]; then
        t4dHelp t4dSearch
        return 0
    elif [[ $# -gt 0 ]]; then
        _OldRes="$_T4dFunctions\n${_TeamFunctions}"
    fi

    for _Arg in $@; do
        local _FirstLetter="${_Arg:0:1}"
        local _FirstLetterUpper="$(echo ${_Arg:0:1} | tr '[:lower:]' '[:upper:]')"
        local _Rest="${_Arg:1}"
        _Res="$(echo $_OldRes | grep "[${_FirstLetter}${_FirstLetterUpper}]${_Rest}")"
        if [[ "$_Res" == "" ]] && [[ "$_Arg" == "$1" ]]; then
            _Error="true"
            _OldRes=""
            break
        elif [[ "$_Res" == "" ]]; then
            _Error="true"
            _Res="$_OldRes"
            break
        fi
        _OldRes="$_Res"
    done

    if [[ "$_OldRes" != "" ]]; then
        _OldRes="$(echo $_Res | tr '\n' ' ')"
        _Count="$(_t4dVarGetMaxSize $(echo $_OldRes))"
        _t4dPromptFixedCol "$(expr ${_Count:-0} + 1)" $(echo $_OldRes)

        if [[ "$_Error" == "true" ]]; then
            _t4dDebugLog $pwarning "No results found, search broke at $_Arg"
        fi
    else
        if [[ "$#" == "0" ]]; then
            _t4dDebugLog $perror "No arguments found"
            _t4dDebugLog $pinfo ">t4dSearch -h< for more information"
            return $_t4dErrorCode
        else
            _t4dDebugLog $perror "No functions found for $@"
            return $_t4dErrorCode
        fi
    fi

###############################
}

t4dPerf(){
##### t4dPerf
cat &>/dev/null << EOF
#    Will execute a Performance Test on any function you want 
EOF
##### DOCUMENTATION BLOC #####
    t4dLogo
    _t4dPromptSquare "Performance Test"
	echo "${ppurple}Command : $@${pstd}"
	unset __START_TIME
	unset __END_TIME
	unset __DIFF_TIME
	local __START_TIME="$(date +%s%3N)"
	(set -x; eval $@ ; set +x) &> ._test.tmp 
    local __END_TIME="$(date +%s%3N)"
	count=$(tail -n+1 ._test.tmp | grep '^+' | wc -l | sed 's| ||g')
	rm ._test.tmp &> /dev/null
	__DIFF_TIME="$(expr ${__END_TIME} - ${__START_TIME})"
	echo ""
	echo ""
	echo ""
	_t4dPromptSquare "Result"
	echo "    CPU Call : $(expr ${count:-2} - 2 )"
	echo "    Time     : $(expr ${__DIFF_TIME} / 1000)sec $(expr ${__DIFF_TIME} % 1000)ms"
}

t4dUpdate(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### t4dUpdate
#   - Name:
#       t4dUpdate
###
#   - Synopsis:
#       Update Tools4Dev Repository
###
#   - Usage:
#       * t4dUpdate                 = checkout on main branchName then update
#       * t4dUpdate <branchName>    = checkout on specific branchName then update
#       * t4dUpdate <tag>           = checkout on specific tag then update
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _OLDPWD=$PWD
    local CHPWD=1
    local _branch="${1:-main}"
    cd $Tools4Dev_PATH
    if [[ -e "$Tools4Dev_PATH/.git" ]]; then
        _t4dDebugLog "$pinfo" "Update Tools4Dev ( $_branch )"
        git checkout $_branch
        git pull

        # This is temporary content modules are now fully external
        _t4dModuleCompatClone(){
            local CHPWD=1
            if [[ ! -e "$T4D_MODULES_PATH/$1" ]]; then
                _t4dDebugLog $pwarning "backward compatibility detected [$1]"
                cd $T4D_MODULES_PATH
                git clone $2 $3
            fi
        }

        tmpModules=("gik" "jks" "vmi" "bb8" "jic")
        for _mod in $(echo $tmpModules); do
            _t4dModuleCompatClone "$_mod" "git@github.com:T4D-Suites/T4D-Module-${_mod}.git" $_mod
        done

        if [[ -e "$T4D_TEAM_ROOT" ]]; then
            _t4dDebugLog "$pinfo" "Update $WS_TEAM"
            cd "$T4D_TEAM_ROOT"
            git pull
        fi
        CHPWD=0
        _t4dDebugLog "${plgreen}[SUCCEED]${pstd}" "Tools4Dev Updated [$(t4dGetVersion)]"
    else
        _t4dDebugLog $pwarning "It seems that you are using Tools4Dev in release mode, to update please use >brew upgrade tools4dev< instead"
    fi
        cd $_OLDPWD &> /dev/null
###############################
}


t4dGetVersion(){
    cat $Tools4Dev_PATH/VERSION
}

t4dLoadModule(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### t4dLoadModule
#   - Name:
#       t4dLoadModule
###
#   - Synopsis:
#       load module if exist, try to clone it if remote or available on t4d-suites
###
#   - Example:
#       * t4dLoadModule gik
#       * t4dLoadModule gik -not-required
#       * t4dLoadModule gik git@github.com:T4D-Suites/T4D-Module-Gik.git
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _Module="$1"
    local _Arg2="$2"
    if [[ -e "$T4D_MODULES_PATH/$_Module/_main_.env" ]]; then
        source "$T4D_MODULES_PATH/$_Module/_main_.env" && _t4dCheckSucceeded "Module $_Module Loaded"
    elif [[ -e "$T4D_MODULES_PATH/$_Module/_main_.external.env" ]]; then
        source "$T4D_MODULES_PATH/$_Module/_main_.external.env" && _t4dCheckSucceeded "Module $_Module Loaded"
    elif [[ -e "$T4D_MODULES_PATH/$_Module/_main_.disabled.env" ]]; then
        _t4dCheckFailed "Can't load Module $_Module, it has been disabled"
    elif [[ "$_Arg2" == "-not-required" ]]; then
        _t4dCheckWarning "Module $_Module not found"
    else
        local CHPWD=1
        local _OLDPWD=$PWD
        cd $T4D_MODULES_PATH
        local _Remote="$_Arg2"
        if [[ "$(git ls-remote git@github.com:T4D-Suites/T4D-Module-${_Module}.git)" != "" ]]; then
            git clone git@github.com:T4D-Suites/T4D-Module-${_Module}.git "${_Module}"
            source "$T4D_MODULES_PATH/$_Module/_main_.env" && _t4dCheckSucceeded "Module $_Module Loaded"
        elif [[ "$(git ls-remote ${_Remote} 2> /dev/null)" != "" ]]; then
            git clone $_Remote "${_Module}"
            source "$T4D_MODULES_PATH/$_Module/_main_.env" && _t4dCheckSucceeded "Module $_Module Loaded"
        else
            _t4dCheckFailed "Can't find any Module named _main_.env in $T4D_MODULES_PATH/$1"
            return 100
        fi
        cd $_OLDPWD
    fi
###############################
}


t4dvv(){
    if [[ "$T4D_VERBOSITY" != "0" ]]; then
        T4D_VERBOSITY=0
        _t4dCheckSucceeded "Verbosity LVL -> $T4D_VERBOSITY"
    else
        T4D_VERBOSITY=1
        _t4dCheckSucceeded "Verbosity LVL -> $T4D_VERBOSITY"
    fi
    wkd
}


if [[ "$T4D_VERBOSITY" != "0" ]]; then
    t4dLogVerbose(){
        (>&2 echo "$(printf "%-0s" ' ')${1} ${@:2}" | sed "s|$WS_ROOT|\$WS_ROOT|g" >> $Tools4Dev_PATH/.log )
    }
else
    t4dLogVerbose(){
        true
    }
fi


t4dCheckForUpdate(){
    local _OLDPWD=$PWD
    local CHPWD=1
    cd $Tools4Dev_PATH
    if [[ -e "$Tools4Dev_PATH/.git" ]]; then
        (git fetch &>> $Tools4Dev_PATH/.log &)
        sleep 15
        if [[ "$(_t4dSrcGitInfoBranchState)" == "behind" ]] && [[ "$T4D_NOTIFICATION" == "true" ]]; then
            echo ""
            _t4dPromptEndOfLine "+=+=+=+=+=+=+=+=+=+=+=+=+" "${plyellow}"
            _t4dPromptEndOfLine "+   New Version of T4D  +" "${plyellow}"
            _t4dPromptEndOfLine "|       Available       |" "${plyellow}"
            _t4dPromptEndOfLine "+       t4dUpdate       +" "${plyellow}"
            _t4dPromptEndOfLine "+=+=+=+=+=+=+=+=+=+=+=+=+" "${plyellow}"
        fi
    fi
    cd $_OLDPWD
}

t4dCheckForLastInit(){
    if [[ -e "$WS_ROOT/.git" ]]; then
        if [[ "$(_t4dSrcGitInfoSha7)" != "$_WksLastLoadSha7" ]]; then
            _t4dCheckWarning "wksLoad might be outdated, last was $_WksLastLoadSha7"
            echo ""
            _t4dPromptEndOfLine "+=+=+=+=+=+=+=+=+=+=+=+=+" "${plpurple}"
            _t4dPromptEndOfLine "+ TIPS :    wksLoad     +" "${plpurple}"
            _t4dPromptEndOfLine "+=+=+=+=+=+=+=+=+=+=+=+=+" "${plpurple}"
        else
            _t4dCheckSucceeded "wksLoad up to date"
        fi
    fi
}


t4dDoc(){
    _t4dDocumentationIntro
    #Table of Contents temporary disabled
    # echo "Press enter to see our Table Of Contents, Ctrl+C to abort"
    # read tmp
}

t4dHelp(){
#### t4dHelp
cat &>/dev/null << EOF
#   This function will help you with function that ready 
#   to be used during Dev you can't use this method with 
#   '_' Prefix function use <t4dDoc> instead.
#
#   Usage : 
#       t4dHelp [-no-logo] [function]
#
#   Exemple : 
#       t4dHelp t4dPerf
#
#   Note : 
#       [] = Optionnal
EOF
##### DOCUMENTATION BLOC #####
    local _Logo="true"
    if [[ "$1" == "-no-logo" ]]; then
        shift
        _Logo="false"
    fi

    if [[ "$2" != "" ]]; then
        if [[ -e "$1" ]]; then
            # _t4dDocConvertContentInto -shell -file "$1"
            local _HeaderBloc="$(_t4dDocGetHeader -file "$1")"
        else
            local _HeaderBloc="$(_t4dDocGetHeader -function "$1")"
        fi
        _t4dDocGetSectionContent "$_HeaderBloc" "$2" | sed 's| `|%%1|g' | sed 's|` |%%2|g' | sed "s|%%1| \\${plblue}|g" | sed "s|%%2|\\${pstd} |g"
    elif [[ -e "$1" ]]; then
        _t4dDocConvertContentInto -shell -file "$1"
    else
        if [[ "$_Logo" == "true" ]]; then
            _t4dDocLogo
        fi
        _t4dDocConvertContentInto -shell -function "$1"
    fi

}

_t4dCountLine(){
    cat $1 | grep -v '^#' | wc -l  | sed 's| ||g'
}
_t4dCountComment(){
    cat $1 | grep '^#' | wc -l  | sed 's| ||g'
}

t4dImportExample(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.1
_t4dDebugInfoStart "t4dImportExample" "$#" "$@"
###### t4dImportExample
#   - Name:
#       t4dImportExample
###
#   - Synopsis:
#       Import Tools4Dev Example Project Architecture
###
#   - Example:
#       * t4dImportExample
#           Launch this command from a new repositories
###
###### DOCUMENTATION BLOC #####

    mkdir -p _t4d_
    cp $Tools4Dev_PATH/Templates/0-Example-0/_t4d_/_main_.env _t4d_/
    cp $Tools4Dev_PATH/Templates/0-Example-0/_t4d_/_variable_.env _t4d_/
    cp $Tools4Dev_PATH/Templates/0-Example-0/_t4d_/dependencies.env _t4d_/
    cp $Tools4Dev_PATH/Templates/0-Example-0/_t4d_/*-utils.env _t4d_/
    cp $Tools4Dev_PATH/Templates/0-Example-0/manifest.xml .
    cp $Tools4Dev_PATH/Templates/0-Example-0/project.env .
    cp $Tools4Dev_PATH/Templates/0-Example-0/VERSION .
    cat $Tools4Dev_PATH/Templates/0-Example-0/project.env | sed "s|%VERSION%|$(cat $Tools4Dev_PATH/Templates/0-Example-0/VERSION)|g" > project.env
    if [[ -e ".gitignore" ]]; then
        if [[ "$(cat .gitignore | grep '.t4d')" == "" ]]; then
            echo ""             >> ".gitignore"
            echo "#Tools4Dev"   >> ".gitignore"
            echo ".t4d/"        >> ".gitignore"
            echo ".*.env"       >> ".gitignore"
            echo ".commit.tmp"  >> ".gitignore"
            echo ".DS_Store"    >> ".gitignore"
        fi
    else
        cp $Tools4Dev_PATH/Templates/0-Example-0/.gitignore .
    fi

###############################
_t4dDebugInfoEnd "t4dImportExample" "$@"
}


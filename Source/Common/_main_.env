#ERROR CODE 201
source $T4D_SOURCE_PATH/Common/json.env
source $T4D_SOURCE_PATH/Common/system.env
source $T4D_SOURCE_PATH/Common/variable.env
source $T4D_SOURCE_PATH/Common/xml.env
source $T4D_SOURCE_PATH/Common/debug.env
source $T4D_SOURCE_PATH/Common/xcarchive.env
source $T4D_SOURCE_PATH/Common/html.env
source $T4D_SOURCE_PATH/Common/version.env
source $T4D_SOURCE_PATH/Common/boolean.env

source $T4D_SOURCE_PATH/Common/_project_.env
source $T4D_SOURCE_PATH/Common/_tools_.env
source $T4D_SOURCE_PATH/Common/_team_.env


[[ "$_t4dDebug" == 'true' ]] && echo "Sourcing Common/_main_.env"



t4dLogo(){
##### t4dLogo
cat &>/dev/null << EOF
#    Will show Tools4Dev ascii logo :p
EOF
##### DOCUMENTATION BLOC #####
    local center="$(_t4dPromptCenterSpace '48' | sed 's|-||g')"
    echo "${pgreen}${center}  _____            _     _  _     ___           ${pstd}"
    echo "${pgreen}${center} /__   \___   ___ | |___| || |   /   \_____   __${pstd}"
    echo "${pgreen}${center}   / /\/ _ \ / _ \| / __| || |_ / /\ / _ \ \ / /${pstd}"
    echo "${pgreen}${center}  / / | (_) | (_) | \__ \__   _/ /_//  __/\ V / ${pstd}"
    echo "${pgreen}${center}  \/   \___/ \___/|_|___/  |_|/___ / \___| \_/  ${pstd}"
    echo ""
}

_t4dParseModuleArguments(){
    local _res=""
    if [[ $2 == "help" ]]; then
        _res="$2 $1 ${@:3}"
    else
        _res="$@"
    fi
    echo $_res
}

t4dPerf(){
##### t4dPerf
cat &>/dev/null << EOF
#    Will execute a Performance Test on any function you want 
EOF
##### DOCUMENTATION BLOC #####
    t4dLogo
    _t4dPromptSquare "Performance Test"
	echo "${ppurple}Command : $@${pstd}"
	unset __START_TIME
	unset __END_TIME
	unset __DIFF_TIME
	local __START_TIME="$(date +%s%3N)"
	(set -x; eval $@ ; set +x) &> ._test.tmp 
    local __END_TIME="$(date +%s%3N)"
	count=$(tail -n+1 ._test.tmp | grep '^+' | wc -l | sed 's| ||g')
	rm ._test.tmp &> /dev/null
	__DIFF_TIME="$(expr ${__END_TIME} - ${__START_TIME})"
	echo ""
	echo ""
	echo ""
	_t4dPromptSquare "Result"
	echo "    CPU Call : $(expr ${count:-2} - 2 )"
	echo "    Time     : $(expr ${__DIFF_TIME} / 1000)sec $(expr ${__DIFF_TIME} % 1000)ms"
}

t4dUpdate(){
#### t4dPull
cat &>/dev/null << EOF
#   Update Tools4Dev Repository (do not include prebuilt)
#
#   Usage : 
#       t4dPull
#       t4dPull <branchName>
#       t4dPull <tagVersion>
#
EOF
##### DOCUMENTATION BLOC #####
    local _OLDPWD=$PWD
    local CHPWD=1
    local _branch="${1:-master}"
    echo "${plpurple}t4dPull ->${pstd} cd $Tools4Dev_PATH"
    cd $Tools4Dev_PATH
    echo "${plpurple}t4dPull ->${pstd} git pull"
    
    git checkout $_branch
    git pull

    CHPWD=0
    cd $_OLDPWD
}

t4dGetVersion(){
    cat $Tools4Dev_PATH/VERSION
}

t4dLoadModule(){
    if [[ -e "$T4D_MODULES_PATH/$1/_main_.env" ]]; then
        source "$T4D_MODULES_PATH/$1/_main_.env" && _t4dCheckSucceeded "Module $1 Loaded"
    elif [[ -e "$T4D_MODULES_PATH/$1/_main_.disabled.env" ]]; then
        _t4dCheckFailed "Can't load Module $1, it has been disabled"
    else
        _t4dCheckFailed "Can't find any Module named _main_.env in $T4D_MODULES_PATH/$1"
        return 100
    fi
}


t4dvv(){
    if [[ "$T4D_VERBOSITY" != "0" ]]; then
        T4D_VERBOSITY=0
        _t4dCheckSucceeded "Verbosity LVL -> $T4D_VERBOSITY"
    else
        T4D_VERBOSITY=1
        _t4dCheckSucceeded "Verbosity LVL -> $T4D_VERBOSITY"
    fi
    wkd
}


if [[ "$T4D_VERBOSITY" != "0" ]]; then
    t4dLogVerbose(){
        (>&2 echo "$(printf "%-0s" ' ')${1} ${@:2}" | sed "s|$WS_ROOT|\$WS_ROOT|g" >> $Tools4Dev_PATH/.log )
    }
else
    t4dLogVerbose(){
        true
    }
fi

t4dLoadFile(){
    if [[ -d "$(dirname $1)" ]] && [[ -e "$1" ]]; then
        source "$1"
        if [[ "$_t4dDebug" == 'true' ]] || [[ "$2" == '-v' ]]; then 
            _t4dCheckSucceeded "File Loaded    : $1 "
        fi
    else
        if [[ "$_t4dDebug" == 'true' ]] || [[ "$2" == '-v' ]]; then
            _t4dCheckFailed    "File not found : $1"
        fi
    fi
}

t4dCheckForUpdate(){
    local _OLDPWD=$PWD
    local CHPWD=1
    cd $Tools4Dev_PATH
    (git fetch &>> $Tools4Dev_PATH/.log &)
    sleep 15
    if [[ "$(_t4dSrcGitInfoBranchState)" == "behind" ]]; then
        echo ""
        _t4dPromptEndOfLine "+=+=+=+=+=+=+=+=+=+=+=+=+" "${plyellow}"
        _t4dPromptEndOfLine "+   New Version of T4D  +" "${plyellow}"
        _t4dPromptEndOfLine "|       Available       |" "${plyellow}"
        _t4dPromptEndOfLine "+       t4dUpdate       +" "${plyellow}"
        _t4dPromptEndOfLine "+=+=+=+=+=+=+=+=+=+=+=+=+" "${plyellow}"
    fi
    cd $_OLDPWD
}

t4dCheckForLastInit(){
    if [[ "$(_t4dSrcGitInfoSha7)" != "$_WksLastLoadSha7" ]]; then
        _t4dCheckWarning "wksLoad might be outdated, last was $_WksLastLoadSha7"
        echo ""
        _t4dPromptEndOfLine "+=+=+=+=+=+=+=+=+=+=+=+=+" "${plpurple}"
        _t4dPromptEndOfLine "+ TIPS :    wksLoad     +" "${plpurple}"
        _t4dPromptEndOfLine "+=+=+=+=+=+=+=+=+=+=+=+=+" "${plpurple}"
    else
        _t4dCheckSucceeded "wksLoad up to date"
    fi
}


t4dDoc(){
    _t4dDocumentationIntro
    #Table of Contents temporary disabled
    # echo "Press enter to see our Table Of Contents, Ctrl+C to abort"
    # read tmp
}

t4dHelp(){
#### t4dHelp
cat &>/dev/null << EOF
#   This function will help you with function that ready 
#   to be used during Dev you can't use this method with 
#   '_' Prefix function use <t4dDoc> instead.
#
#   Usage : 
#       t4dHelp [-no-logo] [function]
#
#   Exemple : 
#       t4dHelp t4dPerf
#
#   Note : 
#       [] = Optionnal
EOF
##### DOCUMENTATION BLOC #####
    local _Logo="true"
    if [[ "$1" == "-no-logo" ]]; then
        shift
        _Logo="false"
    fi

    if [[ "$2" != "" ]]; then
        if [[ -e "$1" ]]; then
            # _t4dDocConvertContentInto -shell -file "$1"
            local _HeaderBloc="$(_t4dDocGetHeader -file "$1")"
        else
            local _HeaderBloc="$(_t4dDocGetHeader -function "$1")"
        fi
        _t4dDocGetSectionContent "$_HeaderBloc" "$2" | sed 's| `|%%1|g' | sed 's|` |%%2|g' | sed "s|%%1| \\${plblue}|g" | sed "s|%%2|\\${pstd} |g"
    elif [[ -e "$1" ]]; then
        _t4dDocConvertContentInto -shell -file "$1"
    else
        if [[ "$_Logo" == "true" ]]; then
            _t4dDocLogo
        fi
        _t4dDocConvertContentInto -shell -function "$1"
    fi

}

_t4dCountLine(){
    cat $1 | grep -v '^#' | wc -l  | sed 's| ||g'
}
_t4dCountComment(){
    cat $1 | grep '^#' | wc -l  | sed 's| ||g'
}

t4dImportExample(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.1
_t4dDebugInfoStart "t4dImportExample" "$#" "$@"
###### t4dImportExample
#   - Name:
#       t4dImportExample
###
#   - Synopsis:
#       Import Tools4Dev Example Project Architecture
###
#   - Example:
#       * t4dImportExample
#           Launch this command from a new repositories
###
###### DOCUMENTATION BLOC #####

    mkdir -p _t4d_
    cp $Tools4Dev_PATH/Templates/0-Example-0/_t4d_/_main_.env _t4d_/
    cp $Tools4Dev_PATH/Templates/0-Example-0/_t4d_/_variable_.env _t4d_/
    cp $Tools4Dev_PATH/Templates/0-Example-0/_t4d_/dependencies.env _t4d_/
    cp $Tools4Dev_PATH/Templates/0-Example-0/_t4d_/*-utils.env _t4d_/
    cp $Tools4Dev_PATH/Templates/0-Example-0/manifest.xml .
    cp $Tools4Dev_PATH/Templates/0-Example-0/project.env .
    cp $Tools4Dev_PATH/Templates/0-Example-0/VERSION .
    cat $Tools4Dev_PATH/Templates/0-Example-0/project.env | sed "s|%VERSION%|$(cat $Tools4Dev_PATH/Templates/0-Example-0/VERSION)|g" > project.env
    if [[ -e ".gitignore" ]]; then
        if [[ "$(cat .gitignore | grep '.t4d')" == "" ]]; then
            echo ""             >> ".gitignore"
            echo "#Tools4Dev"   >> ".gitignore"
            echo ".t4d/"        >> ".gitignore"
            echo ".*.env"       >> ".gitignore"
            echo ".commit.tmp"  >> ".gitignore"
            echo ".DS_Store"    >> ".gitignore"
        fi
    else
        cp $Tools4Dev_PATH/Templates/0-Example-0/.gitignore .
    fi

###############################
_t4dDebugInfoEnd "t4dImportExample" "$@"
}


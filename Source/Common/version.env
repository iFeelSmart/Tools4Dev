
_t4dSrcBumpVersion(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
###### _t4dSrcBumpVersion
#   - Name:
#       _t4dSrcBumpVersion
###
#   - Definition:
#       To Know : avoid using expr when there is a chance that result will be 0. 
#       -> expr return 1 when their result is eq to 0
###
#   - Synopsis:
#       Return version number incremented
###
#   - Example:
#       _t4dSrcBumpVersion fix   "3.12.10"
#       _t4dSrcBumpVersion minor "3.12.10"
#       _t4dSrcBumpVersion major "3.12.10"
#       _t4dSrcBumpVersion "2.0.0" "3.12.10"
#       _t4dSrcBumpVersion "0.0.0" "3.12.0"
###
###### DOCUMENTATION BLOC #####
    local _Old="$2"
    local _Major="$(echo $_Old | cut -d '.' -f1)"
    local _Minor="$(echo $_Old | cut -d '.' -f2)"
    local _Fix="$(echo $_Old | cut -d '.' -f3)"
    case $1 in
        major)
            _Major="$(expr $_Major + 1 )"
            _Minor="0"
            _Fix="0"
        ;;
        minor)
            _Minor="$(expr $_Minor + 1 )"
            _Fix="0"
        ;;
        fix|revision|patch)
            _Fix="$(expr $_Fix + 1 )"
        ;;
        *)
            local _OffsetMajor="$(echo $1 | cut -d '.' -f1)"
            local _OffsetMinor="$(echo $1 | cut -d '.' -f2)"
            local _OffsetFix="$(echo $1 | cut -d '.' -f3)"
            _Major="$(( $_Major + ${_OffsetMajor:-0} ))"
            _Minor="$(( $_Minor + ${_OffsetMinor:-0} ))"
            _Fix="$(( $_Fix + ${_OffsetFix:-0} ))"
        ;;
    esac
    echo "${_Major}.${_Minor}.${_Fix}"

###############################
}

_t4dSrcGetProjectVersion(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dSrcGetProjectVersion" "$#" "$@"
###### _t4dSrcGetProjectVersion
#   - Name:
#       _t4dSrcGetProjectVersion
###
#   - Synopsis:
#       Return version of current project
###
#   - Definition:
#       version number is 3 numbers separated by . like "3.13.6"
#       this function return nothing if you are not in a project
#
#       NB: this function may be redefined in _main_.env of the project
###
#   - Example:
#       _t4dSrcGetProjectVersion
###
###### DOCUMENTATION BLOC #####
    _t4dDebugLog "$pwarning" "Obsolete, please migrate to _wksGetVersion"
    if [ -f "$WS_VERSION_FILE" ]; then
        #display the file which should be 1 line with version number, but we also handle the case where sometime where is a conflict, the number should be displayed properly ignoring the conflit symbols
        cat $WS_VERSION_FILE | grep -v "<<<<" | head -n 1
    fi

###############################
_t4dDebugInfoEnd "_t4dSrcGetProjectVersion" "$@"
}

_t4dSrcVersionPatchGradleFile(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcVersionPatchGradleFile
#   - Name:
#       _t4dSrcVersionPatchGradleFile
###
#   - Synopsis:
#       patch gradle file to replace versionName value
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _TmpFile="$T4D_PROJECT_LOG_PATH/._t4dSrcGradlePatchVersion.gradle"
    local _File="$1"
    local _Version="$2"
    mkdir -p $T4D_PROJECT_LOG_PATH
    cat $_File | grep -B 1000 versionName | grep -v versionName > $_TmpFile
    cat $_File | grep -A 1000 versionName | sed "s|versionName.*|versionName \"$_Version\"|g" >> $_TmpFile
    mv $_TmpFile $_File

###############################
}

_t4dSrcVersionCodeGenerate(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dSrcVersionCodeGenerate
#   - Name:
#       _t4dSrcVersionCodeGenerate
###
#   - Synopsis:
#       generate version code
###
#   - Description:
#       Will Generate unique version Code based on Builder Number and VersionName
#           Version Name X.Y.Z Build W
#           Version Code X YYY ZZ WW 
#           To avoid problems, limitations are
#               Y should be less than 999
#               Z should be less than 99
#               W should be less than 999
#
#           If Y, Z or W are minor than 10, 0 will be added like 1 become 001 
#           1.2.0 Build 99 will return 1 002 00 99
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _Version="$1"
    local _BuildNumber="${2:-$BUILD_NUMBER}"
    local _Major="$(echo $_Version | cut -d '.' -f1)"
    local _Minor="$(echo $_Version | cut -d '.' -f2)"
    local _Patch="$(echo $_Version | cut -d '.' -f3)"
    if [[ $_BuildNumber -ge 99 ]]; then
        _t4dDebugLog $warning "Build Number Could not be > 99, downgrading to 99"
        _BuildNumber=99
    elif [[ "$_BuildNumber" == "" ]]; then
        _t4dDebugLog $plog "Build Number is empty, default to 0"
        _BuildNumber=0
    fi
    _VersionCode="${_Major}$(_t4dPromptVarWithChar -rev 3 ${_Minor} '0' )$(_t4dPromptVarWithChar -rev 2 ${_Patch} '0' )$(_t4dPromptVarWithChar -rev 3 ${_BuildNumber} '0' )"
    echo "$_VersionCode" | sed 's|%||g'

###############################
}

_t4dSrcVersionSafetyCheck(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dSrcVersionSafetyCheck
#   - Name:
#       _t4dSrcVersionSafetyCheck
###
#   - Synopsis:
#       check if version use good format for store like playstore and appstore
###
#   - Example:
#       * _t4dSrcVersionSafetyCheck 0.0.1             = return 0
#       * _t4dSrcVersionSafetyCheck 0.0.0             = return 1
#       * _t4dSrcVersionSafetyCheck 0.0.a             = return 1
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _Version="$1"
    local _Major="$(echo $_Version | cut -d '.' -f1)"
    local _Minor="$(echo $_Version | cut -d '.' -f2)"
    local _Patch="$(echo $_Version | cut -d '.' -f3)"
    if [[ $(expr $_Major + $_Minor + $_Patch) -gt 0 ]]; then
        echo "true"
    else
        _t4dDebugLog $perror "Version format >$_Version< does not fit standard"
        echo "false"
    fi

###############################
}

_t4dSrcVersionCodeParse(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dSrcVersionCodeParse
#   - Name:
#       _t4dSrcVersionCodeParse
###
#   - Synopsis:
#       parse version code to show version name and build number
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _VersionCode="$1"
    local _ReverseVersionCode="$(echo $_VersionCode | rev)"
    local _BuildNumer="$(echo ${_ReverseVersionCode:0:2} | rev)"
    local _Patch="$(echo ${_ReverseVersionCode:2:2} | rev | grep -Eo '[1-9].*')"
    local _Minor="$(echo ${_ReverseVersionCode:4:3} | rev | grep -Eo '[1-9].*')"
    local _Major="$(echo ${_ReverseVersionCode:7} | rev)"
    echo "${_Major}.${_Minor}.${_Patch} - $_BuildNumer"

###############################
}

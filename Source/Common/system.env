#CODE ERROR : 205

_t4dSystemBindKeys(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dSystemBindKeys
#   - Name:
#       _t4dSystemBindKeys
###
#   - Synopsis:
#       Add Binding for each platform in zsh
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    #DO NOT EDIT THIS WILL BE OVERRIDED BY PLATFORM FILES
###############################
}

_t4dSystemFileCount(){
###### _t4dSystemLineCount
#    Definition : 
#       Return Number of files in specified path
###### DOCUMENTATION BLOC #####
    for var in "$@"
    do
        echo " $var ->"$(find $var -type f | wc -l)
    done
}

_t4dSystemWritablePath(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dSystemWritablePath" "$#" "$@"
###### _t4dSystemWritablePath
#   - Name:
#       _t4dSystemWritablePath
###
#   - Synopsis:
#       Return true if target path is writable
###
#   - Example:
#       _t4dSystemWritablePath /opt
###
###### DOCUMENTATION BLOC #####

FILE="$1"
 
[ $# -eq 0 ] && return 1
 
if [[ -w "$FILE" ]]; then
   echo "true"
else
   echo "false"
fi

###############################
_t4dDebugInfoEnd "_t4dSystemWritablePath" "$@"
}

_t4dSystemGetCores(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dSystemGetCores" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dSystemGetCores
#   - Name:
#       _t4dSystemGetCores
###
#   - Synopsis:
#       Return int that contains number of cores available in current system
###

###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    #EMPTY FUNCTION OVERRIDED IN PLATFORMS

###############################
_t4dDebugInfoEnd "_t4dSystemGetCores" "$@"
}

_t4dSystemLineCount(){
###### _t4dSystemLineCount
#    Definition : 
#       Return $@ output number of lines
###### DOCUMENTATION BLOC #####
    eval $@ | wc -l | sed "s| ||g"
}

_t4dSystemSilentCommand(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dSystemSilentCommand" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dSystemSilentCommand
#   - Name:
#       _t4dSystemSilentCommand
###
#   - Synopsis:
#       Launch command in another zsh process
###
#   - Definition:
#       This command allow user to launch any command in another process, even in a subshell
#       
###
#   - Usage:
#       _t4dSystemSilentCommand <Command> <OutputLog>
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

( nohup zsh -c "export T4D_SILENT_COMMAND=true; cd ${WS_ROOT:-"${Tools4Dev_PATH}"}; source ${WS_ROOT:-"${Tools4Dev_PATH}"}/project.env; $1" &> "$T4D_PROJECT_LOG_PATH/.t4dSystemSilentCommand" ) &
_t4dDebugLog $plog "${2:-"Command $1 launched in another process"}"

###############################
_t4dDebugInfoEnd "_t4dSystemSilentCommand" "$@"
}

_t4dSystemLineInFiles(){
    local sum=0
    local count=0
    local _files="$(find . -type f | grep -v '.git')"
    for _file in $(echo $_files); do
        count=$(expr $count + 1)
        [[ -e $_file ]] && sum=$(expr $sum + $(wc -l $_file | cut -d '.' -f1 | sed 's| ||g'))
    done
    echo "Found $count Files"
    echo "Total $sum Lines"
}

_t4dSystemFindInFiles(){
###### t4dSystemFindInFiles
#   Definition : 
#       Search for $1 in all .$2 files 
#       Starting from current folder
#
#   Usage :
#       t4dSystemFindInFiles <char> <filetype>
#
#   Note :
#       using <filetype> will reduce execution time drastically
###### DOCUMENTATION BLOC #####
    if [[ "$1" == '-h' ]]; then
        echo "grep -r \$1 . --include=\*.\$2"
    elif [[ $# -eq 1 ]]; then
        grep -r $1 . --exclude-dir='\.git'
    else
        grep -r $1 . --include="*.$2" --exclude-dir='\.git'
    fi

    #    --exclude-dir={dir1,dir2,*.dst}
    #    --exclude, --include, --exclude-dir or --include-dir
}

_t4dSystemSizeOfFiles(){
    find . -type f -name "*.$1" -exec du -ch {} + | grep total$
}

_t4dSystemFindInFiles(){
    if [[ "$1" == '-h' ]]; then
        echo "grep -r \$1 . --include=\*.\$2"
    elif [[ $# -eq 1 ]]; then
        grep -r $1 . --exclude-dir='\.git'
    else
        grep -r $1 . --include="*.$2" --exclude-dir='\.git'
    fi

    #    --exclude-dir={dir1,dir2,*.dst}
    #    --exclude, --include, --exclude-dir or --include-dir
}

_t4dSystemFindFiles(){
    if [ "$1" == '-h' ]; then
        echo "find \$1 -type f -name *.\$2"
    else
        find $1 -type f -name "*.$2"
    fi
}

_t4dSystemInstallDeps(){
    mkdir -p $1
    (tar -xf ${1}.tar -C "$PWD/$1" &> .tar.log && _t4dCheckSucceeded "   $1") || (rm -rf $1 && _t4dCheckFailed "   $1")
}

_t4dSystemGetDiffSha7(){
    tail -n+1 ${2:-$WS_ROOT/.diff} | grep "$1 " | cut -d '>' -f2 | sed 's| ||g'
}

_t4dSystemAddToPATH(){
    for i in $@; do
        if [[ -n "$i" ]]; then
            case ":$PATH:" in
                *":$i:"*) :;;
                *) PATH="$i:$PATH";;
            esac
        fi
    done
}

_t4dSystemAddToPATHEnd(){
    for i in $@; do
        if [[ -n "$i" ]]; then
            case ":$PATH:" in
                *":$i:"*) :;;
                *) PATH="$PATH:$i";;
            esac
        fi
    done
}

_t4dSystemGetVariable(){
    _t4dPromptListInfo "$(echo $1)" 35 ":" "${plblue}"
}

_t4dSystemHealthInfo(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dSystemHealthInfo
#   - Name:
#       _t4dSystemHealthInfo
###
#   - Synopsis:
#       Return series of important data about system health and t4d config
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    echo "Will Be Overrided in Platform Folders" &> /dev/null

###############################
}

_t4dSystemCreateSymLink(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dSystemCreateSymLink
#   - Name:
#       _t4dSystemCreateSymLink
###
#   - Synopsis:
#       Create and/or update symlink
###
#   - Usage:
#       _t4dSystemCreateSymLink <{SimLink}> <{Target}>  [{CustomLog}]
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _SymLink="$1"
    local _Target="$2"
    local _OutPut="${3:-""}"
    local _BasenameSymLink="$(dirname $_SymLink)"

    if [[ -d "$_Target" ]] || [[ -e "$_Target" ]]; then
        if [[ -e "$_SymLink" ]]; then
            rm $_SymLink
            ln -sfn "$_Target" "$_SymLink"
        else
            mkdir -p "$_BasenameSymLink"
            ln -sfn "$_Target" "$_SymLink"
        fi

        local _NewSymLink="$(readlink $_SymLink 2> /dev/null)"
        local _NewTarget="${_NewSymLink:-"Failed"}"
        if [[ "$_NewTarget" == "$_Target" ]]; then
            _t4dCheckSucceeded "Updated $_SymLink"
            if [[ "$_OutPut" != "" ]]; then
                echo "${pipurple}         - $_OutPut ${pstd}"
            fi
        else
            _t4dCheckFailed "Updating $_SymLink -> Something went wrong"
        fi

    else
        _t4dCheckFailed "File/Folder >${plyellow}${_Target}${pstd}< does not exist"
        return $_t4dErrorCode
    fi

###############################
    
}

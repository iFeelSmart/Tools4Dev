_wksLog(){
    while true; do
        until [[ ! -e ${WS_LOGFILE} ]]; do
            tail -f ${WS_LOGFILE}
        done
        _t4dDebugLog $plog "No Log File Detected"
        sleep 5
    done
}

_wksClone(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _wksClone
#   - Name:
#       _wksClone
###
#   - Synopsis:
#       Clone SubRepositories defined in manifest.xml file
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=10
     local _ForceClone='false'
    local CHPWD=1
    local _LogFolder="$T4D_PROJECT_LOG_PATH/clone"

    if [[ -e "$WS_ROOT/manifest.xml" ]]; then
        cd $WS_ROOT
        mkdir -p "$_LogFolder"
        if [[ "$1" == "aws" ]]; then
            local _CLONETYPE="aws"
            shift
        elif [[ "$1" == "http" ]]; then
            local _CLONETYPE="http"
            local _PWD=$2
            shift
            shift
            echo "Using http"
        else
            local _CLONETYPE="ssh"
        fi

        if [[ "$1" == "-force" ]]; then
            shift
            _ForceClone='true'
        fi
        local _wksCloneSt=0
        local CHPWD=1
        START_TIME=$(date +%s)
        echo "Project $(findDataInXML "remote" "origin" "${_CLONETYPE}")"
        if [[ -n $# ]]; then
            echo "${plpurple}Args : $@${pstd}"
        fi
        for _project in $(_t4dFindMarkerInXML project path); do
            local _path="$_project"
            mkdir -p "$_LogFolder/$_path"
            if [[ -e "$_path/.cloned" ]]; then
                mv "$_path/.cloned" "$_LogFolder/$_path/.cloned"
            fi
            local _name="$(_t4dFindDataInXmlV2 project path "${_project}" "name" )"
            local _key="$(_t4dFindDataInXmlV2 project path "${_project}" "key" )"
            local _origin="$(_t4dFindDataInXmlV2 project path "${_project}" "remote" )"
            

            if [[ "$(echo $_CLONETYPE | grep 'aws')" != "" ]]; then
                local _gitName="$(echo "$_key-$_name" | tr '[:upper:]' '[:lower:]')"
            else
                local _gitName="${_key}/${_name}.git"
            fi

            local _url="$(findDataInXML "remote" "$_origin" "${_CLONETYPE}" | sed "s|<user>:<password>|${_PWD}|g")/${_gitName}"
            local _branch="$(_t4dFindDataInXmlV2 project path "${_project}" "revision")"
            
            _START_TIME=$(date +%s)
            #echo $_url
            if [[ -e "$_LogFolder/$_path/.cloned" ]] && [[ -d "$_path" ]]; then
                echo "Skipping ${plgreen}$_path${pstd} already cloned"
            elif [[ ! -e "$_LogFolder/$_path/.cloned" ]] && [[ "$_ForceClone" == 'true' ]]; then
                ( rm -rf "${_path:-toto}" || true )
                echo "Erasing $_path && Cloning $_gitName -> ${pyellow}$_branch${pstd} into ${plgreen}$_path${pstd}"
                git clone --recursive --branch $_branch $@ "$_url" "$_path" && touch "$_LogFolder/$_path/.cloned"
            else
                echo "Cloning $_gitName -> ${pyellow}$_branch${pstd} into ${plgreen}$_path${pstd}"
                git clone --recursive --branch $_branch $@  "$_url" "$_path" && touch "$_LogFolder/$_path/.cloned"
            fi

            if [[ -e "$_LogFolder/$_path/.cloned" ]]; then
                _END_TIME="$(date +%s)"
                
                if [[ "$_START_TIME" != "$_END_TIME"  ]]; then
                    _DIFF_TIME="$(expr ${_END_TIME} - ${_START_TIME} )"
                    if [[ $_DIFF_TIME -gt 60 ]]; then
                        echo "${plpurple} $(expr ${_DIFF_TIME} / 60)min $(expr ${_DIFF_TIME} % 60)secs ${pstd}"
                    else
                        echo "${plpurple} $(expr ${_DIFF_TIME} % 60)secs ${pstd}"
                    fi
                fi
                
            else
                _wksCloneSt=1
                echo "git clone --recursive --branch $_branch $@  $_url "$_path""
                echo "${plred} Failed :${pstd} Please erase ${plyellow}$_path${pstd} directory if not empty then try again"
            fi
            cd $WS_ROOT
        done
        
        for _symbolic in $(findTypeInXML "symbolic"); do
            local _dir="$(eval echo $(dirname "$(findDataInXML "symbolic" "${_symbolic}" "path")"))"
            local _origin="$(eval echo $(findDataInXML "symbolic" "${_symbolic}" "origin"))"
            local _path="$(eval echo $(findDataInXML "symbolic" "${_symbolic}" "path"))"
            
            [[ "$_dir" != "" ]] && mkdir -p $_dir
            echo -e "Symbolic Link: ${plgreen}$_path${pstd} to ${pyellow}${_origin}${pstd}"
            ln -sfn $_origin $_path
        done
        END_TIME=$(date +%s)
        DIFF_TIME=$(( ${END_TIME} - ${START_TIME} ))
        echo "Clone finished after $(expr ${DIFF_TIME} / 60)min $(expr ${DIFF_TIME} % 60)secs"
        touch "$_LogFolder/.clone"
        return $_wksCloneSt
    else
        _t4dDebugLog $plog "$WS_ROOT/manifest.xml does not exist, skipping deps clone"
    fi


###############################
}


_wksGetVersion(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _wksGetVersion
#   - Name:
#       _wksGetVersion
###
#   - Synopsis:
#       return product version, CAN BE OVERRIDED IN PROJECT FILE
###
#   - Definition:
#       version number is 3 numbers separated by . like "3.13.6"
#       this function return nothing if you are not in a project
#
#       NB: this function may be redefined in _main_.env of the project
#
###
#   - Available Options:
#           -up-to-date         = ignore WS_SRC_VERSION
#
###
#   - Example:
#       _wksGetVersion VERSION
#       _wksGetVersion -up-to-date
###
# Other Valid Documentation blocks :
# Options | Available Options | Usage | Example | Definition
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=Unknown
    local _prefix=""
    local _VersionFile="${1}"

    if [[ "$WS_SRC_VERSION" != "" ]] && [[ "$_VersionFile" != "-up-to-date" ]]; then
        echo $WS_SRC_VERSION
    elif [[ -e $WS_VERSION_FILE ]]; then
        cat $WS_VERSION_FILE | grep -v "<<<<" | head -n 1
    elif [[ -e $_VersionFile ]]; then
        cat $_VersionFile | grep -v "<<<<" | head -n 1
    elif [[ -e VERSION ]]; then
        cat VERSION | grep -v "<<<<" | head -n 1
    fi

###############################
}


####### IFS CLONE DEPENDENCY FUNCTIONS 
#################
####### This is here to allow user to clone wks repositories without Tools4Dev Environment
findDataInXML(){
    local _type=$1
    local _name=$2
    local _attribute=$3
    local _filename=${4:-"$WS_ROOT/manifest"}
    tail -n+1 ${_filename}.xml | grep "<${_type}" | grep "\"${_name}\"" | grep -Eo "${_attribute}.{0,200}" | cut -d '"' -f2
}

findTypeInXML(){
    local _type=$1
    local _filename=${2:-"$WS_ROOT/manifest"}
    tail -n+1 ${_filename}.xml | grep "<${_type}" | grep -Eo "path.{0,200}" | cut -d '"' -f2
}
#################


wkd(){
# Generated From $Tools4Dev_PATH/Templates/function-advanced.env
# v1.4.1
_t4dDebugInfoStart "wkd" "$#" "$@"
###### wkd
#   - Name:
#       wkd
###
#   - Synopsis:
#       Allows you to define several folders where you store your projects
###
#   - Definition:
#      User can jump workspace to workspace directly by just using the name of the project directory.
#       Don't forget to use %TABULATION% to discover all functionnality of this command
#
###
#   - Usage:
#       * wkd -addDir [arguments]
#           Add dir to .dirs.env file, if arguments is empty use Folder's name
#       * wkd -rmDir [arguments]
#           Remove dir from .dirs.env file, if argument is empty use PWD value
#       * wkd
#           reload wks environment then go back to OLDPWD
#       * wkd %FolderName%
#           go to %FolderName% or into %_T4D_WKS_ROOT/FolderName% if FolderName is not in .dirs.env file
#
###
#   - Available Options:
#       -addDir
#       -rmDir
#
###
#   - Available Arguments :
#       * List Available Folder that are listed in $Tools4Dev_PATH/.dirs.env
#       * If previous file is empty use _T4D_WKS_ROOT variable
#       * if no argument, then reload wks environment
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####

    local _Option="$1"
    local _Extra="$2"
    for i in $(functions | grep ' ()' | grep "^wks" | cut -d ' ' -f1 | grep -v 'wks$'); do
        unset -f $i
    done
    for i in $(alias | grep "^wk" | cut -d '=' -f1); do
        unalias $i
    done
    if [[ $# -eq 0 ]]; then
        local _OLD_PWD="$PWD"
        cd $WS_ROOT
        local CHPWD=1
        cd $_OLD_PWD
    elif [[ "$1" == '-rmDir' ]]; then
        if [[ "$(cat $Tools4Dev_PATH/.dirs.env | grep "$PWD")" != "" ]]; then
            cat "$Tools4Dev_PATH/.dirs.env" | grep -v "$PWD" > "$Tools4Dev_PATH/.dirs2.env"
            mv "$Tools4Dev_PATH/.dirs2.env" "$Tools4Dev_PATH/.dirs.env"
            echo "${plgreen}Folder $(basename $PWD) removed${pstd}"
        elif [[ "$(cat $Tools4Dev_PATH/.dirs.env | grep "${_Extra}:")" != "" ]]; then
            cat "$Tools4Dev_PATH/.dirs.env" | grep -v "${_Extra}:" > "$Tools4Dev_PATH/.dirs2.env"
            mv "$Tools4Dev_PATH/.dirs2.env" "$Tools4Dev_PATH/.dirs.env"
            echo "${plgreen}Folder $_Extra removed${pstd}"
        fi 
    elif [[ "$1" == '-addDir' ]]; then
        if [[ "$(cat $Tools4Dev_PATH/.dirs.env | grep "$PWD")" != "" ]]; then
            echo "${plyellow}Already exist${pstd}"
            cat "$Tools4Dev_PATH/.dirs.env" | grep "$PWD"
        else
             echo "${plgreen}${_Extra:-$(basename $PWD)} Saved${pstd}"
            echo "${_Extra:-$(basename $PWD)}:$PWD" >> "$Tools4Dev_PATH/.dirs.env"
        fi
    elif  [[ "$(cat $Tools4Dev_PATH/.dirs.env | grep "${1}:")" != '' ]]; then
        local _Line="$(cat $Tools4Dev_PATH/.dirs.env | grep "${1}:" | head -1)"
        local _Folder="$(echo $_Line | cut -d ':' -f2)"
        local _Name="$(echo $_Line | cut -d ':' -f1)"
        _t4dDebugLog $pinfo "Go to $_Name"
        cd $_Folder
    elif  [[ "$(cat $Tools4Dev_PATH/.dirs.env | grep "/${1}$")" != '' ]]; then
        local _Folder="$(cat $Tools4Dev_PATH/.dirs.env | grep "/${1}$" | head -1 | cut -d ':' -f2)"
        _t4dDebugLog $pinfo "Go to $_Folder"
        cd $_Folder
    elif [[ -e "$_T4D_WKS_ROOT/$1" ]]; then
        _t4dDebugLog $pinfo "Go to $1"
        cd "$_T4D_WKS_ROOT/$1"
    else
        _t4dDebugLog $perror "Unknown Arguments $@ for wkd"
    fi

###############################
_t4dDebugInfoEnd "wkd" "$@"
}

_wksDoctor(){
    echo "wksDoctor unavailable for this project"
}

_wksUpdateConfigFile(){
    set | grep '^WS'      >  $WS_BUILD_CONFIG_FILE
    for _Prefix in $1 ANDROID IOS; do
        if [[ "$(set | grep "^$_Prefix")" != "" ]]; then
            set | grep "^$_Prefix"      >> $WS_BUILD_CONFIG_FILE
        fi
    done
}

_wksCreateTarFile(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.1
_t4dDebugInfoStart "_wksCreateTarFile" "$#" "$@"
###### _wksCreateTarFile
#   - Name:
#       _wksCreateTarFile
###
#   - Synopsis:
#       |One-line description of what it does. (less than 55 char)|
###
#   - Definition:
#
###
#   - Usage:
#       _wksCreateTarFile <AWSPATH> <FolderToTar> 
#
###
#   - Available Options:
#       -p              = oui
#       -build          = test
#       -toto           = non
#
###
#   - Example:
#       _wksCreateTarFile "$QT_INSTALL_DIR" "${WS_EXPORT_TARFILE}"
#
###
###### DOCUMENTATION BLOC #####
#
########## CODE BLOC ##########

    local _Folder="$1"
    local _TarFilename="$2"
    local CHPWD=1
    local _ArchiveLog="${plpurple}[ARCHIVE]${pstd}"
    


    local awsInstallPath="${_AwsPath}"
    local baseFolder="$(dirname $_Folder)"
    local name="$(basename $_Folder)"

    _t4dDebugLog   "$_ArchiveLog" "Create Archive $_TarFilename"
        cd $baseFolder
        ( tar -cvf $_TarFilename ${name} ) &> $WS_LOGFILE
        rm $WS_LOGFILE

    _t4dDebugLog   "${plgreen}[ARCHIVE]${pstd}" "Archive Step Succeeded"

###############################
_t4dDebugInfoEnd "_wksCreateTarFile" "$@"
}

_wksInstallAndroidTools(){
    for _ndk in $(_wksAndroidNDKs); do
        _t4dDebugLog "${_DepsLog}${plwhite}[${_ndk}]${pstd}" ""
        _t4dSrcAndroidImportNDK "$_ndk"
    done
    _t4dDebugLog "${_DepsLog}${plwhite}[NDK]${pstd}" ""
        _t4dCheckSucceeded "$T4D_ANDROID_OPT_ROOT_PATH/android-ndk -> ${plgreen}$(readlink $T4D_ANDROID_OPT_ROOT_PATH/android-ndk | sed "s|${T4D_ANDROID_OPT_ROOT_PATH}/||g")${pstd}"

    _t4dDebugLog "${_DepsLog}${plwhite}[SDK]${pstd}" ""
        if [[ ! -e "$T4D_ANDROID_OPT_ROOT_PATH/android-sdk/tools/bin/sdkmanager" ]]; then
            _t4dCheckInfo "Updating android-sdk"
            _t4dCheckInfo "This might take several minutes..."
            _t4dCheckInfo "log file $WS_LOGFILE"
             ( _t4dSrcAndroidImportSDKBase --update ) &> $WS_LOGFILE
             rm $WS_LOGFILE
        else
            _t4dCheckSucceeded "$T4D_ANDROID_OPT_ROOT_PATH/android-sdk Already installed"
            _t4dSrcAndroidCheckJavaBinary
        fi

        if [[ "$(_wksAndroidSDKTools)" != "" ]]; then
            _t4dCheckInfo "Installing" && _t4dPromptCol $(_wksAndroidSDKTools)
            _t4dCheckInfo "Please wait ..."
            echo "y" | $T4D_ANDROID_OPT_ROOT_PATH/android-sdk/tools/bin/sdkmanager $(_wksAndroidSDKTools) 2>&1 | grep --line-buffered -v 'Warning'
        fi

}

_wksJenkinsExport(){
# Generated From $Tools4Dev_PATH/Templates/function-wks.env
# v1.4.1
_t4dDebugInfoStart "_wksJenkinsExport" "$#" "$@"
###### _wksJenkinsExport
#   - Name:
#       _wksJenkinsExport
###
#   - Synopsis:
#       Moving Archive & prepare file for jenkins artefact step
###
#   - Usage:
#       _wksJenkinsExport
#
###
#   - Example:
#       _wksJenkinsExport
#
###
###### DOCUMENTATION BLOC #####
########## CODE BLOC ##########

    local CHPWD=1
    local _JenkinsLog="${ppurple}[JENKINS]${pstd}"

    source $WS_BUILD_CONFIG_FILE
    _wksConfigureStatus $WS_PREFIX
    mkdir -p "$Tools4Dev_PATH/build/jenkins"

    _t4dDebugLog   "$_JenkinsLog" "Moving Archive $WS_EXPORT_TARFILE into $Tools4Dev_PATH/build/jenkins folder"
        mv "$(dirname $WS_INSTALL_DIR)/${WS_EXPORT_TARFILE}" "$Tools4Dev_PATH/build/jenkins/${WS_EXPORT_TARFILE}"

    _t4dDebugLog   "${plgreen}[JENKINS]${pstd}" "tarfile ready to archive"

###############################
_t4dDebugInfoEnd "_wksJenkinsExport" "$@"
}

_wksConfigureStatus(){
    if [[ "$_WS_CONFIGURE_STATUS" != "true" ]]; then
        if [[ -e ${WS_BUILD_CONFIG_FILE} ]]; then
            source $WS_BUILD_CONFIG_FILE
            local prefixIndex="$1"
            local target="$2"
            local _WS_VARIABLE_INDEX="$(set | grep '^WS' | grep -v 'VERSION' | cut -d '=' -f1)"
            local _WS_VARIABLE_VERSION_INDEX="$(set | grep '^WS' | grep 'VERSION' | cut -d '=' -f1)"

            _t4dPromptObjectCenter "$(_t4dPromptSquare --no-color 'BUILD INFO')" "$plpurple" "15"

            _t4dPromptSquare "WS" "$plcyan"
            _t4dPromptListInfo "$_WS_VARIABLE_INDEX" 35 ":" "$plcyan"
            echo ""
            _t4dPromptListInfo "$_WS_VARIABLE_VERSION_INDEX" 35 ":" "$plcyan"

            if [[ "$prefixIndex" != "" ]]; then
                local _PROJECT_VARIABLE_INDEX="$(set | grep "^$prefixIndex" | grep -v 'DIR'  | cut -d '=' -f1)"
                local _PROJECT_VARIABLE_DIR_INDEX="$(set | grep "^$prefixIndex" | grep 'DIR' | cut -d '=' -f1)"
                _t4dPromptSquare "$prefixIndex" "$plblue"
                _t4dPromptListInfo "$_PROJECT_VARIABLE_INDEX" 35 ":" "$plblue"
                echo ""
                _t4dPromptListInfo "$_PROJECT_VARIABLE_DIR_INDEX" 35 ":" "$plblue"

            fi

            case $target in 
                ios)
                    local _TARGET_VARIABLE_INDEX="$(set | grep '^IOS' | cut -d '=' -f1)"
                    if [[ "$_TARGET_VARIABLE_INDEX" != "" ]]; then
                        _t4dPromptSquare "IOS" "$plpurple"
                        _t4dPromptListInfo "$_TARGET_VARIABLE_INDEX" 35 ":" "$plpurple"
                    fi
                ;;
                android)
                    local _TARGET_VARIABLE_INDEX="$(set | grep '^ANDROID' | cut -d '=' -f1)"
                    if [[ "$_TARGET_VARIABLE_INDEX" != "" ]]; then
                        _t4dPromptSquare "ANDROID" "$plpurple"
                        _t4dPromptListInfo "$_TARGET_VARIABLE_INDEX" 35 ":" "$plpurple"
                    fi
                ;;
                *)
                    true
                ;;
            esac
            export _WS_CONFIGURE_STATUS="true"

            echo ""
            echo ""
            _t4dPromptLine
            _t4dPromptLine
        else
            _t4dDebugLog "$pwarning" "Unable to find Build Config File"
            return 1
        fi
    fi
}

_wksPatchSource(){
    local _srcRootPath="$1"
    local _patchRootPath="$2"
    local _patchTargetRootPath="$_patchRootPath/${3:-host}"
    local _PatchSpecificFiles=""

    if [[ -d "$_patchRootPath" ]]; then
        local _PatchFiles="$(find $_patchRootPath -maxdepth 1 | grep '.patch$')"
        if [[ -d "$_patchTargetRootPath" ]]; then
            _PatchSpecificFiles="$(find $_patchTargetRootPath -maxdepth 1 | grep '.patch$')"
        fi
        

        cd $_srcRootPath

        if [[ "${_PatchFiles}${_PatchSpecificFiles}" != "" ]]; then

            for _Patch in $(echo $_PatchFiles $_PatchSpecificFiles) ; do

                local _DryRun="$(patch -p0 --forward --dry-run < $_Patch)"
                local _Name="$(basename $_Patch | sed 's|.patch$||g')"
                if [[ "$(echo $_DryRun | grep "can't find file to patch")" != "" ]]; then
                    _t4dDebugLog   "${plwarning}[PATCH]${pstd}" "No file to patch $_Name"
                elif [[ "$(echo $_DryRun | grep 'hunk.*' | cut -d '-' -f1 | grep 'ignored')" != "" ]]; then
                    _t4dDebugLog   "${pipurple}[PATCH]${pstd}" "Already Applied $_Name"
                else
                    patch -p0 -f < $_Patch &> $WS_LOGFILE || return 127
                    rm $WS_LOGFILE
                    _t4dDebugLog   "${plblue}[PATCH]${pstd}" "$_Name"
                fi

            done
        else
            _t4dDebugLog   "${plwarning}[PATCH]${pstd}" "No patch file found in ${_patchRootPath}"
        fi
    else
        _t4dDebugLog   "${plwarning}[PATCH]${pstd}" "No patch folder found ${_patchRootPath}"
    fi

}

_wksParseReturnCode(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.1
_t4dDebugInfoStart "_wksParseReturnCode" "$#" "$@"
###### _wksParseReturnCode
#   - Name:
#       _wksParseReturnCode
###
#   - Synopsis:
#       Return Error Log depending on CodeError
###
#   - Example:
#       * _wksParseReturnCode $? $_WS_ERROR $WS_LOGFILE
#           Default example
#       * _wksParseReturnCode 1 $_WS_ERROR $WS_LOGFILE
#           cat LogFile Head Line if file exist
#       * _wksParseReturnCode 127 $_WS_ERROR $WS_LOGFILE
#           cat LogFile (last 3 Line) if provided
###
###### DOCUMENTATION BLOC #####

    local _ReturnStatement="$1"
    local _VarName="$2"
    local _LogFile="$3"
    case $_ReturnStatement in
        0)
            eval $_VarName="0"
        ;;
        *)
            eval $_VarName="$_ReturnStatement"

            if [[ -e "$_LogFile" ]]; then
                _t4dDebugLog "${perror}${plred}[${_ReturnStatement}]${pstd}" "Log :"
                cat $_LogFile | tail -50
                _t4dDebugLog $pinfo "More into : ${plblue}cat ${_LogFile}${pstd}"
            elif [[ "$_ReturnStatement" != "0" ]]; then
                _t4dDebugLog "${perror}${plred}[${_ReturnStatement}]${pstd}" "Something went wrong"
            fi
        ;;
    esac
    
    return $_ReturnStatement

###############################
_t4dDebugInfoEnd "_wksParseReturnCode" "$@"
}


_wkd(){
    local cur prev opts dirs
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    case "$prev $cur" in
        'wkd -'*)
            opts="-addDir -rmDir"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
        ;;
        'wkd'*)
            if [[ "$(cat $Tools4Dev_PATH/.dirs.env)" != ""  ]]; then
                opts="$(cat $Tools4Dev_PATH/.dirs.env | cut -d ':' -f1)"
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            else
                opts="$(la $_T4D_WKS_ROOT  | grep '/$' | rev | cut -d ' ' -f1 | rev | sed 's|/||g' | tr '\n' ' ')"
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0 
            fi
        ;;
    esac
    # if [[ "${prev}" == "wkd" ]] && [[ "$(echo $cur | grep '^-')" != "" ]]; then
    #     opts="-addDir -rmDir"
    #     COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    #     return 0
    # elif [[ "${prev}" == "wkd" ]] && [[ "$(cat $Tools4Dev_PATH/.dirs.env)" != "" ]]; then
    #     opts="$(cat $Tools4Dev_PATH/.dirs.env | cut -d ':' -f1)"
    #     COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    #     return 0
    # elif [[ "${prev}" == "wkd" ]] && [[ "$(cat $Tools4Dev_PATH/.dirs.env)" == "" ]]; then
    #     opts="$(la $_T4D_WKS_ROOT  | grep '/$' | rev | cut -d ' ' -f1 | rev | sed 's|/||g' | tr '\n' ' ')"
    #     COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    #     return 0
    # fi
}

_wksCheckFolderWritablePermissions(){
    local _Folder="$1"
    if [[ -w $_Folder ]]; then
        _t4dCheckSucceeded "$_Folder exist and is writable without sudo rights"
    else
        _t4dCheckFailed "$_Folder no such directory or check permission failed"
        _t4dDebugLog "sudo mkdir -p $_Folder"
        _t4dDebugLog "sudo chown -R $USER $_Folder"
        return 1
    fi
}

_wksDoctorAndroidNDK(){
    _t4dDebugLog "${plwhite}* NDK${pstd}" ""
        for _ndk in $(_wksAndroidNDKs); do
            _t4dCheckFolderIsNotEmpty "$T4D_ANDROID_OPT_ROOT_PATH/android-ndk-$_ndk"
        done
}

_wksDoctorAndroidSDKTools(){
    if [[ -e "$T4D_ANDROID_OPT_ROOT_PATH/android-sdk/tools/bin/sdkmanager" ]]; then
        _t4dDebugLog "${plwhite}* SDK${pstd}" ""
            local _SdkTools="$(find $T4D_ANDROID_OPT_ROOT_PATH/android-sdk -maxdepth 3 -type d)"
            local _SdkToolsMissing=""
            for _sdkTool in $(_wksAndroidSDKTools); do
                local _sdkToolSearch="$(echo $_sdkTool | tr ';' '/')"
                if [[ $(echo $_SdkTools | grep "$_sdkToolSearch") == "" ]]; then
                    _SdkToolsMissing="${_sdkTool}\n$_SdkToolsMissing"
                fi
            done
            if [[ "$_SdkToolsMissing" != "" ]]; then
                _t4dCheckFailed "Missing sdk tool :"
                echo $_SdkToolsMissing
            else
                _t4dCheckSucceeded "Android SDK Tools"
            fi
    else
        _t4dCheckFailed "$T4D_ANDROID_OPT_ROOT_PATH/android-sdk/tools/bin/sdkmanager is missing"
    fi
}

_wksDoctorLinuxPackage(){
    local _dnfPackages="$(rpm -qa)"
    local _result=""
    for i in $(_wksDoctorLinuxDependencyPackage); do
        local _Name="$(echo $i | sed 's|.i686||g')"
        local _Suffix="$(echo $i | grep -Eo '.i686')"
        echo -en "\r Checking $i"
        if [[ "$(echo $_dnfPackages | grep "$_Name" | grep "$_Suffix")" == "" ]]; then
            _result="$_result $_Name$_Suffix"
        fi
    done
    echo -en "\r"
    if [[ "$_result" != "" ]]; then
        _t4dCheckFailed "Missing Dependencies                  "
        echo "sudo dnf install $_result"
    else
        _t4dCheckSucceeded "All Dnf Deps Found                  "
    fi
}

_wks(){
    local cur prev opts dirs
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    # _t4dDebugLog "$plog" "$prev $cur"
    if [[ ${prev} == "wks" ]] ; then
        opts="$(_t4dDocGetOptionsListV4 "$(_t4dDocGetFunctionContent "wks")" )"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    else
        opts="$(_t4dDocGetSectionContent "$(_t4dDocGetFunctionContent "$(_t4dDocGetOptionsHiddenCall "$(_t4dDocGetFunctionContent "wks")" ${prev})" )" "Available Options" | sed 's| ||g' | sed 's|^*||g' | cut -d '|' -f1 | cut -d '=' -f1 | sed 's|DocumentationUnavailable||g')"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
   fi
}


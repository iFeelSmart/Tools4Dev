#### MODULE HEADER BLOC
#
#   - Name:
#       <Name>
###
#   - Synopsis:
#       Jenkins Command Line Tools
###
#   - Description:
#       Module that will allow user to interact with Jenkins Directly from command line
###
#   - Prefix:
#       _t4dMod
###
#   - Error Code:
#       360
###
#  -  Supported Platform:
#       * OSX ( 10.12.6 or higher )
#       * Fedora ( 25 or higher )
###
#  -  Author(s):
#       Quentin NIO
#
###
#### HEADER BLOC ####

# source $T4D_MODULES_PATH/<Module>/.env




jks(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "jks" "$#" "$@"
###### jks
#   - Name:
#       jks
###
#   - Synopsis:
#       Jenkins API Command Line Tools
###
#   - Definition:
#
#
###
#   - Usage:
#       * jks <option>  [arguments]
#           Will execute jks command with all arguments
#       * jks help <option>       
#           Show specific option's documentation 
#
###
#   - Options:
#
###
#   - Example:
#       * jks last                       = Get last build of current Project & Branch
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
#
###
###### DOCUMENTATION BLOC #####
#
########## CODE BLOC ##########


    local CHPWD=1
    local _t4dJksError=360

    mkdir -p $T4D_PROJECT_LOG_PATH/jks

    if [[ $1 != "help" ]]; then
        _t4dModJksLogo main
    fi

    (set -e
        case $1 in
            default)                _t4dModJksDefault ${@:2}               ;;
            *)
                _t4dDebugLog "$perror" "jks : Empty or Unknown argument < $1 >"
                return 360
            ;;
        esac

    )
    #ALL COMMAND ARE LAUNCHED IN A SUBSHELL
    #This is here to stop command at the first untracked error
    #We Also need to check the subshell output in order to identified which kind of error is sent
    if [[ "$?" == "0" ]]; then
        _t4dJksError="0"
    else
       _t4dJksError="360"
    fi

    return $_t4dJksError

###############################
_t4dDebugInfoEnd "jks" "$@"
}

#AUTO COMPLETION
_jks(){
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    option="${COMP_WORDS[1]}"
    if [[ ${prev} == "jks" ]] || [[ ${prev} == "help" ]] ; then
        opts="$(cat $T4D_MODULES_PATH/jks/.ressources/completions/jks)"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ -e "$T4D_MODULES_PATH/jks/.ressources/completions/jks-module/${option}" ]]; then
        opts="$(cat $T4D_MODULES_PATH/jks/.ressources/completions/jks-module/${option})"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}

_jksDoc(){
###### _gikDoc
#   - Name:
#       _gikDoc
###
#   - Synopsis:
#       Show Project Documentation
###
#   - Definition:
#       Parse project Header to show user a ready to read shell documentation
###
###### DOCUMENTATION BLOC ##### 
    local _Internal="${2:-shell}"
    local _MainContent="$(_t4dDocGetFunctionContent jks)"
    if [[ "$_Internal" == "-no-shell" ]]; then
        echo $_MainContent
    elif [[ $# -eq 1 ]] && [[ "$(_t4dDocGetOptionsList "$_MainContent" | grep "^$1")" != "" ]]; then
        local _OptionHiddenCallName="$(_t4dDocGetOptionsHiddenCall "$_MainContent" $1)"
        t4dHelp $_OptionHiddenCallName | sed "s|$_OptionHiddenCallName|jks $1|g"
    elif [[ "$1" == "" ]] || [[ "$1" == "jks" ]]; then
        _t4dModJksLogo doc
        t4dHelp -no-logo jks
    else
        t4dHelp $@
    fi
    echo ""
    echo ""
    echo ""
}

_t4dModJksLogo(){
#   Show Great Ascii IFS logo art :p
#   Usage : _wksLogo

    local _color=${1:-$plcyan}
    hashL1="      #####    ##   ##    #####  "
    hashL2="        ##    ##  ##     ##   ## "
    hashL3="##     ##    #####        ##     "
    hashL4="##    ##    ##   ##   ##    ##   "
    hashL5="  ####     ##     ##   #####     "
    if [[ "$_T4D_QUIET_MODE" == "true" ]]; then
        #DoNothing
    elif [[ "$1" == "doc" ]]; then
        local _Content="${hashL1}%${hashL2}%${hashL3}%${hashL4}%${hashL5}"
        _t4dDocWks ${_Content} ${pired}
    elif [[ "$1" == "main" ]]; then
        local center="$(_t4dPromptCenterSpace '58' | sed 's|-||g')"
        echo "${center}${plcyan}##########################################################"
        echo          "${center}######################       _    _ ######################"
        echo          "${center}############### _           | |  (_)       ###############"
        echo          "${center}########       | | ___ _ __ | | ___ _ __  ___     ########"
        echo          "${center}#####      _   | |/ _ \ '_ \| |/ / | '_ \/ __|       #####"
        echo          "${center}#####     | |__| |  __/ | | |   <| | | | \__ \       #####"
        echo          "${center}#####      \____/ \___|_| |_|_|\_\_|_| |_|___/       #####"
        _t4dPromptEmptyCenter 24
        _t4dPromptEmptyCenter 24
        _t4dPromptEmptyCenter 24
        echo "$pstd"
    else
        local center="$(_t4dPromptCenterSpace "${#l5}" | sed 's|-||g')"
        echo "${center}${_color} $hashL1 ${pstd}"
        echo "${center}${_color} $hashL2 ${pstd}"
        echo "${center}${_color} $hashL3 ${pstd}"
        echo "${center}${_color} $hashL4 ${pstd}"
        echo "${center}${_color} $hashL5 ${pstd}"
        echo ""
    fi
}





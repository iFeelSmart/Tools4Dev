



#Error Code 206
#HEADER SYNTAX :
#   function declared with (){
#       Not ( ){
#       Not () {
#
#   Option Name in case, always most verbose first (-b|-branch NO) (-branch|-b YES)
#   Doc Bloc
#   Section start with '#   - '    
#   Section ends with '###' beware to not add space at end of line    
_t4dDocLogo(){

    local center="$(_t4dPromptCenterSpace '82' | sed 's|-||g')"
    echo "${pliblue}${center}   ______________________________________________________________________________"
    echo "${center}  | THE            _____            _     _  _     ___         \`\`::::%%%%%%%%%HHH|"
    echo "${center}  |               /__   \___   ___ | |___| || |   /   \_____   __ \`::::::::%%%%%%|"
    echo "${center}  |:.               / /\/ _ \ / _ \| / __| || |_ / /\ / _ \ \ / /    \`\`:::::::::%|"
    echo "${center}  |%:::::::::..    / / | (_) | (_) | \__ \__   _/ /_//  __/\ V /               \`:|"
    echo "${center}  |%%%%%%::::::::..\\/   \___/ \___/|_|___/  |_|/___,' \___| \_/   Documentation  |"
    echo "${center}  |HHH%%%%%%%%:::::::::......____________________________________________________|${pstd}"
}

_t4dDocWks(){
    local _Color="${2:-$pliblue}"
    local _Content="$1"
    local _Info="${3:-Documentation}"
    local _Size="$(echo $_Content | cut -d '%' -f1)"
    local _Fill="$(_t4dPromptVarWithChar ${#_Size} "" '_' | sed 's|%||g')"
    local _Space="$(_t4dPromptVarWithChar ${#_Size} "" ' ' | sed 's|%||g')"
    local center="$(_t4dPromptCenterSpace "$(( ${#_Size} + 34 ))" | sed 's|-||g')"
    echo "${pliblue}${center}   ____________________${_Fill}___________"
    echo "${center}  | Tools4Dev     ${_Color}$(echo $_Content | cut -d '%' -f1)${pstd}${pliblue}\`\`::%%%%%%%%%HHH|"
    echo "${center}  |               ${_Color}$(echo $_Content | cut -d '%' -f2)${pstd}${pliblue}   \`::::::%%%%%%|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f3)${pstd}${pliblue}      \`\`:::::::%|"
    echo "${center}  |%:::::::..     ${_Color}$(echo $_Content | cut -d '%' -f4)${pstd}${pliblue}              \`:|"
    echo "${center}  |%%%%%%::::::.. ${_Color}$(echo $_Content | cut -d '%' -f5)${pstd}${pliblue} $(_t4dPromptVarWithSpace "13" $_Info | sed 's|%||g')  |"
    echo "${center}  |HHH%%%%%%%%:::::::::......___${_Fill}__|${pstd}"
    echo ""
}

_t4dDocWksLong(){
    local _Color="${2:-$pliblue}"
    local _Content="$1"
    local _Info="${3:-Documentation}"
    local _Size="$(echo $_Content | cut -d '%' -f1)"
    local _Fill="$(_t4dPromptVarWithChar ${#_Size} "" '_' | sed 's|%||g')"
    local _Space="$(_t4dPromptVarWithChar ${#_Size} "" ' ' | sed 's|%||g')"
    local center="$(_t4dPromptCenterSpace "$(( ${#_Size} + 34 ))" | sed 's|-||g')"
    echo "${pliblue}${center}   ____________________${_Fill}___________"
    echo "${center}  | Tools4Dev     ${_Color}$(echo $_Content | cut -d '%' -f1)${pstd}${pliblue}\`\`::%%%%%%%%%HHH|"
    echo "${center}  |               ${_Color}$(echo $_Content | cut -d '%' -f2)${pstd}${pliblue}   \`::::::%%%%%%|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f3)${pstd}${pliblue}      \`\`:::::::%|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f4)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f5)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f6)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f7)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f8)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f9)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f10)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f11)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f12)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f13)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f14)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f15)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f16)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f17)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f18)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f19)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f20)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f21)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f22)${pstd}${pliblue}              \`:|"
    echo "${center}  |:.             ${_Color}$(echo $_Content | cut -d '%' -f23)${pstd}${pliblue}              \`:|"
    echo "${center}  |%:::::::..     ${_Color}$(echo $_Content | cut -d '%' -f24)${pstd}${pliblue}              \`:|"
    echo "${center}  |%%%%%%::::::.. ${_Color}$(echo $_Content | cut -d '%' -f25)${pstd}${pliblue} $(_t4dPromptVarWithSpace "13" $_Info | sed 's|%||g')  |"
    echo "${center}  |HHH%%%%%%%%:::::::::......___${_Fill}__|${pstd}"
    echo ""
}

_t4dDocumentationIntro(){
    local center="$(_t4dPromptCenterSpace '82' | sed 's|-||g')"
    echo "${center}  |:..                                                      \`\`:::%%%%%%HH|"
    echo "${center}  |%%%:::::..                    I n t r o                     \`:::::%%%%|"
    echo "${center}  |HH%%%%%:::::....._______________________________________________::::::|"
    echo "${center}"
    echo "${center}.    .        .      .             . .     .        .          .          ."
    echo "${center}         .                 .                    .                ."
    echo "${center}  .               A long time ago in Paris far, far away...   ."
    echo "${center}     .               .           .               .        .             ."
    echo "${center}     .      .            .                 .                                ."
    echo "${center} .      .         .         .   . :::::+::::...      .          .         ."
    echo "${center}     .         .      .    ..::.:::+++++:::+++++:+::.    .     ."
    echo "${center}                        .:.  ..:+:..+|||+..::|+|+||++|:.             .     ."
    echo "${center}            .   .    :::....:::::::::++||||O||O#OO|OOO|+|:.    ."
    echo "${center}.      .      .    .:..:..::+||OO#|#|OOO+|O||####OO###O+:+|+               ."
    echo "${center}                 .:...:+||O####O##||+|OO|||O#####O#O||OO|++||:     .    ."
    echo "${center}  .             ..::||+++|+++++|+::|+++++O#O|OO|||+++..:OOOOO|+  .         ."
    echo "${center}     .   .     +++||++:.:++:..+#|. ::::++|+++||++O##O+:.++|||#O+    ."
    echo "${center}.           . ++++++++...:+:+:.:+: ::..+|OO++O|########|++++||##+            ."
    echo "${center}  .       .  :::+++|O+||+::++++:::+:::+++::+|+O###########OO|:+OO       .  ."
    echo "${center}     .       +:+++|OO+|||O:+:::::.. .||O#OOO||O||#@###@######:+|O|  ."
    echo "${center} .          ::+:++|+|O+|||++|++|:::+O#######O######O@############O"
    echo "${center}          . ++++: .+OO###O++++++|OO++|O#@@@####@##################+         ."
    echo "${center}      .     ::::::::::::::::::::++|O+..+#|O@@@@#@###O|O#O##@#OO####     ."
    echo "${center} .        . :. .:.:. .:.:.: +.::::::::  . +#:#@:#@@@#O||O#O@:###:#| .      ."
    echo "${center}                           \`. .:.:.:.:. . :.:.:%::%%%:::::%::::%:::"
    echo "${center}.      .                                      \`.:.:.:.:   :.:.:.:.  .   ."
    echo "${center}           .                                                                ."
    echo "${center}    .     .                                                           .      ."
    echo "${center}  .     .                                                        ."
    echo "${center}              .   A Terrible price war spread throughout the  .        .     ."
    echo "${center}                 galaxy,  a group  of  freedom  managers  has  .  ."
    echo "${center}     .       .  risen  under  the  dark  shadow of evil monster           ."
    echo "${center}.        .     the Galactic  Empire  has  become.                   ."
    echo "${center}   .             Imperial  forces  have  instituted  a reign  of   .      ."
    echo "${center}             fear, and leads an unprecedented manhunt against the"
    echo "${center}          . rebellion.  The  empire  is  reigning terror,  tyranny, .   ."
    echo "${center}   .       oppression,  fear  with  ever  more  powerful  armies  of     .  ."
    echo "${center}.      .  developpers. In  under-strength,  but  with  great  courage,    ."
    echo "${center}         the rebellion is organized  and  learn  to  master  the  mystic    ."
    echo "${center}    .   power  of Shell development. "
    echo "${center}  .   .   this  power  is  the  source  of their great power.  Today it is ."
    echo "${center}.      presented to you,  young  Developer, ready to  discover runes of this "
    echo "${center}    . powerful development tool."
    echo "${center}.        .               .       .     .            ."
    echo "${center}   .           .        .                     .        .            ."
    echo "${center}.        .          .    .    .            .            .                   ."
    echo "${pred}${center}  Importants TIPS : t4dHelp <function> will save you${pstd}"
    echo "${pred}${center}  Importants TIPS : t4dDoc will show you the dark side of the force${pstd}"
    echo "${center}.        .          .    .    .            .            .                   ."
    echo "${center}               .               ..       .       .   .             ."
    echo "${center} .       .   T h i s   i s   t h e   d o c u m e n t a t i o n   o f   . . .  ."
    echo "${center}                     .              .       .                    .      ."
    echo "${center}.        .               .       .     .            ."
    echo "${center}   .           .        .                     .        .            ."
    echo "${center}             .               .    .          .              .   .         ."
    echo "${center} .              ${pllwhite} _____   .        _     _  _     ___   .    .  ${pstd}      .     ."
    echo "${center}     .          ${pllwhite}/__   \___   ___ | |___| || |   /   \_____   __${pstd}    .    . "
    echo "${center}  .             ${pllwhite}  / /\/ _ \ / _ \| / __| || |_ / /\ / _ \ \ / /${pstd}        .  "
    echo "${center}        .       ${pllwhite} / / | (_) | (_) | \__ \__   _/ /_//  __/\ V / ${pstd}    .        ."
    echo "${center}     .          ${pllwhite} \/   \___/ \___/|_|___/  |_|/____/ \___| \_/  ${pstd} ."
    echo "${center}                               .                                        ."
    echo "${center}     .                           .         .               .               ."
    echo "${center}                .                                   .            ."
    echo "${center}"
}



_t4dDocGetDependencies(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dDocGetDependencies" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dDocGetDependencies
#   - Name:
#       _t4dDocGetDependencies
###
#   - Synopsis:
#       Return list of every Module loaded in file
###
#   - Definition:
#       Will return all module loaded in file, using relative path from $Tools4Dev_PATH
#
###
#   - Usage:
#       _t4dDocGetDependencies <RelativeFileNamePath>
#
###
#   - Example:
#       _t4dDocGetDependencies "$T4D_PROJECTS_PATH/Cmake/_main_.env"
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
     if [[ "$WS_ROOT" == "$Tools4Dev_PATH" ]]; then
        _t4dDocGetAvailableModules
    elif [[ -e "$1" ]]; then
        cat "${1}" | grep 't4dLoadModule' | grep -v '#.*t4dLoadModule' | grep -Eo 't4dLoadModule.*' | cut -d ' ' -f2
    else
        cat "$Tools4Dev_PATH/${1}" | grep -Eo 't4dLoadModule.*' | cut -d ' ' -f2
    fi

###############################
_t4dDebugInfoEnd "_t4dDocGetDependencies" "$@"
}

_t4dDocGetAvailableModules(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dDocGetAvailableModules
#   - Name:
#       _t4dDocGetAvailableModules
###
#   - Synopsis:
#       Return all available modules
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    find $T4D_MODULES_PATH | sed "s|^${T4D_MODULES_PATH}/||g" | cut -d '/' -f1 | uniq

###############################
}

_t4dDocGetAliases(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dDocGetAliases" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dDocGetAliases
#   - Name:
#       _t4dDocGetAliases
###
#   - Synopsis:
#       Return list of every Module loaded in file
###
#   - Definition:
#       Will return all module loaded in file, using relative path from $Tools4Dev_PATH
#
###
#   - Usage:
#       _t4dDocGetAliases <RelativeFileNamePath>
#
###
#   - Example:
#       _t4dDocGetAliases "$T4D_PROJECTS_PATH/Cmake/_main_.env"
#       _t4dDocGetAliases "$WS_ROOT/project.env"
#       _t4dDocGetAliases "$WS_ROOT/project.env" wk
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
    local _Prefix="${2:-wk}"
    
    if [[ -e "$1" ]]; then
        cat "${1}" | grep "alias $_Prefix" | grep -v '#.*alias' | grep -Eo 'alias.*' | sed 's|alias ||g'
    elif [[ -e "$Tools4Dev_PATH/${1}" ]]; then
        cat "$Tools4Dev_PATH/${1}" | grep "alias $_Prefix" | grep -v '#.*alias' | grep -Eo 'alias.*' | sed 's|alias ||g'
    else
        echo "$1" | grep "alias $_Prefix" | grep -v '#.*alias' | grep -Eo 'alias.*' | sed 's|alias ||g'
    fi


###############################
_t4dDebugInfoEnd "_t4dDocGetDependencies" "$@"
}

_t4dDocGetAliasContent(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dDocGetAliasesContent" "$#" "$@"
###### _t4dDocGetAliasesContent
#   - Name:
#       _t4dDocGetAliasesContent
###
#   - Synopsis:
#       |One-line description of what it does. (less than 55 char)|
###
#   - Example:
#       _t4dDocGetAliasContent <Alias> <[name][content]>
###
###### DOCUMENTATION BLOC #####
    local _Alias="$(alias $1)"
    case $2 in 
        name)
            echo $_Alias | cut -d '=' -f1
        ;;
        content)
            echo $_Alias | cut -d '=' -f2 | sed "s|'||g"
        ;;
    esac

###############################
_t4dDebugInfoEnd "_t4dDocGetAliasesContent" "$@"
}

_t4dDocGetHeader(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dDocGetHeader" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dDocGetHeader
#   - Name:
#       _t4dDocGetHeader
###
#   - Synopsis:
#       Return Header Bloc Documentation
###
#   - Definition:
#       This method can read any  file|function|option  content  and return all Documentation 
#           Bloc as their output
#       If -file  is specified as first argument,  this function will read arg2 relative path 
#           from  $Tools4Dev_PATH to this file,  read it's content and search for header Bloc 
#           on top of it.
#       If -function is specified as first argument, this function will read arg2 as function
#           content and try to launch  _t4dDocGetFunctionContent  to search for documentation 
#           Bloc in it.
#       If -option is specified as first argument,  this function will try to run helper from 
#           this options to return his documentation bloc
#
###
#   - Usage:
#       _t4dDocGetHeader <Option> [arguments] 
#
###
#   - Options:
#       -file <File Content>
#       -function <Function Content>
#       -option <Function> <Option>
#
###
#   - Example:
#       _t4dDocGetHeader -file "$T4D_PROJECTS_PATH/Cmake/_main_.env"
#       _t4dDocGetHeader -function "wkg"
#       _t4dDocGetHeader -option "wkg" "status"
#
###
#   - Note:
#       < >     = Required
#       [ ]     = Optional
#
###
#   - Keyword :
#       Doc Generator _t4dDoc Documentation
#       
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
    local _HeaderBloc=""
    
    case $1 in 
        -file)
            if [[ -e $2 ]]; then
                local pathfile="${2}"
            else
                local pathfile="$Tools4Dev_PATH/${2}"
            fi
            _HeaderBloc="$(cat "$pathfile" | grep -A200 '#### MODULE HEADER BLOC' | grep -B200 '#### HEADER BLOC ####' || true )$(cat "$pathfile" | grep -A200 '#### PROJECT HEADER BLOC' | grep -B200 '#### HEADER BLOC ####' || true )"
        ;;
        -function)
            _HeaderBloc="$(_t4dDocGetFunctionContent "$2" "$3" | grep -A100 "#### $2" | grep -B100 '###### DOCUMENTATION BLOC #####')"
        ;;
        -option)
        ;;
        *)
            _t4dDebugLog $perror "_t4dDocGetHeader Unknown Option $1"
            return 206
        ;;
    esac
    if [[ "$_HeaderBloc" == "" ]]; then
        _t4dDebugLog $pwarning "_t4dDocGetHeader $@ can't find HeaderBloc"
        echo ""
    else
        echo "$_HeaderBloc"
    fi  

###############################
_t4dDebugInfoEnd "_t4dDocGetHeader" "$@"
}

_t4dDocGetSectionList(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dDocGetSectionList" "$#" "<HeaderBloc> ${@:2}"
#cat &>/dev/null << EOF
###### _t4dDocGetSectionList
#   - Name:
#       _t4dDocGetSectionList
###
#   - Synopsis:
#       Return All Section Available from any Header Bloc
###
#   - Definition:
#       This function will take any Header Bloc generated by _t4dDocGetHeader as input then 
#       return a list containing all available section doc.
#
#       sed 's| $||g'      Remove Space at End of line
#       sed 's|$|%%|g'     add %% at end of line
#       grep ':%%'         search for : at end of line
#       sed 's|:%%||g'     remove previous search override
#       sed 's|#   ||g'    remove first part of line
#       sed 's| |+|g'      keep every line as 1 argument, replace space by +
#       sed 's|+$||g'      remove + at end of line
#       grep -v '^++'      remove content that does not fit with indent doc normalization
#       sed "s|\-+||g" )"  #remove previous filter override
#
#       
#   
###
#   - Usage:
#       _t4dDocGetSectionList "<HeaderBloc>"
#
###
#   - Example:
#       _t4dDocGetSectionList "$(_t4dDocGetHeader -file "$T4D_PROJECTS_PATH/Cmake/_main_.env")"
#       _t4dDocGetSectionList "$(_t4dDocGetHeader -file "$WS_ROOT/project.env")"
#
###
#   - Note:
#       < >     = Required
#       [ ]     = Optional
#
###
#   - Keyword :
#       
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########


    local _SectionsList=""
    _SectionsList="$(echo "$1" | sed 's| $||g'       \
                               | sed 's|$|%%|g'      \
                               | grep ':%%'          \
                               | sed 's|:%%||g'      \
                               | sed 's|#   ||g'     \
                               | sed 's| |+|g'       \
                               | sed 's|+$||g'       \
                               | grep -v '^++'       \
                               | sed "s|\-+||g" )" 

    if [[ "$_SectionsList" == "" ]]; then
        _t4dDebugLog $pwarning "_t4dDocGetSectionList $@ can't find any well documented bloc"
        echo ""
    else
        echo "$_SectionsList"
    fi

###############################
_t4dDebugInfoEnd "_t4dDocGetSectionList" "$@"
}

_t4dDocGetAvailableOptions(){
# Generated From Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dDocGetAvailableOptions
#   - Name:
#       _t4dDocGetAvailableOptions
###
#   - Synopsis:
#       return list of available option from doc using arg1
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    _t4dDocGetSectionContent "$(_t4dDocGetFunctionContent "$1")" "Available Options" | sed 's| ||g' | sed 's|^*||g' | cut -d '|' -f1 | cut -d '=' -f1 | sed 's|DocumentationUnavailable||g'

###############################
}

_t4dDocGetSectionContent(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dDocGetSectionContent" "$#" "<HeaderBloc> ${@:2}"
#cat &>/dev/null << EOF
###### _t4dDocGetSectionContent
#   - Name:
#       _t4dDocGetSectionContent
###
#   - Synopsis:
#       Return specific Section Content of any Header Bloc 
###
#   - Definition:
#
###
#   - Usage:
#       _t4dDocGetSectionContent "<HeaderBloc>" "<SectionName>" [-allow-empty]
#
###
#   - Available Options:
#       * -allow-empty
#           Do not show Documentation Unavailable if section is empty
#
###
#   - Example:
#       _t4dDocGetSectionContent "$(_t4dDocGetHeader -file "$T4D_PROJECTS_PATH/Cmake/_main_.env")" "Synopsis"
#       _t4dDocGetSectionContent "$(_t4dDocGetHeader -file "$WS_ROOT/project.env")" "Synopsis"
#       _t4dDocGetSectionContent "$(_t4dDocGetHeader -file "$WS_ROOT/project.env")" "Available Options" -allow-empty
#
###
#   - Note:
#       < >     = Required
#       [ ]     = Optional
#
###
#   - Keyword :
#       
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local _SectionDoc=""
    local _AllowDocEmpty="${3:-false}"
    _SectionDoc="$(echo "$1" | sed 's| :$|:|g' | grep -A100 "${2}:"       \
                             | sed -n '1!p'              \
                             | sed 's| $||g'             \
                             | sed 's|$|%%|g'            \
                             | grep -m 1 -B100 '###%%'   \
                             | sed 's|#||g'              \
                             | sed 's|%%$||g' )"

    if [[ "$_T4D_DOC_INTO" == "shell" ]]; then
        _SectionDoc="$(echo "$_SectionDoc"  | sed "s|<PROJECT NAME>|${WS_PROJECT_NAME:-Example}|g" \
                                            | sed "s|<<<|\\${ppurple}|g" \
                                            | sed "s|>>>|\\${pstd}|g" \
                                            | sed "s| \`|  \\$plpurple|g" \
                                            | sed "s|\` |\\$pstd  |g" \
                                            | sed "s| %| \\$pcyan |g" \
                                            | sed "s|> <|\\${pstd}   \\${ppurple}|g" \
                                            | sed "s|> \[|\\${pstd}   \\${pyellow}|g" \
                                            | sed "s| <|  \\$ppurple|g" \
                                            | sed "s| \[|  \\$pyellow|g" \
                                            | sed "s|\] |\\$pstd  |g" \
                                            | sed "s|> |\\$pstd  |g" \
                                            | sed "s|\]$|\\$pstd |g" \
                                            | sed "s|>$|\\$pstd |g" \
                                            | sed "s|%$|\\$pstd |g" \
                                            | sed "s|% |\\$pstd  |g")"
    elif [[ "$_T4D_DOC_INTO" == "markdown" ]]; then
        _SectionDoc="$(echo "$_SectionDoc"  | sed "s|<PROJECT NAME>|${WS_PROJECT_NAME:-Example}|g" \
                                            | sed "s| \`| \\**|g" \
                                            | sed 's|<<<|```|g' \
                                            | sed 's|>>>|```|g' \
                                            | sed "s|\` |\\** |g" \
                                            | sed "s| %| \\__|g" \
                                            | sed "s| \[| \\**|g" \
                                            | sed "s|\] |\\** |g" \
                                            | sed "s|\]$|\\**|g" \
                                            | sed "s|%$|\\__|g" \
                                            | sed "s|% |\\__ |g")"
    fi

    if [[ "$_SectionDoc" == "" ]]; then
        if [[ "$_AllowDocEmpty" == "-allow-empty" ]]; then
            echo ""
        else
            _t4dDebugLog $pwarning "_t4dDocGetSectionContent $2 section bloc not found"
            echo "Documentation Unavailable"
        fi
    else
        echo "$_SectionDoc"
    fi

###############################
_t4dDebugInfoEnd "_t4dDocGetSectionContent" "$@"
}

_t4dDocGetFunctionsList(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dDocGetFunctionsList" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dDocGetFunctionsList
#   - Name:
#       _t4dDocGetFunctionsList
###
#   - Synopsis:
#       Return Public Functions Defined in file as a list
###
#   - Definition:
#       Will Read any file using relative path + arg1 in order to find '(){' declaration
#       It will return a list of each function find this way. 
#
###
#   - Usage:
#       _t4dDocGetFunctionsList <RelativePath>
#       _t4dDocGetFunctionsList <RelativePath> -private
#
###
#   - Example:
#       _t4dDocGetFunctionsList "$T4D_PROJECTS_PATH/<ProjectName>/_main_.env"
#       _t4dDocGetFunctionsList "$WS_ROOT/project.env"
#       _t4dDocGetFunctionsList "$WS_ROOT/project.env" -private
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
    local _Private="${2:-false}"
    if [[ -e $1 ]]; then
        local pathfile="${1}"
    else
        local pathfile="$Tools4Dev_PATH/${1}"
    fi
    
    if [[ -e "$pathfile" ]] && [[ ! -z "$1" ]]; then
        if [[ "$_Private" == "-private" ]]; then
            cat "$pathfile" | grep '(){' | grep -v '^ ' | sed 's| ||g' | grep '{$' | grep -v '^\$' | sed 's|(){||g' | grep '^_'
        else
            cat "$pathfile" | grep '(){' | grep -v '^ ' | sed 's| ||g' | grep '{$' | grep -v '^\$' | sed 's|(){||g' | grep -v '^_'
        fi
    elif [[ "$(echo $1 | grep '(){')" != "" ]]; then
        if [[ "$_Private" == "-private" ]]; then
            echo "$1" | grep '(){' | grep -v '^ ' | sed 's| ||g' | grep '{$' | grep -v '^\$' | sed 's|(){||g' | grep '^_'
        else
            echo "$1" | grep '(){' | grep -v '^ ' | sed 's| ||g' | grep '{$' | grep -v '^\$' | sed 's|(){||g' | grep -v '^_'
        fi
    else
        _t4dDebugLog $perror "_t4dDocGetFunctionsList $pathfile File not found"
        return 206
    fi

###############################
_t4dDebugInfoEnd "_t4dDocGetFunctionsList" "$@"
}

_t4dDocGetFunctionContent(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dDocGetFunctionContent" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dDocGetFunctionContent
#   - Name:
#       _t4dDocGetFunctionContent
###
#   - Synopsis:
#       Search in every Tools4Dev Source file function definition and return his content
###
#   - Definition:
#       This function will search in Project|Modules|Source|Platform folder 
#       For arg1 name as declared function. 
#       It will read into the founded file and get all of his content
#
###
#   - Usage:
#       _t4dDocGetFunctionContent <Name>
#
###
#   - Options:
#
###
#   - Example:
#       _t4dDocGetFunctionContent "wkg"
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
    local _File
    local _Function="$1(){"
    local _FunctionName="$1"
    local _Project="${2:-$WS_PROJECT_NAME}"
    local _Platform="${T4D_PLATFORM_NAME}"
    local _ModuleMode="$(_t4dGetModuleModeFromFunction $_FunctionName)"

    if [[ "$(echo $_Function | grep '^_wksClone')" != "" ]]; then
        _File="$Tools4Dev_PATH/$(cat $Tools4Dev_PATH/.Ressources/index/private.index $T4D_TEAM_ROOT/.Ressources/index/private.index | grep "$_FunctionName" | cut -d ':' -f1 | uniq | head -1).env"
    elif [[ "$(echo $_Function | grep '^wks' | grep -v '_wksClone')" != "" ]] || [[ "$(echo $_Function | grep '^_wks' | grep -v '_wksClone')" != "" ]] ; then
        _File="$(grep -H "^$_Function" "$WS_ROOT/project.env" | cut -d ':' -f1 | uniq | head -1)"
        if [[ "$_File" == "" ]] && [[ -d "$WS_ROOT/_t4d_" ]] ; then
            local CHPWD=1
            cd $WS_ROOT/_t4d_
            _File="$(_t4dSystemFindInFiles "^$_FunctionName\(\)\{" env | grep -v '\.t4d' | cut -d ':' -f1 | uniq | head -1)"
            #  _t4dDebugLog $pinfo "_t4dSystemFindInFiles \"^$_Function\" env | grep -v '\.t4d' : -> $_File"
        fi
        if [[ "$_File" == "" ]] && [[ "$WS_PROJECT_NAME" != "" ]]; then
            _File="$Tools4Dev_PATH/$(cat $Tools4Dev_PATH/.Ressources/index/private.index $T4D_TEAM_ROOT/.Ressources/index/private.index | grep "$_FunctionName$" | grep "$WS_PROJECT_NAME" | cut -d ':' -f1 | uniq | head -1).env"
        fi
    elif [[ "$(echo $_Function | grep '^_t4dMod')" != "" ]] || [[ "$(echo $_Function | grep '^_...Doc')" != "" ]]; then
        local ModuleSuffix="$(echo $_Function | tr '[A-Z]' '[a-z]' | sed 's|^_||g' | sed 's|^t4dmod||g')"
        local _ModuleName="${ModuleSuffix:0:3}"
        _File="$T4D_MODULES_PATH/${_ModuleName}/$(cat $T4D_MODULES_PATH/${_ModuleName}/.Ressources/index/private.index $T4D_TEAM_ROOT/.Ressources/index/private.index | grep "$_FunctionName$" | cut -d ':' -f1 | uniq | grep "$_ModuleMode" | head -1).env"
    elif [[ "$(echo $_Function | grep '^_')" != "" ]]; then
        _File="$Tools4Dev_PATH/$(cat $Tools4Dev_PATH/.Ressources/index/private.index $T4D_TEAM_ROOT/.Ressources/index/private.index | grep "$_FunctionName$" | cut -d ':' -f1 | uniq | head -1).env"
    elif [[ -e "$T4D_MODULES_PATH/$_FunctionName" ]]; then
        if [[ -e "$T4D_MODULES_PATH/$_FunctionName/_main_.env" ]]; then
            local _ModuleMainFile="$T4D_MODULES_PATH/$_FunctionName/_main_.env"
        elif [[ -e "$T4D_MODULES_PATH/$_FunctionName/_main_.external.env" ]]; then
            local _ModuleMainFile="$T4D_MODULES_PATH/$_FunctionName/_main_.external.env"
        else
            _t4dDebugLog $perror "Can't find _main_.env or  _main_.external.env in $T4D_MODULES_PATH/$_FunctionName"
            return 0
        fi
        _File="$(grep -H "^$_Function" $(echo $_ModuleMainFile | tr '\n' ' ') | cut -d ':' -f1 | uniq | head -1)"
    else
        _File="$Tools4Dev_PATH/$(cat $Tools4Dev_PATH/.Ressources/index/public.index $T4D_TEAM_ROOT/.Ressources/index/public.index | grep "$_FunctionName$" | cut -d ':' -f1 | uniq | head -1).env"
    fi

    local _FileName="$(echo $_File | tr -d ' ' )"
    t4dLogVerbose $pvlog "$_FileName"
    if [[ "$_FileName" != "" ]] && [[ -e "$_FileName" ]]; then
        echo "$(cat $_FileName | sed -n "/$_Function\$/,/^}/p" | grep -m 1 -B1000 '^}')"
    else
        _t4dDebugLog $perror "No Source File Found for $1"
    fi

###############################
_t4dDebugInfoEnd "_t4dDocGetFunctionContent" "$@"
}

_t4dDocGetOptionsListV4(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dDocGetOptionsListV4" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dDocGetOptionsListV4
#   - Name:
#       _t4dDocGetOptionsListV4
###
#   - Synopsis:
#       Return option list of any Function Content
###
#   - Definition:
#       Will return every available option name present in any global function
#       This function has to be written respecting many things.
#       Menu has to be written using 'case $1'
#       Function has to contain only one unique menu
#
###
#   - Usage:
#       _t4dDocGetOptionsListV4 <FunctionContent>
#
###
#   - Example:
#       _t4dDocGetOptionsListV4 "$(_t4dDocGetFunctionContent "wkg")"
#
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    echo "$(echo "$1"   | sed 's|case "$1"|case $1|g' \
                        | grep -A100 'case $1' \
                        | grep -B100 -m 1 'esac' \
                        | grep -Eo '.*\)' \
                        | sed 's|*)||g' \
                        | sed 's| ||g' \
                        | grep -v '^#' \
                        | grep -v 'if\[\[' \
                        | sed '/^$/d' \
                        | sed '/\$(/d' \
                        | sed 's|)||g' \
                        | cut -d '|' -f1)"  

###############################
_t4dDebugInfoEnd "_t4dDocGetOptionsListV4" "$@"
}

_t4dDocGetOptionsList(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dDocGetOptionsList" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dDocGetOptionsList
#   - Name:
#       _t4dDocGetOptionsList
###
#   - Synopsis:
#       Return option list of any Function Content
###
#   - Definition:
#       Will return every available option name present in any global function
#       This function has to be written respecting many things.
#       Menu has to be written using 'case $1'
#       Function has to contain only one unique menu
#
###
#   - Usage:
#       _t4dDocGetOptionsList <FunctionContent>
#
###
#   - Example:
#       _t4dDocGetOptionsList "$(_t4dDocGetFunctionContent "gik")"
#       _t4dDocGetOptionsList "$(_t4dDocGetFunctionContent "wks")"
#
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    echo "$(echo "$1" | grep -A1 'case $1' | tail -1) $(echo "$1" | grep -A200 'case $1' | grep -B100 'esac' | grep -A1 ";;" )" \
            | sed 's|;;||g' \
            | sed 's|none||g' \
            | sed 's|--||g' \
            | sed 's| ||g' \
            | sed 's|esac||g' \
            | sed 's|*)||g' \
            | sed '/^$/d' \
            | grep -v '^#' \
            | sed 's|)||g'    

###############################
_t4dDebugInfoEnd "_t4dDocGetOptionsList" "$@"
}

_t4dDocGetOptionsHiddenCall(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.0
_t4dDebugInfoStart "_t4dDocGetOptionsHiddenCall" "$#" "$@"
###### _t4dDocGetOptionsHiddenCall
#   - Name:
#       _t4dDocGetOptionsHiddenCall
###
#   - Synopsis:
#       |One-line description of what it does. (less than 55 char)|
###
#   - Example:
#       _t4dDocGetOptionsHiddenCall
###
###### DOCUMENTATION BLOC #####

    local _Doc="$1"
    local _Option="$2"
    echo "$(echo "$_Doc"    | sed 's|case "$1"|case $1|g' \
                            | grep -A100 'case $1' \
                            | grep -B100 'esac' \
                            | grep -E " ${_Option}\)| $_Option\|| $_Option\*)" \
                            | cut -d ')' -f2 \
                            | grep -Eo '.[a-z].*' \
                            | sed 's|^ ||g' \
                            | cut -d ' ' -f1)"

###############################
_t4dDebugInfoEnd "_t4dDocGetOptionsHiddenCall" "$@"
}


_t4dDocConvertContentInto(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.2.2
_t4dDebugInfoStart "_t4dDocConvertContentInto" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dDocConvertContentInto
#   - Name:
#       _t4dDocConvertContentInto
###
#   - Synopsis:
#       Will generated custom output depend on which arg1 was specified
###
#   - Definition:
#
###
#   - Usage:
#       _t4dDocConvertContentInto <Options> [-no-title] <Doc>
#
###
#   - Options:
#       -shell
#       -markdown
#       -manpage
#
###
#   - Example:
#       _t4dDocConvertContentInto -shell -file "$T4D_PROJECTS_PATH/Cmake/_main_.env"
#       _t4dDocConvertContentInto -shell -function "wkg"
#
###
#   - Note:
#
###
#   - Keyword :
#       
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########
    case $2 in
        -file)
            local _Content="$(_t4dDocGetHeader ${@:2})"
            local _Doc="$(_t4dDocGetHeader ${@:2})"
            local _Deps="$(_t4dDocGetDependencies ${@:3})"
            local _Commands="$(_t4dDocGetFunctionsList ${@:3})"
            local _Prefix="$(_t4dDocGetSectionContent "$_Doc" "Prefix" 2> /dev/null | tr -d ' ')"
            # if [[ "$_Prefix" != "" ]]; then
                local _Aliases="$(_t4dDocGetAliases "$WS_ROOT/project.env" $_Prefix  | sed 's| |@|g' | grep "${_Prefix}[a-z]=" | cut -d '=' -f1) $(_t4dDocGetAliases "$WS_ROOT/project.env" ${_Prefix} | sed 's| |@|g' | grep "${_Prefix}[a-z][a-z]=" | cut -d '=' -f1)"
                local _Shortcut="$(_t4dDocGetAliases "$WS_ROOT/project.env" $_Prefix | sed 's| |@|g' | grep "${_Prefix}[a-z][A-Z]" | cut -d '=' -f1)"
                t4dLogVerbose $plog ">$_Prefix< -> $_Shortcut"
            # fi
        ;;
        -function)
            local _Content="$(_t4dDocGetFunctionContent ${@:3})"
            local _Doc="$(_t4dDocGetHeader ${@:2})"
        ;;
        -header)
            local _Content="$3"
            local _Doc="$3"
        ;;
        *)
            _t4dDebugLog $perror "_t4dDocConvertContentInto Unknown Option $2"
            return 206
        ;;
    esac

    case $1 in
        -shell)
            local _T4D_DOC_INTO="shell"
            # _t4dDocLogo
            for _Section in $(_t4dDocGetSectionList "$_Doc"); do
                local _NormalizedSection="$(echo $_Section | sed 's|+| |g')"
                case "$_NormalizedSection" in
                    "Modules")
                        if [[ "$_Deps" != "" ]]; then
                            _t4dPromptSquare "$_NormalizedSection" "$plblue"
                            for _Dependency in $(echo $_Deps); do
                                local _DependencyDoc="$(_t4dDocGetFunctionContent "$_Dependency")"
                                local _Synopsis="$(_t4dDocGetSectionContent "${_DependencyDoc}" Synopsis 2> /dev/null | sed 's|       ||g')"
                                _t4dPromptInfo "       ${_Dependency}" "${_Synopsis}" 21 '-'
                            done
                        fi
                    ;;
                    "Commands")
                        # _t4dDebugLog $plog ">Commands"
                        _t4dPromptSquare "$_NormalizedSection" "$plblue"
                        for _Command in $(echo $_Commands); do
                            local _CommandDoc="$(_t4dDocGetFunctionContent "$_Command")"
                            local _Synopsis="$(_t4dDocGetSectionContent "${_CommandDoc}" Synopsis 2> /dev/null | sed 's|       ||g')"
                            _t4dPromptInfo "         ${_Command}" "${_Synopsis}" 21 '-'
                        done
                        if [[ "$_Aliases" != "" ]]; then
                            echo ""
                            echo "     ${pugreen}Project Aliases${pstd}"
                            for _Alias in $(echo $_Aliases); do
                                local _AliasName=$(_t4dDocGetAliasContent $_Alias name)
                                local _AliasContent="$(_t4dDocGetAliasContent $_Alias content)"
                                _t4dPromptInfo "         ${_AliasName}" "$_AliasContent" 23 '-'
                            done
                        fi
                        if [[ "$_Shortcut" != "" ]]; then
                            echo ""
                            echo "     ${pugreen}Project Shortcut${pstd}"
                            for _Alias in $(echo $_Shortcut); do
                                local _AliasName=$(_t4dDocGetAliasContent $_Alias name)
                                local _AliasContent="$(_t4dDocGetAliasContent $_Alias content)"
                                _t4dPromptInfo "         ${_AliasName}" "$_AliasContent" 23 '-'
                            done
                        fi
                         
                    ;;
                    "Doctor")
                        _t4dPromptSquare "$_NormalizedSection" "$plblue"
                        _t4dPromptIndent 2 "$(_wksDoctor --no-logo 2>&1)"
                    ;;
                    "Options")
                        _t4dPromptSquare "$_NormalizedSection" "$plblue"
                        for _Option in $(_t4dDocGetOptionsListV4 $_Content); do
                            local _OptionName=$(echo $_Option | cut -d '|' -f1 | cut -d '*' -f1 | sed 's|-|\-|g')
                            local _OptionHiddenCallName="$(_t4dDocGetOptionsHiddenCall "$_Content" $_OptionName)"
                            local _OptionHiddenCallDoc="$(_t4dDocGetFunctionContent $_OptionHiddenCallName)"
                            local _Synopsis="$(_t4dDocGetSectionContent "${_OptionHiddenCallDoc:-None}" Synopsis 2> /dev/null | sed 's|       ||g')"
                            _t4dPromptInfo "       ${_Option}" "${_Synopsis}" 21 '-'
                        done
                    ;;
                    "WKS Options")
                        _t4dPromptSquare "$_NormalizedSection" "$plblue"
                        local _CommandDoc="$(_t4dDocGetFunctionContent "wks")"
                        for _Option in $(_t4dDocGetOptionsListV4 $_CommandDoc); do
                            # _t4dDebugLog $plog ">$_Option"
                            local _OptionName=$(echo $_Option | cut -d '|' -f1  | cut -d '*' -f1 | sed 's|-|\-|g')
                            local _OptionHiddenCallName="$(_t4dDocGetOptionsHiddenCall "$_CommandDoc" $_OptionName)"
                            local _OptionHiddenCallDoc="$(_t4dDocGetFunctionContent $_OptionHiddenCallName)"
                            local _Synopsis="$(_t4dDocGetSectionContent "${_OptionHiddenCallDoc:-None}" Synopsis 2> /dev/null | sed 's|       ||g')"
                            _t4dPromptInfo "       ${_Option}" "${_Synopsis}" 21 '-'
                        done
                    ;;
                    "Additionnal Options")
                        _t4dPromptSquare "$_NormalizedSection" "$plcyan"
                        local _DependencyDoc="$(_t4dDocGetHeader -function "$(_t4dDocGetSectionContent "$_Doc" "Additionnal Options" | sed 's| ||g')")"
                        local _AvailableOptions="$(_t4dDocGetSectionContent "$_DependencyDoc" "Available Options" )"
                        echo $_AvailableOptions
                    ;;
                    # "Name"|"Usage"|"Author(s)"|"Supported Platform"|"Description"|"QA Examples")

                    # ;;
                    "Prefix"|"Template"|"See Also"|"Error Code"|"Keyword"|"Author(s)"|"Licenses")
                        DO_NOTHING=0
                        #SHELL Output does not need to see those sections
                    ;;
                    *)
                        _t4dPromptSquare "$_NormalizedSection" "$plblue"
                        _t4dDocGetSectionContent "$_Doc" "$_NormalizedSection"
                    ;;
                esac
            done
        ;;
        -markdown)
            local _T4D_DOC_INTO="markdown"
            for _Section in $(_t4dDocGetSectionList "$_Doc"); do
                local _NormalizedSection="$(echo $_Section | sed 's|+| |g')"
                case "$_NormalizedSection" in
                    
                    Name|Synopsis)
                        echo ""
                        echo "## $_NormalizedSection"
                        echo "<p>$(_t4dDocGetSectionContent "$_Doc" "$_NormalizedSection" | sed 's/^ *//')</p>"
                        echo ""
                    ;;
                    Options)
                        echo ""
                        echo "## $_NormalizedSection"
                        for _Option in $(_t4dDocGetOptionsListV4 $_Content); do
                            local _OptionName=$(echo $_Option | cut -d '|' -f1 | sed 's|-|\-|g')
                            local _OptionHiddenCallName="$(_t4dDocGetOptionsHiddenCall "$_Content" $_OptionName)"
                            local _OptionHiddenCallDoc="$(_t4dDocGetFunctionContent $_OptionHiddenCallName)"
                            local _Synopsis="$(_t4dDocGetSectionContent "${_OptionHiddenCallDoc:-None}" Synopsis 2> /dev/null | sed 's|       ||g')"
                            local _AvailableOptions="$(_t4dDocGetSectionContent "$_OptionHiddenCallDoc" "Available Options" -allow-empty 2> /dev/null)"
                            echo "- **$_OptionName**" | sed 's|%||g'
                            echo "    - _${_Synopsis:-Documentation Unavailable}_"
                            if [[ "$_AvailableOptions" != "" ]]; then
                                # echo "    - Params"
                                echo "$_AvailableOptions" | sed 's|^|        > |g' | sed 's|\*\*|\*|g'

                            fi
                        done
                    ;;
                    Definition)
                        echo ""
                        echo "## $_NormalizedSection"
                        echo "<p>"
                        echo ""
                        echo "$(_t4dDocGetSectionContent "$_Doc" "$_NormalizedSection" | sed 's/^ *//' | sed 's|^§|###|g')"
                        echo "</p>"
                        echo ""
                    ;;
                    Usage)
                        local _Usages="$(_t4dDocGetSectionContent "$_Doc" "$_NormalizedSection" | sed 's/^ *//')"
                        echo ""
                        echo "## $_NormalizedSection"
                        for _Line in $(echo $_Usages | sed 's| |@|g'); do
                            if [[ "$(echo $_Line | grep '^*')" != "" ]]; then
                                echo ""
                                echo "* \`$(echo $_Line | sed 's|^*@||g')\`" | sed 's|@| |g'
                                echo ""
                            else
                                echo "$_Line" | sed 's|@| |g'
                                echo ""
                            fi
                            # local _Command="$(echo "$_Ex" | sed 's|@| |g')"
                            # local _Doc="$(echo $_Examples | grep -A1 "^$_Command" | tail -1)"
                            # echo "$_Command"
                            # echo ""
                            # echo "$_Doc"
                            # echo ""
                            # echo ""
                        done
                        
                    ;;
                    Example)
                        local _Examples="$(_t4dDocGetSectionContent "$_Doc" "$_NormalizedSection" | sed 's/^ *//')"
                        echo ""
                        echo "## $_NormalizedSection"
                        echo "<p>"
                        echo ""
                        for _Ex in $(echo $_Examples | grep '^*' | sed 's| |@|g'); do
                            local _Command="$(echo "$_Ex" | sed 's|@| |g' | cut -d '=' -f1)"
                            local _Doc="$(echo $_Ex | sed 's|@| |g' | cut -d '=' -f2)"
                            echo "$_Command"
                            echo ""
                            echo "> $_Doc"
                            echo ""
                            echo ""
                        done
                        echo "</p>"
                        echo ""
                    ;;
                    # "Commands")
                    #     # _t4dPromptSquare "$_NormalizedSection" "$plblue"
                    #     # echo "Generated Automatically"
                    # ;;
                    # "Options")
                    #     # _t4dPromptSquare "$_NormalizedSection" "$plblue"
                    #     # for _Option in $(_t4dDocGetOptionsList $_Doc); do
                    #     #     local _OptionName=$(echo $_Option | cut -d '|' -f1 | sed 's|-||g')
                    #     #     local _OptionDoc="$($(_t4dDocGetSectionContent "$_Doc" "Name") help $_Option -no-shell  2> /dev/null)"
                    #     #     local _Synopsis="$(_t4dDocGetSectionContent "${_OptionDoc:-None}" Synopsis 2> /dev/null | sed 's|       ||g')"
                    #     #     _t4dPromptInfo "       ${_Option}" "${_Synopsis:-Documentation Unavailable}" 21 '-'
                    #     # done
                    # ;;
                    # "Additionnal Options")
                    #     # _t4dPromptSquare "$_NormalizedSection" "$plcyan"
                    #     # local _DependencyDoc="$(_t4dDocGetHeader -function "$(_t4dDocGetSectionContent "$_Doc" "Additionnal Options" | sed 's| ||g')")"
                    #     # local _AvailableOptions="$(_t4dDocGetSectionContent "$_DependencyDoc" "Available Options" )"
                    #     # echo $_AvailableOptions
                    # ;;
                    # # "Name"|"Usage"|"Author(s)"|"Supported Platform"|"Description"|"QA Examples")

                    # # ;;
                    "Prefix"|"Template"|"Note"|"Supported Platform"|"See Also"|"Error Code"|"Keyword"|"Author(s)"|"Licenses"|"Useful Alias")
                        DO_NOTHING=0
                    ;;
                    # Documentation)
                    #     echo ""
                    #     echo "## $_NormalizedSection"
                    #     _t4dDebugLog $plog "Section -> $_NormalizedSection"
                    #     _t4dDebugLog $plog "DOC -> $_Doc)"
                    #     _t4dDebugLog $plog "DOC -> $(_t4dDocGetSectionContent "$_Doc" "$_NormalizedSection")"
                    #     echo "$(_t4dDocGetSectionContent "$_Doc" "$_NormalizedSection" | sed 's/^ *//')"
                    #     echo ""
                    # ;;
                    *)
                        echo ""
                        echo "## $_NormalizedSection"
                        echo "$(_t4dDocGetSectionContent "$_Doc" "$_NormalizedSection" | sed 's|<code>|```|g' | sed 's|</code>|```|g' | sed 's/^ *//')"
                        echo ""
                    ;;
                esac
            done
        ;;
        *)
            _t4dDebugLog $perror "_t4dDocConvertContentInto Unknown Option $1"
            return 206
        ;;
    esac



    

###############################
_t4dDebugInfoEnd "_t4dDocGenerateDocumentationInto" "$@"
}

_t4dGetModuleModeFromFunction(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dGetModuleModeFromFunction
#   - Name:
#       _t4dGetModuleModeFromFunction
###
#   - Synopsis:
#       return module mode var content from module function name
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1

    local _FunctionName=$1

    #extract 3 chars after _t4dMod from function name
    local _ModuleName="$(echo "$_FunctionName" | sed 's/_t4dMod\(.\{3\}\).*/\1/g')"

    #module mode var name must be T4D_<MODULENAME>_MODE
    local _ModuleModeVar="T4D_$(echo "${_ModuleName}" | tr '[:lower:]' '[:upper:]')_MODE"

    _t4dVarGetValue $_ModuleModeVar

###############################
}


source $Tools4Dev_PATH/Engine/Make/test.env
source $Tools4Dev_PATH/Engine/Make/completion.env
_t4dMakeCompletion(){
    for _Module in $(ls $Tools4Dev_PATH/Modules); do
        if [[ -e "$Tools4Dev_PATH/Modules/$_Module/.ressources" ]]; then
            rm -rf "$Tools4Dev_PATH/Modules/$_Module/.ressources"
        fi
        mkdir -p "$Tools4Dev_PATH/Modules/$_Module/.ressources/completions"
        
        local _CompletionRootFolder="$Tools4Dev_PATH/Modules/$_Module/.ressources/completions"
        if [[ -e "$Tools4Dev_PATH/Modules/$_Module/_main_.env" ]] || [[ -e "$Tools4Dev_PATH/Modules/$_Module/_main_.external.env" ]]; then
            _t4dDebugLog "$pinfo" "$_Module"
            local _Options="$(_t4dDocGetOptionsListV4 "$(_t4dDocGetFunctionContent "$_Module")")"
            if [[ "$_Options" != "" ]]; then
                echo "$_Options" > "$_CompletionRootFolder/$_Module"
                for _Option in $(echo $_Options); do
                    local _OptionFunction="$(_t4dDocGetOptionsHiddenCall "$(_t4dDocGetFunctionContent "$_Module")" $_Option)"
                    local _SubOptions="$(_t4dDocGetOptionsListV4 "$(_t4dDocGetFunctionContent "$_OptionFunction")")"
                    if [[ "$_SubOptions" != "" ]]; then
                        mkdir -p "$_CompletionRootFolder/$_Module-module"
                        echo "$_SubOptions" > "$_CompletionRootFolder/$_Module-module/$_Option"
                    fi
                done
            fi
        fi
    done
}

_t4dMakeGeneratorTemplates(){
    local _AdvancedTemplateFile="$Tools4Dev_PATH/Templates/function-advanced.env"
    chf -title _t4dUtilsFindCharlie \
        -synopsis "Function to find charlie in terminal" \
        -errorCode "22" \
        -menu classic \
        -doc Definition  \
        -doc Available_Options \
        -doc Example > $_AdvancedTemplateFile


}

_t4dMakeGeneratorExample(){
    case $1 in
        yaml)
            
            _t4dSrcYamlOpenFile $T4D_EXAMPLE_PATH/yaml/advanced.yml $T4D_EXAMPLE_PATH/yaml/advanced.yml.in  1> /dev/null
            _t4dCheckSucceeded "advanced.yml.in Created"

            local _SimpleFile="$T4D_EXAMPLE_PATH/yaml/simple.yml"
            _t4dSrcYamlOpenFile $_SimpleFile  ${_SimpleFile}.in.tmp 1> /dev/null
            _t4dCheckSucceeded "simple.yml.in.tmp Created"

            if [[ -e ${_SimpleFile}.in ]]; then
                _t4dDebugLog $plog "Cleaning ${_SimpleFile}.in"
                rm ${_SimpleFile}.in
            fi

            for _Line in $(cat $T4D_EXAMPLE_PATH/yaml/simple.yml.in.tmp); do
                local _Path="$(_t4dPromptVarWithSpaceAtEnd 50 "$(echo $_Line | cut -d '|' -f1)")"
                local _Data="$(_t4dPromptVarWithSpaceAtEnd 15 "$(echo $_Line | cut -d '|' -f2)")"
                local _Key="$(_t4dPromptVarWithSpaceAtEnd 8 "$(echo $_Line | cut -d '|' -f3)")"
                local _Type="$(_t4dPromptVarWithSpaceAtEnd 8 "$(echo $_Line | cut -d '|' -f4)")"
                local _KeyDelim="$(_t4dPromptVarWithSpaceAtEnd 20 "$(echo $_Line | cut -d '|' -f5)")"
                _t4dDebugLog $plog ">$_Data<"
                echo "${_Path}|$_Data|$_Key|$_Type|$_KeyDelim" | sed 's|%||g' >> $T4D_EXAMPLE_PATH/yaml/simple.yml.in
            done
            _t4dCheckSucceeded "simple.yml.in Created"


            if [[ -e ${_SimpleFile}.in.tmp ]]; then
                _t4dDebugLog $plog "Cleaning ${_SimpleFile}.in.tmp"
                rm ${_SimpleFile}.in.tmp
            fi
        ;;
    esac
}

_t4dMakeIndex(){
    mkdir -p "$Tools4Dev_PATH/.Ressources/index/"
    local _DefaultPublicFile="$Tools4Dev_PATH/.Ressources/index/public.index"
    local _DefaultPrivateFile="$Tools4Dev_PATH/.Ressources/index/private.index"
    local _TeamPrivateFile="$T4D_TEAM_ROOT/.Ressources/index/private.index"
    local _TeamPublicFile="$T4D_TEAM_ROOT/.Ressources/index/public.index"
    local _PrivateFile _PublicFile

    mkdir -p "$T4D_TEAM_ROOT/.Ressources/index/"
    echo "#INDEX" > "$_TeamPublicFile"
    echo "#INDEX" > "$_TeamPrivateFile"

    if [[ -d "$T4D_TEAM_ROOT/_t4d_/projects" ]]; then
        #add more folders in this loop if necessary
        for _Type in Team/$WS_TEAM/_t4d_/Projects; do
            _t4dDebugLog "$pinfo" "$_Type"
            local _files="$(find $_Type | grep '\.env$')"
            for _File in $(echo $_files); do
                local _Prefix="$(echo $_File | sed 's| ||g' | rev | grep -Eo '\..*' | rev | sed 's|\.$||g')"
                local _Functions="$(grep '(){$' $_File | grep -v "^#" | grep -v '^$' | grep -v " function ")"
                
                if [[ "$_Functions" != "" ]]; then
                    for _Funtion in $(echo $_Functions); do
                        if [[ "$(echo $_Funtion | grep '^_')" != "" ]]; then
                            echo "$_Prefix:$_Funtion" | sed 's|(){||g' >> "$_TeamPrivateFile"
                        else
                            t4dLogVerbose $pvlog "$_Prefix - $_Funtion"
                            echo "$_Prefix:$_Funtion" | sed 's|(){||g' >> "$_TeamPublicFile"
                        fi
                    done
                fi
            done
        done
    fi

    echo "#INDEX" > "$_DefaultPublicFile"
    echo "#INDEX" > "$_DefaultPrivateFile"
    echo "Templates/function-advanced:_t4dUtilsFindCharlie" >> "$_DefaultPrivateFile"

    for _Type in Modules Source Engine; do
        _t4dDebugLog "$pinfo" "$_Type"
        local _files="$(find $_Type | grep '\.env$')"
        for _File in $(echo $_files); do
            local _DirName="$(dirname $_File)"
            local _Prefix="$(echo $_File | sed 's| ||g' | rev | grep -Eo '\..*' | rev | sed 's|\.$||g')"
            local _Functions="$(tail -n+1 $_File | grep '(){$' | grep -v "^#" | grep -v '^$' | grep -v " function ")"

            if [[ -e "${_DirName}/_main_.external.env" ]]; then
                _PrivateFile="$_TeamPrivateFile"
                _PublicFile="$_TeamPublicFile"
            else
                _PrivateFile="$_DefaultPrivateFile"
                _PublicFile="$_DefaultPublicFile"
            fi

            if [[ "$_Functions" != "" ]]; then
                for _Funtion in $(echo $_Functions); do
                    if [[ "$(echo $_Funtion | grep '^_')" != "" ]]; then
                        echo "$_Prefix:$_Funtion" | sed 's|(){||g' >> "$_PrivateFile"
                    else
                        t4dLogVerbose $pvlog "$_Prefix - $_Funtion"
                        echo "$_Prefix:$_Funtion" | sed 's|(){||g' >> "$_PublicFile"
                    fi
                done
            fi
        done
    done

    
}

# _t4dMakeSample -o ci-run _wksCIRun -o build _wksBuild -o configure _wksConfigure
_t4dMakeSample(){
    _t4dUtilsProjectHeader                                                     
    _t4dUtilsProjectMenu $@
    _t4dUtilsProjectHelp
    _t4dUtilsProjectInitLoad gik bb8
    _t4dUtilsProjectEnd
}

_t4dMakeStatistic(){
    local _TotalFiles=0
    local _TotalLines=0
    local _TotalComment=0

    local _Folders="Modules Source Platforms"
    if [[ -e "Team/$WS_TEAM/_t4d_/projects" ]]; then
        _Folders="$_Folders Team/$WS_TEAM/_t4d_/projects"
    fi

    local _PrivatesFunctions="$(cat $Tools4Dev_PATH/.Ressources/index/private.index $T4D_TEAM_ROOT/.Ressources/index/private.index | wc -l | sed 's| *||g')"
    local _TestedPrivatesFunctions="$(find $Tools4Dev_PATH/Tests    | grep 'sh$' \
                                                                    | grep -v 'Default.sh' \
                                                                    | rev | cut -d '/' -f1 \
                                                                    | rev | sed 's|.sh$||g' \
                                                                    | grep '^_' \
                                                                    | wc -l | sed 's| ||g')"
    local _TestedPublicFunctions="$(find $Tools4Dev_PATH/Tests      | grep 'sh$' \
                                                                    | grep -v 'Default.sh' \
                                                                    | rev | cut -d '/' -f1 \
                                                                    | rev | sed 's|.sh$||g' \
                                                                    | grep -v '^_' \
                                                                    | wc -l | sed 's| ||g')"
    local _PublicFunctions="$(cat $Tools4Dev_PATH/.Ressources/index/public.index $T4D_TEAM_ROOT/.Ressources/index/public.index | wc -l | sed 's| *||g')"

    for _Type in $(echo $_Folders); do
        local _Files="$(find $Tools4Dev_PATH/$_Type | grep '\.env$')"
        local _Count="$(echo $_Files | wc -l | sed 's| ||g')"
        for _File in $(echo $_Files); do
            _TotalLines="$(expr $_TotalLines + $(_t4dCountLine $_File) )"
            _TotalComment="$(expr $_TotalComment + $(_t4dCountComment $_File) )"
        done
        _TotalFiles="$(expr $_TotalFiles + $_Count )"
    done
    _t4dDebugLog $pinfo "Public  Functions : $(_t4dPromptVarWithSpace 5 $_PublicFunctions   | sed 's|%||g') [$_TestedPublicFunctions]"
    _t4dDebugLog $pinfo "Private Functions : $(_t4dPromptVarWithSpace 5 $_PrivatesFunctions | sed 's|%||g') [$_TestedPrivatesFunctions]"
    _t4dDebugLog $pinfo "    Files (${piwhite}Count${pstd}) : $_TotalFiles"
    _t4dDebugLog $pinfo "      Code (${piwhite}Line${pstd}) : $_TotalLines"
    _t4dDebugLog $pinfo "   Comment (${piwhite}Line${pstd}) : $_TotalComment"
}

_t4dMakeTest(){
    local CHPWD=1
    local OLD_PWD=$PWD  
    local _quiet="true"
    mkdir -p $Tools4Dev_PATH/Tests/build
    if [[ "$1" == "-v" ]]; then
        _quiet=false
    fi

    rm -rf   $Tools4Dev_PATH/.t4d/Tests
    mkdir -p $Tools4Dev_PATH/.t4d/Tests

    for _file in $(find $Tools4Dev_PATH/Tests/src | grep '\.sh$'); do
        local _Name="$(basename $_file | sed 's|.sh$||g')"
        local _ClassName="$(_t4dTestGetClassName $_file)"
        local _Cases="${plyellow}[$(find $Tools4Dev_PATH/Tests/data/$_ClassName | grep "$_Name" | grep 'Case[0-9]*' | wc -l | sed 's| *||g')]${pstd}"
        _t4dDebugLog $plog "$_Cases $_Name "
        if [[ "$_quiet" == "true" ]]; then
            $_file > "$Tools4Dev_PATH/.t4d/Tests/$_Name.log"
        else
            $_file
        fi
        
    done
}

_t4dMakeDocUnderConstruction(){
    echo "<p align=\"center\">"
    echo "<img src=\"https://github.com/T4D-Suites/T4D-Ressources/blob/master/PageUnderConstruction.png\" width=\"512\">"
    echo "</p>"
}

_t4dMakeDoc(){
    local CHPWD=1
    local OLD_PWD=$PWD
    local _ReadmeFile="$Tools4Dev_PATH/README.md"
    local _MODULE_ROOT="$Tools4Dev_PATH/.Ressources/docs/MarkDown/Modules"
    
    rm -rf   ${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Projects
    rm -rf   ${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Modules
    rm -rf   ${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Utils
    rm -rf   ${Tools4Dev_PATH}/.Ressources/docs/MarkDown/ExternalTools
    rm -rf   ${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Samples
    rm -rf   ${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Install
    rm -rf   ${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Platforms

    mkdir -p ${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Projects
    mkdir -p ${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Modules
    mkdir -p ${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Utils
    mkdir -p ${Tools4Dev_PATH}/.Ressources/docs/MarkDown/ExternalTools
    mkdir -p ${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Samples
    mkdir -p ${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Platforms

    local _Platforms="$(ls $T4D_PLATFORM_PATH | sed 's|.env$||g' | grep -v '_main_' | grep -v '.sh$')"
    local _Modules="$(ls $T4D_MODULES_PATH | sed 's|.env$||g' | grep -v '_main_')"
    local _Engine="$(ls $T4D_UTILS_PATH | sed 's|.env$||g' | grep -v '_main_')"
    local _DocWarning=0
    # mkdir -p ${Tools4Dev_PATH}/.Ressources/completions

    ## COMPLETION FILES UPDATE
    # for _Module in $(ls $Tools4Dev_PATH/Modules); do
    #     if [[ -e "$Tools4Dev_PATH/Modules/$_Module/_main_.env" ]]; then
    #         local _UpperModuleName="$(echo $_Module | tr '[:lower:]' '[:upper:]')"
    #         _t4dMakeDefaultMarkdownHeader "$_MODULE_ROOT/$_Module.md" "../../../.." "Logo$_UpperModuleName"
    #         _t4dDocConvertContentInto -markdown -function $_Module >> "$_MODULE_ROOT/$_Module.md"
    #     elif [[ -e "$Tools4Dev_PATH/Modules/$_Module/_main_.disabled.env" ]]; then
    #         _t4dDebugLog $pwarning "DISABLED $_Module"
    #     else
    #         _t4dDebugLog $perror "Module $_Module : can't find any _main_.env or _main_.disabled.env file"
    #     fi
    # done
    cat $WS_ROOT/README.md | grep -B 1000 "## Table of contents" > README.tmp

    echo "" >> README.tmp
    echo " * [Preface](.Ressources/docs/MarkDown/Preface.md)" >> README.tmp
    echo " * [Introduction](.Ressources/docs/MarkDown/Introduction.md)" >> README.tmp
        _t4dMakeDocUnderConstruction > .Ressources/docs/MarkDown/Introduction.md
    echo " * [Install](.Ressources/docs/MarkDown/Platforms/INSTALL.md)" >> README.tmp
        _t4dDocConvertContentInto -markdown -file $T4D_PLATFORM_PATH/install.sh > .Ressources/docs/MarkDown/Platforms/INSTALL.md
        
        for _Platform in $(echo $_Platforms); do
            echo "   * [$_Platform](.Ressources/docs/MarkDown/Platforms/${_Platform}.md)" >> README.tmp
            _t4dMakeDefaultMarkdownHeader "${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Platforms/${_Platform}.md" "../../../.." LogoT4D
            echo ""                                                                                         >>  "${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Platforms/${_Platform}.md"
            echo " **Welcome to Tools4Dev !**"                                                              >>  "${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Platforms/${_Platform}.md"
            echo ""                                                                                         >>  "${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Platforms/${_Platform}.md"
            echo " Tools4Dev is a Command Line Tools that will help you to dynamicaly define "              >>  "${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Platforms/${_Platform}.md"
            echo " a custom development process and deploy it all among your team. "                        >>  "${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Platforms/${_Platform}.md"
            echo ""                                                                                         >>  "${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Platforms/${_Platform}.md"
            echo ""                                                                                         >>  "${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Platforms/${_Platform}.md"
            _t4dDocConvertContentInto -markdown -file ${T4D_PLATFORM_PATH}/${_Platform}.env                 >>  "${Tools4Dev_PATH}/.Ressources/docs/MarkDown/Platforms/${_Platform}.md"

        done

    ## MANUAL USER STORIES
    echo " * [UserStories]()" >> README.tmp
    echo "   * [Projects]()" >> README.tmp
    echo "     * [How To Add A New Project - Singleton](.Ressources/docs/MarkDown/Stories/HowTo-AddNewProject-Singleton.md)" >> README.tmp
    echo "     * [How To Add A New Project - Composite  - Page Under Construction](.Ressources/docs/MarkDown/Stories/HowTo-AddNewProject-Composite.md)" >> README.tmp
    echo "     * [How To Add Add To Jenkins CI - Singleton](.Ressources/docs/MarkDown/Stories/HowTo-AddToJenkinsCI-Singleton.md)" >> README.tmp
    echo "     * [How To Add Add To Jenkins CI - Composite](.Ressources/docs/MarkDown/Stories/HowTo-AddToJenkinsCI-Composite.md)" >> README.tmp
    echo "     * [How To ...](.Ressources/docs/MarkDown/PageUnderConstruction.md)" >> README.tmp
    echo "   * [Modules]()" >> README.tmp
    echo "     * [How To Add A New Module  - Page Under Construction](.Ressources/docs/MarkDown/PageUnderConstruction.md)" >> README.tmp
    echo "   * [How To Contribute]()" >> README.tmp
    echo "     * [How To Add A New Function - Page Under Construction](.Ressources/docs/MarkDown/PageUnderConstruction.md)" >> README.tmp
    echo "     * [How To Create Documentation  - Page Under Construction](.Ressources/docs/MarkDown/PageUnderConstruction.md)" >> README.tmp
    echo "     * [How To Organize Log In You Function  - Page Under Construction](.Ressources/docs/MarkDown/PageUnderConstruction.md)" >> README.tmp
    echo "     * [How To Debug With Efficiency  - Page Under Construction](.Ressources/docs/MarkDown/PageUnderConstruction.md)" >> README.tmp


    echo " * [Modules]()" >> README.tmp
    _t4dDebugLog $pinfo "Modules"
    for _Module in $(echo $_Modules); do
        if [[ -e "$Tools4Dev_PATH/Modules/$_Module/_main_.env" ]] && [[ ! -e "$Tools4Dev_PATH/Modules/$_Module/.git" ]] ; then
            echo "   * [$_Module](.Ressources/docs/MarkDown/Modules/${_Module}.md)" >> README.tmp
            local _UpperModuleName="$(echo $_Module | tr '[:lower:]' '[:upper:]')"
            _t4dMakeDefaultMarkdownHeader "$_MODULE_ROOT/$_Module.md" "../../../.." "Logo$_UpperModuleName"
            echo "" >> "$_MODULE_ROOT/$_Module.md"

            _t4dDocConvertContentInto -markdown -function $_Module >> "$_MODULE_ROOT/$_Module.md"
            
            _t4dCheckSucceeded "$_Module"
        elif [[ -e "$Tools4Dev_PATH/Modules/$_Module/_main_.disabled.env" ]]; then
            _t4dCheckInfo "${pstd} ->  $_Module ${plyellow}[DISABLED]${pstd}"
        elif [[ -e "$Tools4Dev_PATH/Modules/$_Module/_main_.external.env" ]]; then
            _t4dCheckInfo "${pstd} ->  $_Module ${plpurple}[SKIPPED]${pstd}"
        else
            _t4dDebugLog $perror "Module $_Module : can't find any _main_.env or _main_.disabled.env file"
        fi
    done

    echo " * [External Tools](https://github.com/T4D-Suites/Tools4Jenkins)"         >> README.tmp
    echo "   * [Jenkins-CLI](https://github.com/T4D-Suites/Tools4Jenkins)"          >> README.tmp
    echo "   * [⌐configT4J-Sample](https://github.com/T4D-Suites/configT4J-Sample)" >> README.tmp
    echo "   * [⌙libT4J-Sample](https://github.com/T4D-Suites/libT4J-Sample)"       >> README.tmp
    echo " * [Samples](https://github.com/T4D-Suites/T4D-Sample-CMake)"             >> README.tmp
    echo "   * [Composite-NotAvailableYet]()"                                       >> README.tmp
    echo "   * [Singleton](https://github.com/T4D-Suites/T4D-Sample-CMake)"         >> README.tmp

    echo " * [Engine]()" >> README.tmp
    _t4dDebugLog $pinfo "Engine"
    for _Utils in $(echo $_Engine); do
        echo "   * [$_Utils](.Ressources/docs/MarkDown/Utils/${_Utils}.md)" >> README.tmp
        echo "" > "$WS_ROOT/.Ressources/docs/MarkDown/Utils/${_Utils}.md"
        local _SubSections="$(ls $T4D_UTILS_PATH/$_Utils | grep -v '_main_' | grep -v '\-utils.env' | sed 's|.env$||g' )"
        _t4dCheckInfo "$_Utils"
        for _SubSection in $(echo $_SubSections); do
            echo "     * [$_SubSection](.Ressources/docs/MarkDown/Utils/${_Utils}-${_SubSection}.md)" >> README.tmp
            echo "### $_SubSection" >> "$WS_ROOT/.Ressources/docs/MarkDown/Utils/${_Utils}.md"
            _t4dCheckSucceeded "$_SubSection"
            local _Public="$(_t4dDocGetFunctionsList "$T4D_UTILS_PATH/$_Utils/${_SubSection}.env")"
            local _Private="$(_t4dDocGetFunctionsList "$T4D_UTILS_PATH/$_Utils/${_SubSection}.env" -private)"
            # 
            _t4dMakeDefaultMarkdownHeader "$WS_ROOT/.Ressources/docs/MarkDown/Utils/${_Utils}-${_SubSection}.md" "../../../.." LogoT4D
            echo "" >> "$WS_ROOT/.Ressources/docs/MarkDown/Utils/${_Utils}-${_SubSection}.md"
            for _Function in $(echo $_Public $_Private); do
                local _Doc="$(_t4dDocGetHeader -function ${_Function} 2> /dev/null)"
                local _Synopsis="$(_t4dDocGetSectionContent "$_Doc" "Synopsis" 2> /dev/null)"
                # _t4dDebugLog "$plog" "$_Function"
                # -header $_Doc
                if [[ "$(echo $_Synopsis | grep 'Documentation Unavailable')" == "" ]]; then
                    #  _t4dDebugLog "$plog" "$_Function"
                    echo "# $_Function"                                                                 >> "$WS_ROOT/.Ressources/docs/MarkDown/Utils/${_Utils}-${_SubSection}.md"
                    _t4dDocConvertContentInto -markdown -header "$(echo $_Doc | grep -v '#   - Name:')" >> "$WS_ROOT/.Ressources/docs/MarkDown/Utils/${_Utils}-${_SubSection}.md"
                    echo ""                                                                             >> "$WS_ROOT/.Ressources/docs/MarkDown/Utils/${_Utils}-${_SubSection}.md"
                    echo ""                                                                             >> "$WS_ROOT/.Ressources/docs/MarkDown/Utils/${_Utils}-${_SubSection}.md"

                    echo "* [$_Function](${_Utils}-${_SubSection}.md#$_Function)"   >> "$WS_ROOT/.Ressources/docs/MarkDown/Utils/${_Utils}.md"
                    echo "$_Synopsis" | sed 's|^ *||g' | sed 's|^|    |g'           >> "$WS_ROOT/.Ressources/docs/MarkDown/Utils/${_Utils}.md"
                    echo ""                                                         >> "$WS_ROOT/.Ressources/docs/MarkDown/Utils/${_Utils}.md"
                else
                    _t4dDebugLog $pwarning "$_Function Documentation Unavailable"
                    _DocWarning="$(expr $_DocWarning + 1)"
                fi
            done
            
            echo "" >> "$WS_ROOT/.Ressources/docs/MarkDown/Utils/${_Utils}.md"
        done
    done
    if [[ "$_DocWarning" != "0" ]]; then
         _t4dDebugLog $pwarning "Doc Warnings : $_DocWarning"
    fi
    echo " * [See Changelog](CHANGELOG.md)" >> README.tmp
    echo ""
    

    #CHECK OPTIONS DOC
    # local _Options="$(grep -R '#   - Options:' $Tools4Dev_PATH/Modules | cut -d ':' -f1 | uniq)"
    # for _Opt in $(echo $_Options); do
    #     if [[ "$(tail -n+1 $_Opt | grep -A2 '#   - Options:' | tr -d '\n')" != "#   - Options:####" ]]; then
    #         _t4dDebugLog $pwarning "$_Opt HEADER BLOC -> Options Section has to be empty, Please see $Tools4Dev_PATH/Templaces/functions HEADER for more rules infos"
    #     fi
    # done
    mv README.tmp $Tools4Dev_PATH/README.md
    cd $OLD_PWD
    
    
}

_t4dMakeMan(){
    echo ".\\\" Manpage for wkg" > toto
    echo ".TH man wkg '05 Jul 2018' 1.0 'wkg man page'" >> toto
    for _Section in $(_t4dDocReturnModuleDocSections $1); do
        echo ".SH $(echo $_Section | sed 's|+| |g' )" >> toto
        echo ".RS" >> toto
        echo "$(_t4dDocReturnModuleDocSectionBloc $1 $(echo $_Section | sed 's|+| |g' ) | sed 's|^    ||g')" >> toto
        echo ".RE" >> toto
    done
}

_t4dMakeDefaultMarkdownHeader(){
local _File="$1"
local _AbsoluteRootPath="$2"
local _IMG="${3:-Logo}"

cat > $_File << EOF
[<<< Back To Readme](${_AbsoluteRootPath}/README.md)
<p align="center">
    <img src="https://github.com/T4D-Suites/T4D-Ressources/blob/master/${_IMG}.png">
</p>
EOF
}


_t4dMakeDefaultMarkdownFooter(){
local _File="$1"

cat >> $_File << EOF
<center> <h1>**Enjoy T4D and help us improve it. :)**</h1> </center>
EOF
}


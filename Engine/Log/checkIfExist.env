
_t4dCheckFile(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dCheckFile
#   - Name:
#       _t4dCheckFile
###
#   - Synopsis:
#       check if file exist then return normalized output
###
#   - Definition:
#       if file exist will execute _t4dCheckSucceeded & return 0
#       if file does not exist will execute _t4dCheckFailed & return 1
###
#   - Example:
#       * _t4dCheckFile $WS_ROOT/project.env              = check if file project.env exist in $WS_ROOT
#       
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    if [[ -e $1 ]]; then
        _t4dCheckSucceeded "File $1 found"
    else
        _t4dCheckFailed "File $1 not found"
        return 1
    fi

###############################
}

_t4dCheckFunction(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dCheckFunction
#   - Name:
#       _t4dCheckFunction
###
#   - Synopsis:
#       check if sended argument is an actual defined shell function
###
#   - Definition:
#       if type contains "shell function" will return 0
#       if not, return 1
#
#       This function will allways return empty result. It can only be used by parsing $? 
###
#   - Example:
#       * _t4dCheckFunction wks              = return 0
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    type $1 | grep -q 'shell function'

###############################
}

_t4dCheckFolder(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dCheckFolder
#   - Name:
#       _t4dCheckFolder
###
#   - Synopsis:
#       check if current folder exist then return normalized output
###
#   - Definition:
#
#       If sended argument is an actual folder and exist, will execute _t4dCheckSucceeded then return 0
#       If sended argument is not a folder OR does not exist OR could not be found, will execute _t4dCheckFailed then return 1
#
###
#   - Example:
#       * _t4dCheckFolder $WS_ROOT              = check if $WS_ROOT folder exist
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    if [[ -d $1 ]]; then
        _t4dCheckSucceeded "Folder found $1"
    else
        _t4dCheckFailed "Folder $1 not found"
        return 1
    fi

###############################
}

_t4dCheckFolderIsNotEmpty(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dCheckFolderIsNotEmpty
#   - Name:
#       _t4dCheckFolderIsNotEmpty
###
#   - Synopsis:
#       if sended folder exist, send normalized output depending on his content
###
#   - Definition:
#
#       If folder exist, ls his content including hidden files. send normalized output depending on his content:
#           1. Folder exist and not empty           - execute _t4dCheckSucceeded and return 0
#           2. Folder exist and seems to be empty   - execute _t4dCheckWarning and return 0
#           3. Folder does not exist                - execute _t4dCheckFailed and return 1
#
###
#   - Example:
#       * _t4dCheckFolderIsNotEmpty $WS_ROOT            = check if WS_ROOT is not empty
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    if [[ -d $1 ]]; then
        if [[ "$(ls -A $1)" != "" ]]; then
            _t4dCheckSucceeded "Content found in $1"
        else
            _t4dCheckWarning "Folder exist but it's empty"
        fi
    else
        _t4dCheckFailed "Folder $1 not found"
        return 1
    fi

###############################
}

_t4dCheckSymLink(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dCheckSymLink
#   - Name:
#       _t4dCheckSymLink
###
#   - Synopsis:
#       read current symlink target and check if folder/file exist
###
#   - Definition:
#       Read sended argument, then check if folder or file exist. Send normalize output depending on the result 
#           1. If simlink is good and folder or file exist, execute _t4dCheckSucceeded then return 0
#           2. If simlink is empty and sended argument seems to be an existing file/folder, execute _t4dCheckWarning and return 0
#           3. All other result (simlink empty and or folder/file not existing) execute _t4dCheckFailed and return 1 
#
###
#   - Example:
#       * _t4dCheckSymLink $WS_ROOT/Users           = Check if Users folder is currently a good symlink and his target exist
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _symlink="$1"
    local _result="$(readlink $_symlink)"
    if [[ -d $_result ]] ||  [[ -e "$_result" ]]; then
        _t4dCheckSucceeded "Symlink $1 is set : $_result "
    elif [[ "$_result" == "" ]]; then
        if [[ -d $_symlink ]] ||  [[ -e "$_symlink" ]]; then
            _t4dCheckWarning "$1 seems to not be a symlink"
        else
            _t4dCheckFailed "Symlink $1 is not set"
            return 1
        fi
    else
        _t4dCheckFailed "Symlink $1 is not set"
        return 1
    fi

###############################
}

_t4dCheckEnv(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dCheckEnv
#   - Name:
#       _t4dCheckEnv
###
#   - Synopsis:
#       Check variable's values
###
#   - Definition:
#       Compare Variable sent in arg1 with value send in arg2. 
#       {Text}
#       Sending normalized output depending on result
#           1. If arg2 is empty and var's data is not empty - execute _t4dCheckSucceeded then return 0
#           2. If var's data match with arg2 - execute _t4dCheckSucceeded then return 0
#           3. If var's doesn't match value but is not empty - execute _t4dCheckWarning then return 0
#           4. If var's data is empty - execute _t4dCheckFailed and return 1
#
###
#   - Example:
#       * _t4dCheckEnv HOME $HOME            = check if HOME and verify that is content is $HOME
#       * _t4dCheckEnv HOME                  = check if HOME is set and not empty
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _Name="$1"
    local _Value="$2"
    local _Data="$(eval "echo \$$_Name")"
    if [[ "$_Data" == "$_Value" ]]; then
        _t4dCheckSucceeded "$_Name is set : $pcyan$(eval "echo \$$_Name")$pstd "
    else
        if [[ "$2" == "" ]] && [[ "$_Data" != "" ]]; then
            _t4dCheckSucceeded "$_Name is set : $pcyan$(eval "echo \$$_Name")$pstd "
        elif [[ "$_Data" != "" ]]; then
            _t4dCheckWarning "Env $_Name is set but not using default value : $(eval "echo \$$_Name")"
        else
            _t4dCheckFailed "Env $_Name is not set"
            return 1
        fi
    fi

###############################
}

_t4dCheckVersion(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dCheckVersion
#   - Name:
#       _t4dCheckVersion
###
#   - Synopsis:
#       check Tools4Dev version with sended and send normalized output
###
#   - Definition:
#       Check tools4dev version and return normalized output depending on result
#       Please see _t4dCheckBinaryVersion documentation to see exact output
#
###
#   - Example:
#       * _t4dCheckVersion 5.0.0              = Check Tools4Dev version to verify that current t4d version is up-to-date
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    _t4dCheckBinaryVersion "Tools4Dev" "$(t4dGetVersion)" $1

###############################
}

_t4dCheckPackage(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dCheckPackage
#   - Name:
#       _t4dCheckPackage
###
#   - Synopsis:
#       Check for package installed on fedora only
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    _t4dDebugLog "$warning" "This function is deprecated"
    local _dnfList="$(dnf list installed | cut -d ' ' -f1 | sed 's|.i686||g' | sed 's|.x86_64||g' | sed 's|.noarch||g')"
    local _Package="$1"
    if [[ "$(echo $_dnfList | grep "${_Package}\$" )" != "" ]]; then
        _t4dCheckSucceeded "Package $1 is installed"
    else
        _t4dCheckFailed "Package $1 is not installed"
        return 1
    fi

###############################
}


_t4dCheckBinary(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dCheckBinary
#   - Name:
#       _t4dCheckBinary
###
#   - Synopsis:
#       DEPRECATED - see _t4dCheckCommand
###
#   - Definition:
#       Use `which` to check if sended arg is an actual binary present in PATH or if path-to-bin is correct
#       
#       Sending normalized output depending on result
#           1. If result is not empty - execute _t4dCheckSucceeded then return 0
#           2. If result is empty - execute _t4dCheckFailed then return 1
#
###
#   - Example:
#       * _t4dCheckBinary git              = Check if git is a binary and his dirname present in PATH
#       * _t4dCheckBinary /usr/bin/git     = Check if /usr/bin/git is valid
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    _t4dDebugLog "$warning" "This function is deprecated - please use _t4dCheckCommand"
    if [[ -e "$(which $1 2>& /dev/null)" ]]; then
        _t4dCheckSucceeded "Command $1 found in $pyellow$(which $1)$pstd"
    else
        _t4dCheckFailed "Command $1 not found"
        return 1
    fi

###############################
}

_t4dCheckCommand(){
    # Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dCheckCommand
#   - Name:
#       _t4dCheckCommand
###
#   - Synopsis:
#       check if command exist
###
#   - Definition:
#       Use `which` to check if sended arg is an actual binary present in PATH or if path-to-bin is correct
#       
#       Sending normalized output depending on result
#           1. If result is not empty - execute _t4dCheckSucceeded then return 0
#           2. If result is empty - execute _t4dCheckFailed then return 1
#
###
#   - Example:
#       * _t4dCheckCommand git              = Check if git is a binary and his dirname present in PATH
#       * _t4dCheckCommand /usr/bin/git     = Check if /usr/bin/git is valid
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########

    if [[ "$(command -v $1 2>& /dev/null)" != "" ]]; then
        _t4dCheckSucceeded "Command $1 found : $pyellow$(command -v $1)$pstd"
    else
        _t4dCheckFailed "Command $1 not found"
        return 1
    fi
###############################
}

_t4dCheckBinaryVersion(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _t4dCheckBinaryVersion
#   - Name:
#       _t4dCheckBinaryVersion
###
#   - Synopsis:
#       Utilitary that compare binary version and send normalized output
###
#   - Definition:
#       First argument is pure syntax, it's what user will see
#
#
#       It will send normalized output depending on version's diff
#           1. Major ( BinaryParsedVersion <  Version) - execute _t4dCheckFailed then return 1
#           2. Major ( BinaryParsedVersion >  Version) - execute _t4dCheckInfo then return 0
#           3. Minor ( BinaryParsedVersion >  Version) - execute _t4dCheckSucceeded then return 0
#           4. Minor ( BinaryParsedVersion <  Version) - execute _t4dCheckWarning then return 2
#           5. Patch ( BinaryParsedVersion >  Version) - execute _t4dCheckSucceeded then return 0
#           6. Patch ( BinaryParsedVersion <  Version) - execute _t4dCheckWarning then return 3
#
###
#   Usage :
#       _t4dCheckBinaryVersion <Name> <BinaryParsedVersion> <Version>
#
###
#   - Example:
#       * _t4dCheckBinaryVersion clang "$(clang -v 2>&1 | grep clang | cut -d ' ' -f4)" "9.0.0"         = Check if clang version is newer than 9.0.0
#       * _t4dCheckBinaryVersion git "$(git --version 2>&1 | cut -d ' ' -f3)" "2.0.0"                   = Check if git version is newer than 2.0.0
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    _name="$1"
    _version="$2"
    _deps="$3"
    if [[ "$(command -v $1 2> /dev/null)" == "" ]] && [[ "$1" != "Tools4Dev" ]] && [[ "$1" != "System" ]]; then
        _t4dCheckFailed "Command $1 not found"
    else
        if [[ "$_version" == "$_deps" ]]; then
            _t4dCheckSucceeded "$_name is up-to-date : $_version"
        else
            _t4dmajor="$(echo $_version | cut -d '.' -f1)"
            _t4dminor="$(echo $_version | cut -d '.' -f2)"
            _t4dhotfix="$(echo $_version | cut -d '.' -f3)"
            _major="$(echo $_deps | cut -d '.' -f1)"
            _minor="$(echo $_deps | cut -d '.' -f2)"
            _hotfix="$(echo $_deps | cut -d '.' -f3)"
            _result="up-to-date"
            [[ $_t4dhotfix -gt $_hotfix ]] && _result="hotfixGt"
            [[ $_t4dhotfix -lt $_hotfix ]] && _result="hotfixLt"
            [[ $_t4dminor -gt $_minor ]] && _result="minorGt"
            [[ $_t4dminor -lt $_minor ]] && _result="minorLt"
            [[ $_t4dmajor -gt $_major ]] && _result="majorGt"
            [[ $_t4dmajor -lt $_major ]] && _result="majorLt"
            case $_result in
                majorLt)
                    _t4dCheckFailed "$_name is outdated : $_version (minimal $_deps)" 
                    return 1
                ;;
                majorGt)
                    _t4dCheckInfo "$_name is ahead : $_version (minimal $_deps)"
                ;;
                minorGt)
                    _t4dCheckSucceeded "$_name is ahead : $_version (minimal $_deps)"
                ;;
                minorLt)
                    _t4dCheckWarning "$_name is outdated : $_version (minimal $_deps)"
                    return 2
                ;;
                hotfixGt)
                    _t4dCheckSucceeded "$_name is ahead : $_version (minimal $_deps)"
                ;;
                hotfixLt)
                    _t4dCheckWarning "$_name is outdated : $_version (minimal $_deps)"
                    return 3
                ;;
                *)
                    echo "Can't get $1 Version"
                ;;
            esac
        fi
    fi

###############################
}

_t4dCheckOSXApp(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _t4dCheckOSXApp
#   - Name:
#       _t4dCheckOSXApp
###
#   - Synopsis:
#       check for OSX app installed
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    if [[ -e "${2:-/Applications}/$1.app" ]]; then
        _t4dCheckSucceeded "App $1 is already installed"
    else
        _t4dCheckFailed "Can't find $1.app in folder ${2:-'/Applications'}" && return 1
    fi

###############################
}

_t4dCheckFailed(){
##### _t4dCheckFailed
#
#       Definition :
#           Output prompt from colored check Failed
##### DOCUMENTATION BLOC #####
    _t4dDebugLog "   ${plred}✖${pstd}   -> " "$1"
}

_t4dCheckSucceeded(){
##### _t4dCheckSucceeded
#
#       Definition :
#           Output prompt from colored check Succeded
##### DOCUMENTATION BLOC #####
    _t4dDebugLog "   ${plgreen}✔${pstd}   -> " "$1"
}

_t4dCheckWarning(){
##### _t4dCheckWarning
#
#       Definition :
#           Output prompt from colored Warning
##### DOCUMENTATION BLOC #####
    _t4dDebugLog "   ${plyellow}✔ ?${pstd} -> " "$1"
}

_t4dCheckInfo(){
 ##### _t4dCheckInfo
#
#       Definition :
#           Output prompt from colored info
#
#       Usage :
#           _t4dCheckInfo <Info>
##### DOCUMENTATION BLOC #####  
    _t4dDebugLog "   ${plpurple}!! $1${pstd}"
}



source $Tools4Dev_PATH/Engine/G4d/_main_.env
source $Tools4Dev_PATH/Engine/Documentation/_main_.env
source $Tools4Dev_PATH/Engine/Make/_main_.env
source $Tools4Dev_PATH/Engine/Log/_main_.env


chf(){
# Generated From $Tools4Dev_PATH/utils/templates-project.env
# v1.5.0
###### chf
#   - Name:
#       chf
###
#   - Synopsis:
#       Function Generator using Templates
###
#   - Available Options:
#       * -menu | -m      <loop|classic>
#           add a menu to your function
#       * -errorCode | -e <Integer> 
#           add error code value
#       * -title | -t     <Name>  
#           edit title function    
#       * -synopsis | -s  <Synopsis>  
#           add synopsis   
#       * -doc | -d <SectionName>  
#           Options | Available_Options | Usage | Example | Definition 
###
#   - Example:
#       * chf -title _t4dUtilsFindCharlie -synopsis "Function to find charlie in terminal" -errorCode "22" -menu classic
#       * chf -title _t4dUtilsFindCharlie -synopsis "Function to find charlie in terminal" -errorCode "22" -menu classic -doc Definition  -doc Options -doc Example
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=401
    # local _something=<internalVariable>
    # local _Something=<Parameters>
    local _Synopsis="null"
    local _Title="null"
    local _ErrorCode="1"
    local _Menu="none"
    local _Log="false"
    local _Doc=""
    local _IgnoreMandatory="false"
    while [[ "$@" != "" ]]; do
        case "$1" in
            -menu|-m)
                _Menu="$2"
                shift
            ;;
            -errorCode|-e)
                _ErrorCode="$2"
                shift
            ;;
            -title|-t)
                _Title="$2"
                shift
            ;;
            -doc|-d)
                _Doc="$_Doc $2"
                shift
            ;;
            -synopsis|-s)
                _Synopsis="$2"
                shift
            ;;
            -log)
                _Log="true"
            ;;
            -no-error|-f)
                _IgnoreMandatory=true
            ;;
            *)
                _t4dDebugLog $perror "Empty or Unknown argument < $1 >"
                return $_t4dErrorCode
            ;;
        esac
        shift
    done

    #CHECK MANDATORY ARGUMENTS
    if [[ "$_IgnoreMandatory" == "false" ]]; then
        if [[ "$_Title" == "null" ]];    then _t4dDebugLog "$perror" "${_t4dErrorCode}-A -> Title is mandatory";    return $_t4dErrorCode; fi
        if [[ "$_Synopsis" == "null" ]]; then _t4dDebugLog "$perror" "${_t4dErrorCode}-B -> Synopsis is mandatory"; return $_t4dErrorCode; fi
    fi
    ##########################

    _t4dUtilsTemplateFunctionStart    "$_Title"
    _t4dUtilsTemplateHeaderBlockstart  "$_Title" "$_Synopsis"
    if [[ "$_Doc" != "" ]]; then
        for _docSection in $(echo $_Doc); do
            _t4dUtilsTemplateHeaderBlocksection $_docSection
        done
    fi
    _t4dUtilsTemplateHeaderBlocEnd
    _t4dUtilsTemplateErrorCode        "$_ErrorCode"
    _t4dUtilsTemplateMenu             "$_Menu"
    if [[ "$_Log" == "true" ]]; then _t4dUtilsTemplateDebugLog  "$_Title"; fi
    _t4dUtilsTemplateFunctionEnd

###############################
}

_chf(){
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    if [[ ${prev} == "chf" ]]; then
        opts="-title -synopsis -errorCode -menu -doc"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ "${prev}" == "-doc" ]] || [[ "${prev}" == "-d" ]] ; then
        opts="Options Available_Options Usage Example Definition"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ ${prev} == "-menu" ]] || [[ ${prev} == "-m" ]] ; then
        opts="loop classic"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ "$(echo ${prev} | grep '^-')" != "" ]]; then
        opts=""
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    else
        opts="-title -synopsis -errorCode -menu -doc"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}

chm(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### chm
#   - Name:
#       chm
###
#   - Synopsis:
#       Create T4D Ready Module
###
#   - Definition:
#       {Text}
#       {Text}
#
#       ยง Part1
#           1. List
#           2. List
#           3. List
#
#       ยง Part2
#           1. List
#
###
#   - Available Options:
#       * -external                 = declare module as external git repo
#       * -option                   = option
#       * -optionExt                = option extended with file dedicated
#       * -synopsis                 = add synopsis
#       * -force                    = valid creation
#       * -name                     = add name
#
###
#   - Usage:
#       * {Name} <option>  [arguments]        = {One-Line Description}
#
###
#   - Example:
#       * {Example1}              = {One-Line Description}
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _ModuleIsExternal="false"
    local _ModuleMainFile="_main_.env"
    local _Options=""
    local _Force="false"
    local _UtilsOptions=""
    local _Synopsis="One-line description of what it does. (less than 55 char)"
    local _ModuleName="Undefined"

    while [[ "$@" != "" ]]; do
        case "$1" in
            -external)
                _ModuleIsExternal="true"
                _ModuleMainFile="_main_.external.env"
            ;;
            -option)
                _Options="$_Options $2"
                shift
            ;;
            -optionExt)
                _Options="$_Options $2"
                _UtilsOptions="$_UtilsOptions $2"
                shift
            ;;
            -synopsis|-s)
                _Synopsis="$2"
                shift
            ;;
            -force|-f)
                _Force="true"
            ;;
            -name|-n)
                _ModuleName="$2"
                shift
            ;;
            *)
                _t4dDebugLog $perror "Empty or Unknown argument < $1 >"
                return $_t4dErrorCode
            ;;
        esac
        shift
    done
    ##### PROJECT.ENV
    local _ModuleRoot="$PWD"
    if [[ "$_ModuleName" == "Undefined" ]]; then
        _t4dDebugLog $plog "Using Dynamic Module Naming"
        _ModuleName="$(basename $_ModuleRoot)"
    fi
    local _ModuleNameCount="$(echo $_ModuleName | tr -d '\n' | wc -m | sed 's| ||g')"
    if [[ "$_ModuleNameCount" != "3" ]]; then
        _t4dDebugLog $perror "module should me named with 3 characters only. Please rename current folder $_ModuleName or use -name option to fit with module standards"
        return 1
    fi

    mkdir -p "$_ModuleRoot/_t4d_"

    _t4dDebugLog $plog     "_main_ file"
    if [[ -e "$_ModuleRoot/_main_.external.env" ]] && [[ "$_ModuleIsExternal" == "false" ]]; then
        _t4dDebugLog $perror "You have defining this module as native but external _main_ file already exist"
        return 1
    elif [[ -e "$_ModuleRoot/$_ModuleMainFile" ]] && [[ "$_Force" == "false" ]]; then
        _t4dCheckSucceeded "File $_ModuleMainFile Already exist"
    elif [[ -e "$_ModuleRoot/_main_.env" ]] && [[ "$_ModuleIsExternal" == "true" ]]; then
        _t4dDebugLog $perror "You have defining this module as external but native _main_ file already exist"
        return 1
    else
        _t4dUtilsModuleCreateFile $_ModuleMainFile "$_ModuleName" "$_Options" "$_Synopsis"
    fi

    _t4dDebugLog $plog     "utils files"
    for _file in $(echo $_UtilsOptions); do
        local _UtilsFile="$_ModuleRoot/_t4d_/$_ModuleName-$_file.env"
        if [[ -e "$_UtilsFile" ]]; then
            _t4dCheckSucceeded "File $_UtilsFile Already exist"
        else
            echo "" > $_UtilsFile
            _t4dCheckInfo "File $(basename $_UtilsFile) Created"
        fi
    done

    for _opt in $(echo $_Options); do
        local _CamelCaseName="_t4dMod$(_t4dVarConvertToCamelCase $_ModuleName)$(_t4dVarConvertToCamelCase $_opt)"
        local _FunctionContent="$(_t4dDocGetFunctionContent "${_CamelCaseName}" 2> /dev/null)"
        if [[ "$_FunctionContent" != "" ]]; then
            _t4dCheckSucceeded "${_CamelCaseName} Already defined"
        else
            echo "" >> $_ModuleRoot/_t4d_/$_ModuleName-utils.env
            chf -t "${_CamelCaseName}" -s "To Be Defined" >> $_ModuleRoot/_t4d_/$_ModuleName-utils.env
            echo "" >> $_ModuleRoot/_t4d_/$_ModuleName-utils.env
            _t4dCheckInfo "${_CamelCaseName} added to $_ModuleRoot/_t4d_/$_ModuleName-utils.env"
        fi
    done

    


###############################
}

chp(){
# Generated From $Tools4Dev_PATH/utils/templates-project.env
# v1.5.0
###### chp
#   - Name:
#       chp
###
#   - Synopsis:
#       Create T4D Ready to Go project from scratch
###
#   - Available Options:
#       -option                 = Add option to wks()
#       -optionExt              = Add option to wks() + create option-utils.env file
#       -composite              = Add manifest.xml
#       -module                 = Enable module for project
#
###
#   - Definition:
#       Chp is an helper that will create and manage t4d integration in any project by adding mandatory files.
#
#           It will also permit any user to add their options in an easy way that it will not have to do some painful copy and pasting stuff
#
#       In order to understand what is going on, don't forget to clean your git repository as git status return an empty output
#       
###
#   - Usage:
#       * chp -option <name>
#           This will add a new option in wks() default fonction AND create Private method in _t4d_/_main_.env file
#       * chp -optionExt <name>
#           Exactly same as option behavior + create utils file dedicated to their option like _wksOptionOtherStuff
#       * chp -composite
#           Will create manifest.xml file if doesn't exist
#       * chp -module <moduleName>
#           Will enable module during project loading process
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=Unknown
    local _pLogOption="${plog}${plblue}[Option]${pstd}"
    local _pLogMain="${plog}${plblue}[Option][Main]${pstd}"
    local _pLogVar="${plog}${plcyan}[Vars]${pstd}"
    local _pLogModule="${plog}${plpurple}[Module]${pstd}"
    local _pLogFile="${plog}${plyellow}[File]${pstd}"

    local _Options=""
    local _OptionsList=""
    local _OtherOptions=""
    local _Modules=""
    local _UtilsFiles=""
    local _ManifestFile=""
    local _Vars=""
    while [[ "$@" != "" ]]; do
        case $1 in
            -option)
                #Add Option to list
                _Options="$_Options $2"
                _OptionsList="$_OptionsList $2"
                shift
            ;;
             -optionInt)
                #Add Option to list
                _Options="$_Options $2"
                _OptionsInt="$_Options $2"
                shift
            ;;
            -optionExt)
                #Add Option to list
                _Options="$_Options $2"
                _UtilsFiles="$_UtilsFiles $2"
                shift
            ;;
            -composite)
                _ManifestFile="true"
            ;;
            -var)
                _Vars="$_Vars $2"
                shift
            ;;
            -module)
                _Modules="$_Modules $2"
                shift
            ;;
            help)
                t4dHelp chp
                return 0
            ;;
            *)
                _t4dDebugLog $perror "Empty or Unknown argument < $1 >"
                return $_t4dErrorCode
            ;;
        esac
        shift
    done

    _t4dDebugLog $plog "Defining \$WS_ROOT as $PWD"
    local WS_ROOT="$PWD"
    mkdir -p "$PWD/_t4d_"

    ##### PROJECT.ENV
    _t4dDebugLog $_pLogFile     "\$WS_ROOT/project.env"
    if [[ -e "$PWD/project.env" ]]; then
        local _CurrentWks="$(cat project.env | sed -n "/wks(){\$/,/^}/p" | grep -m 1 -B1000 '^}')"
        local _AvailableModules="$(cat project.env | grep 't4dLoadModule')"
        local _AvailableWksOptions="$(_t4dDocGetOptionsListV4 "$_CurrentWks")"
        _t4dCheckSucceeded "Already exists"
    else
        _t4dUtilsProjectHeader                      > project.env
        _t4dUtilsProjectMenu                        >> project.env
        _t4dUtilsProjectHelp                        >> project.env
        _t4dUtilsProjectInitLoad                    >> project.env
        _t4dUtilsProjectEnd                         >> project.env
        _t4dCheckInfo "File Created"

    fi

    ##### MAIN.ENV
    

    _t4dDebugLog $_pLogFile ""
    for _File in main variable dependencies gitignore ; do
        _t4dUtilsProjectCreateFile $_File
    done

    if [[ "$_ManifestFile" == "true" ]]; then
        _t4dUtilsProjectCreateFile manifest
        _OtherOptions="clone"
    fi

    _t4dDebugLog $_pLogMain ""

    local _CurrentWksMain="$(cat $WS_ROOT/_t4d_/_main_.env)"

    local _AvailableWksFunction="$(_t4dDocGetFunctionsList "$_CurrentWksMain" -private 2> /dev/null)"
    for _Opt in $(echo $_OptionsList); do
        local _PrivateFunction="_wks$(_t4dVarConvertToCamelCase $_Opt)"
        if [[ "$(echo $_AvailableWksFunction | grep "^${_PrivateFunction}$")" != "" ]]; then
            _t4dCheckSucceeded "$_PrivateFunction Already exists"
        else
            echo "" >> $WS_ROOT/_t4d_/_main_.env
            chf -title $_PrivateFunction -synopsis "Oneline Description - Will be visible from wks help" -log >> $WS_ROOT/_t4d_/_main_.env
            _t4dCheckInfo "$_PrivateFunction Added"
        fi
    done


    ##### WKS OPTIONS
    _t4dDebugLog $_pLogOption   ""
    for _Opt in $(echo "$_OtherOptions $_Options"); do
        if [[ "$(echo $_AvailableWksOptions | grep "^${_Opt}$")" != "" ]]; then
            _t4dCheckSucceeded "$(_t4dPromptVarWithSpace 12 "$_Opt" | sed 's|%||g' ) Already Available"
        else
            cat project.env | grep -B 1000 'doctor)' | grep -v 'doctor)' > project.env.tmp
            local Indent="$(cat project.env| grep -Eo ' *doctor)' | sed 's|doctor)||g')"
            _t4dUtilsAddOptionsToMenu "${_Opt}" "_wks$(_t4dVarConvertToCamelCase $_Opt)" "$Indent"   >> project.env.tmp
            cat project.env | grep -A 1000 'doctor)'  >> project.env.tmp
            mv project.env.tmp project.env
            _t4dCheckInfo "$(_t4dPromptVarWithSpace 12 "$_Opt" | sed 's|%||g' ) Added to wks"
        fi
    done

    _t4dDebugLog $_pLogVar ""
    for _var in $(echo $_Vars); do

        local _VarName="$(echo $_var | cut -d '=' -f1 | cut -d '[' -f1)"
        local _VarGroup="$(echo $_var | cut -d '=' -f1 | cut -d '[' -f2 | sed 's|\]||g')"
        local _VarData="$(echo $_var | grep -Eo '=.*' | sed 's|^=||g')"
        _t4dDebugLog $plog "$_VarName - $_VarGroup - $_VarData"
        local _GroupName="$(_t4dVarFileGetVarsGroup $_VarName)"
        if [[ "$_GroupName" != "" ]]; then
            _t4dCheckInfo "[$_GroupName] ${_VarName}=${_VarData}"
            _t4dVarFileSetVarInGroup "${_VarName}" "${_VarData}" "$_GroupName"

        elif [[ "$(_t4dVarFileGetGroup $_VarGroup)" != "" ]]; then
            _t4dCheckInfo "[$_VarGroup] ${_VarName}=${_VarData}"
            _t4dVarFileSetVarInGroup "${_VarName}" "${_VarData}" "$_VarGroup"
        else
            if [[ "$_VarGroup" != "" ]]; then
                _t4dCheckInfo "Create Group $_VarGroup"
                echo "" >> "$PWD/_t4d_/_variable_.env"
                echo "###########################"  >> "$PWD/_t4d_/_variable_.env"
                echo "## $_VarGroup"                >> "$PWD/_t4d_/_variable_.env"
                echo "###########################"  >> "$PWD/_t4d_/_variable_.env"
                _t4dCheckInfo "${_VarName}=${_VarData}"
                echo "${_VarName}=${_VarData}"      >> "$PWD/_t4d_/_variable_.env"
                echo "###########################"  >> "$PWD/_t4d_/_variable_.env"
            else
                _t4dCheckInfo "$_VarName = $_VarData"
                echo "${_VarName}=${_VarData}" >> "$PWD/_t4d_/_variable_.env"
            fi
        fi
        
        
    done

    ##### WKS MODULES
    _t4dDebugLog $_pLogModule   ""
    for _Mod in $(echo $_Modules); do
        if [[ "$(echo $_AvailableModules | grep "$_Mod" | sed 's| ||g' | grep -v '^#' )" != "" ]]; then
            _t4dCheckSucceeded "$(_t4dPromptVarWithSpace 4 "$_Mod" | sed 's|%||g' ) Already Available"
        else
            cat project.env | grep -B 1000 't4dLoadCompletion' | grep -v 't4dLoadCompletion' > project.env.tmp
            echo "        t4dLoadModule $_Mod" >> project.env.tmp
            cat project.env | grep -A 1000 't4dLoadCompletion' >> project.env.tmp
            mv project.env.tmp project.env
            _t4dCheckInfo "$(_t4dPromptVarWithSpace 4 "$_Mod" | sed 's|%||g' ) Added to project"
        fi
    done

    
    for _File in $(echo $_UtilsFiles); do
        _t4dDebugLog $_pLogFile     "Utils"
        if [[ -e "$WS_ROOT/_t4d_/$_File-utils.env" ]]; then
            _t4dCheckSucceeded "$WS_ROOT/_t4d_/$_File-utils.env Already exists"
        else
            touch "$WS_ROOT/_t4d_/$_File-utils.env"
            _t4dCheckInfo "$WS_ROOT/_t4d_/$_File-utils.env Created"

            cat _t4d_/_main_.env | grep '^t4dLoadFile' | grep -v "_t4d_/$_File-utils.env" > $WS_ROOT/_t4d_/_main_.env.tmp
            echo "t4dLoadFile  \"\$WS_ROOT/_t4d_/$_File-utils.env\"" >> $WS_ROOT/_t4d_/_main_.env.tmp
            cat _t4d_/_main_.env | grep -v '^t4dLoadFile' >> $WS_ROOT/_t4d_/_main_.env.tmp
            mv $WS_ROOT/_t4d_/_main_.env.tmp $WS_ROOT/_t4d_/_main_.env
            _t4dCheckInfo "File $WS_ROOT/_t4d_/$_File-utils.env added to loading process"
        fi
    done

###############################
}



chl(){
# Generated From $Tools4Dev_PATH/Templates/function-advanced.env
# v1.4.0
_t4dDebugInfoStart "chl" "$#" "$@"
###### chl
#   - Name:
#       chl
###
#   - Synopsis:
#       Useful tool that help you to quickly write Changelog file
###
#   - Available Options:
#       * -g      = Update both Team's CHANGELOG and T4d's CHANGELOG
#       * -v      = Version
#       * -b      = Bugfix
#       * -f      = Feature
#       * -i      = Improvements
#       * -c      = Clean
#       * -m      = Chore
#       * -d      = Documentation
#
###
#   - Usage:
#       chl <options> [ChangelogContent]
#
###
#   - Example:
#       * chl -v 4.0.0
#       * chl -b "gik - XX was not doing YY correclty"
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####

    if [[ "$WS_ROOT" == "$Tools4Dev_PATH" ]]; then
        local _changelog="$WS_ROOT/Team/$WS_TEAM/CHANGELOG.md"
    else 
        local _changelog="$WS_ROOT/CHANGELOG.md"
    fi
    local _TAB="    "
    local _contents=""
    local _version="null"
    local _type=""

    while [[ "$@" != "" ]]; do
        case $1 in
            -g*)
                _changelog="$(echo "$_changelog\n$WS_ROOT/CHANGELOG.md" | sort | uniq | tr '\n' ' ')"
            ;;
            -v*)
                _version="$2"
                if [[ -e "$WS_ROOT/VERSION" ]]; then
                    if [[ "$(tail -n+1 $WS_ROOT/VERSION | grep "$2")" == "" ]] ; then
                        echo "$_version" > $WS_ROOT/VERSION
                        t4dHelp chl
                        _t4dDebugLog $plog "Version updated"
                    else
                        t4dHelp chl
                        _t4dDebugLog $pwarning "Already on $_version"
                        return 1
                    fi
                fi
                for _File in $(echo $_changelog $WS_ROOT/CHANGELOG.md); do
                    if [[ "$(cat $_File | grep "$_version")" == "" ]]; then
                        echo "" >> $_File
                        echo "" >> $_File
                        echo "## $_version" >> $_File
                        _t4dDebugLog $plog "Changelog version updated $_version"
                    fi
                done
            ;;
            -b*)
                if [[ "$_type" == "" ]]; then
                    _type="- **bugfix**    "
                else
                    _contents="${_contents} ${1}"
                fi
            ;;
            -m*)
                if [[ "$_type" == "" ]]; then
                    _type="- **chore**    "
                else
                    _contents="${_contents} ${1}"
                fi
            ;;
            -f*)
                if [[ "$_type" == "" ]]; then
                    _type="- **feature**   "
                else
                    _contents="${_contents} ${1}"
                fi
            ;;
            -c*)
                if [[ "$_type" == "" ]]; then
                    _type="- _clean_       "
                else
                    _contents="${_contents} ${1}"
                fi
            ;;
            -i*)
                if [[ "$_type" == "" ]]; then
                    _type="- _improvements_"
                else
                    _contents="${_contents} ${1}"
                fi
            ;;
            -d*)
                if [[ "$_type" == "" ]]; then
                    _type="- documentation "
                else
                    _contents="${_contents} ${1}"
                fi
            ;;
            *)
                _contents="${_contents} ${1}"
            ;;
        esac
        shift
    done

    if [[ "$_contents" == " $_version" ]]; then
        return 0
    elif [[ "$_contents" != "" ]]; then
        for _File in $(echo $_changelog); do
            echo $_type$_contents >> $_File
        done
    else
        t4dHelp chl
        _t4dDebugLog $perror "<No content type to write>"
        return 1
    fi

###############################
_t4dDebugInfoEnd "chl" "$@"
}

_chl(){
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    if [[ ${prev} == "chl" ]] ; then
        opts="-generic -version -bugfix -feature -doc -improvements -clean"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ ${prev} == "-g"* ]] ; then
        opts="-bugfix -feature -doc -improvements -clean"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ ${prev} == "-v"* ]] ; then
        opts="$(cat $WS_ROOT/VERSION)"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ ${prev} == "-b"* ]] ; then
        opts=""
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ ${prev} == "-f"* ]] ; then
        opts=""
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ ${prev} == "-i"* ]] ; then
        opts=""
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ ${prev} == "-c"* ]] ; then
        opts=""
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    else
        opts=""
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}

_chp(){
    local cur prev opts dirs
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    # _t4dDebugLog "$plog" "$prev $cur"
    if [[ ${prev} == "chp" ]] ; then
        opts="$(_t4dDocGetOptionsListV4 "$(_t4dDocGetFunctionContent "chp")" )"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    elif [[ ${prev} == "-module"  ]]; then
        opts="$(find $T4D_MODULES_PATH | grep '_main_.env' | sed "s|$T4D_MODULES_PATH/||g" | cut -d '/' -f1)"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    else
        opts="$(_t4dDocGetOptionsListV4 "$(_t4dDocGetFunctionContent "chp")" )"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
   fi
}
